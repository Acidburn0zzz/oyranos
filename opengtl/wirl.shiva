kernel wirl
{
  const int height = IMAGE_HEIGHT;
  const int width = IMAGE_WIDTH;
  const int xc = width/2;
  const int yc = height/2;
  const float2 C = { xc, yc };
  const float pi = 3.14;
  const float pi_2 = pi/2;
  const float TH = pi_2/3;

  float angle( float distance )
  {
    int min_dim;
    if (width>height)
      min_dim = height/2;
    else
      min_dim = width/2;
    float angle_ = (TH)*(1-(distance/min_dim));
    if (angle_ < 0)
      angle_ = 0;
    if (angle_ > pi_2)
      angle_ = pi_2;
    return angle_;
  }
  float distance( float2 A, float2 B )
  {
    return sqrt( (A[0] - B[0])*(A[0] - B[0]) + (A[1] - B[1])*(A[1] - B[1]) );
  }
  void evaluatePixel(image img, out pixel result)
  {
    const float2 I = result.coord;

    float IC_d = distance( I, C );
    float TH = angle( IC_d );
    float cosTH = cos(TH);
    float sinTH = sin(TH);

    float2 RM1;
    float2 RM2;
    RM1[0] = cosTH;
    RM1[1] = sinTH;
    RM2[0] = -sinTH;
    RM2[1] = cosTH;

    float2 L;
    float2 L0;
    float2 I0 = I - C;
    L0 = RM1*I0[0] + RM2*I0[1];
    L = L0 + C;
    pixel pixelL = img.sampleNearest( L );
    result.data = pixelL.data;
  }
  region changed(region changed_input_region, int input_index, region input_DOD[])
  {
     return changed_input_region;
  }
}
