# data file for the Fltk User Interface Designer (fluid)
version 1.0108 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function _ 
header_name {.h} 
code_name {.cxx}
decl {\#include <FL/Fl_Choice.H>} {public
} 

decl {\#include <FL/Fl_Box.H>} {public
} 

decl {\#include <FL/Fl_Button.H>} {public
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public
} 

decl {\#include <FL/Fl_Output.H>} {public
} 

decl {\#include <FL/Fl_Pack.H>} {public
} 

decl {\#include <FL/Fl_Scroll.H>} {public
} 

decl {\#include <FL/Flmm_Tabs.H>} {public
} 

decl {\#include <FL/fl_ask.H>} {public
} 

decl {\#include <FL/fl_draw.H>} {public
} 

decl {\#include "oyranos.h"
\#include "oyranos_debug.h"
\#include "oyranos_config.h"
\#include "config.h"} {public
} 

decl {\#include "fl_i18n/fl_i18n.H"} {public
} 

decl {\#include <iostream>} {public
} 

decl {\#include <fstream>} {public
} 

decl {\#include <cstdio>} {public
} 

decl {using namespace oyranos;} {public
} 

decl {\#define H_SPACING 10} {public
} 

decl {\#define V_SPACING 3} {public
} 

decl {\#define BUTTON_HEIGHT 25} {public
} 

decl {\#define BOX_WIDTH 250
\#define SELECT_WIDTH 176} {public
} 

Function {myAllocFunc(size_t size)} {private return_type {void*}
} {
  code {return new char [size];} {}
} 

Function {selectDefaultProfile_callback( Fl_Widget* w, void* )} {} {
  code {Option *op = dynamic_cast<Option*> (w->parent());
  if(op) {
    Fl_Choice *c = dynamic_cast<Fl_Choice*> (w);
    if(c) {
      std::cout << c->value() << c->text() << std::endl;
      char text[64];
      int error = 0;
      if(strcmp(c->text(),_("[none]")) == 0)
        error = oySetDefaultProfile( (oyDEFAULT_PROFILE)op->option,0);
      else
        error = oySetDefaultProfile( (oyDEFAULT_PROFILE)op->option, c->text());
      if(error) {
        sprintf( text, "%s %s", _("setting"), _("failed!"));
        fl_alert( text );
      } else
        updateUI();

    } else fl_alert( "no Fl_Choice" );
  } else fl_alert( _("Select Profile") );} {}
} 

Function {showDefaultProfile_callback( Fl_Widget* w, void* )} {} {
  code {Option *op = dynamic_cast<Option*> (w->parent());
  if(op) {
    {
      char text[64];
      char *pn = oyGetDefaultProfileName( (oyDEFAULT_PROFILE)op->option, myAllocFunc);
      if(!pn) {
        sprintf(text, "%s %s", _("showing"), _("failed!") );
        fl_alert( text );
      } else {
        char command[1024];
        snprintf( command, 1024, "export PATH=$PATH:" OY_BINDIR "; iccexamin \\"%s%s%s\\"&",
                  oyGetPathFromProfileName( pn, myAllocFunc ), OY_SLASH, pn );
\#      ifdef DEBUG_
          fprintf(stderr, "%s\\n", command);
\#      endif
        int r = system( command );
        if(r >= 0x200) {
          fl_alert( _("Show Profile failed. iccexamin not found") );
          fprintf(stderr, "%s:%d command \\"%s\\" failed with error: %d.\\n",
                  __FILE__,__LINE__, command, r);
        }
      }
    }
  } else fl_alert( _("Show Profile failed") );} {}
} 

Function {addPathCallback( Fl_Widget* w, void* )} {} {
  code {char* name = fl_dir_chooser(_("Select a directory with ICC profiles"), NULL);
  if( name ) {
    oyPathAdd ( name );
    updateUI();
  }} {}
} 

Function {rmPathCallback( Fl_Widget* w, void* )} {} {
  code {ListEntry *pp = dynamic_cast<ListEntry*> (w->parent());
  if(pp) {
    Fl_Button *b = dynamic_cast<Fl_Button*> (w);
    if(b && b == pp->button_add) {
      std::cout << b->value() << std::endl;
      char text[512];
      int error = oyPathAdd (pp->box->label());
      if(error) {
        sprintf(text, _("error setting path: %s"), pp->box->label());
        fl_alert( text );
      }
    } else
    if(b && b == pp->button_remove) {
      std::cout << b->value() << std::endl;
      oyPathRemove ( pp->box->label() );
      //Fl::pushed(&bPL);
      updateUI();

      // Alle Blaetter Loeschen
      // Nun ist der Speicherblock fuer diese Funktion bereits freigegeben
      // und wird aber weiter benutzt
    } else fl_alert( "no Fl_Button" );
  } else fl_alert( _("Path") );} {}
} 

Function {selectBehaviourCallback( Fl_Widget* w, void* x )} {} {
  code {Option *op = dynamic_cast<Option*> (w->parent());
  if(op) {
    Fl_Choice *c = dynamic_cast<Fl_Choice*> (w);
    if(c) {
      std::cout << (intptr_t)x << c->user_data() << c->value() << c->text() << std::endl;
      char text[64];
      int error = 0;

      if(op->option == oyWIDGET_POLICY)
      {
        error = oyPolicySet( c->text(), NULL );
      } else
        error = oySetBehaviour( (oyBEHAVIOUR)op->option, c->value());

      if(error) {
        sprintf(text, "%s %s %s", _("setting"), _("failed!"),
                c->text());
        fl_alert( text );
      }

      updateUI();
    } else fl_alert( "no Fl_Choice" );
  } else fl_alert( _("Select Behaviour") );} {}
} 

Function {debug_me( )} {} {
  code {int nonsense = 0;
  ++nonsense;} {}
} 

class OyFl_Pack {: {public Fl_Pack}
} {
  Function {OyFl_Pack(int x, int y, int w, int h , const char *t = 0) : Fl_Pack(x,y,w,h,t)} {} {
    code {} {}
  }
  Function {draw()} {open private
  } {
    code {int nw = 0, nh = 0;
  Fl_Scroll * scroll = dynamic_cast <Fl_Scroll*> (parent());
  if( scroll )
  {
    nw = parent()->w() - Fl::box_dw( parent()->box() ) - scroll->scrollbar.w() - spacing();
  } else {
    nw = parent()->w() - Fl::box_dw( parent()->box() );
  }
  w( nw );


  nh = parent()->h() - Fl::box_dh( parent()->box() );
  if( horizontal() )
    Fl_Pack::size( nw, Fl_Pack::h() );
  else
    Fl_Pack::size( Fl_Pack::w(), nh );

  // prearrange if one widget is resizeable
  Fl_Widget *re = resizable();
  if( re )
  {
    int n = children();
    int pos_x = Fl::box_dx(box()) + spacing(),
        pos_y = Fl::box_dy(box()) + spacing(),
        pos_x2 = pos_x + w() - Fl::box_dw(box()) - spacing(),
        pos_y2 = pos_y + h() - Fl::box_dh(box()) - spacing();
    int re_i = 0;
    
    for( int i = 0; i < n; ++i )
    {
      Fl_Widget *o = child( i );
      if( o == re )
      {
        re_i = i;
        break;
      }
      
      if( horizontal() )
      {
        o->position( pos_x, o->y() );
        pos_x += o->w() + spacing();
      } else {
        o->position( o->x(), pos_y );
        pos_y += o->h() + spacing();
      }
    }
    
    for( int i = n - 1; i > re_i; --i )
    {
      Fl_Widget *o = child( i );
      if( horizontal() )
      {
        o->position( pos_x2 - o->w(), o->y() );
        pos_x2 -= o->w() + spacing();
      } else {
        o->position( o->x(), pos_y2 - o->h());
        pos_y2 -= o->h() + spacing();
      }
    }
    
    if(horizontal())
      re->resize( pos_x, re->y(), pos_x2-pos_x, re->h() );
    else
      re->resize( re->x(), pos_y, re->w(), pos_y2-pos_y );

  }


  Fl_Pack::draw();
  } {}
  }
} 

class OyFl_Box {open : {public Fl_Box}
} {
  Function {OyFl_Box(int x, int y, int w, int h , const char *t = 0) : Fl_Box(x,y,w,h,t)} {open
  } {
    code {
  if(t)
  {
    label_orig = (char*)malloc (strlen(t)+1);
    printf("%s %d\\n",t, strlen(t));
    sprintf(label_orig, t);
  } else
    label_orig = 0; } {}
  }
  Function {draw()} {open private
  } {
    code {int wl=0, hl=0, // have to be zeroed
       ws; // ws - label widgets start width
  char *txt = 0;
  int len = 0;
  int last_utf8_len = 0;
  if(label_orig)
  {
    ws = w();
    Fl_Box::label( label_orig );
    measure_label(wl,hl);
    if(wl < ws)
    {
      if(strlen(label_orig))
        Fl_Box::copy_label(label_orig);
    } else {

      txt = (char*)malloc (strlen(label_orig)+1);
      sprintf(txt, label_orig);
      Fl_Box::label(txt);
      do {
        //txt = (char*)Fl_Box::label();
        len = strlen(txt);
        if(len > 3)
        {
/*
 * Index into the table below with the first byte of a UTF-8 sequence to
 * get the number of trailing bytes that are supposed to follow it.
 * Note that *legal* UTF-8 values can't have 4 or 5-bytes. The table is
 * left as-is for anyone who may want to do such conversion, which was
 * allowed in earlier algorithms.
 */
static const char trailingBytesForUTF8[256] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
};
          // now we have to get the last character length
          int ilen = 0;
          last_utf8_len = 0;
          do {
            last_utf8_len = 1 + trailingBytesForUTF8[ (unsigned char)txt[ilen] ];
            ilen += last_utf8_len;
          } while (len-3 > ilen);
          sprintf( &txt[ilen - last_utf8_len], "..." );
          Fl_Box::label(txt);
        } else
          break;
        measure_label(wl,hl);
      } while(wl > ws);

      //Fl_Box::label(txt);
    }
  }
\#ifdef DEBUG
  if(label_orig)
    if(strlen(label_orig))
      printf("%d %s %d %d/%d %d\\n",__LINE__,Fl_Box::label(), strlen(Fl_Box::label()), wl, ws, last_utf8_len);
\#endif
  Fl_Box::draw();

  } {selected
    }
  }
  decl {char *label_orig;} {}
  Function {label()} {return_type {const char *}
  } {
    code {return label_orig;} {}
  }
  Function {label(const char * l)} {open
  } {
    code {
  label_orig = new char (strlen(l)+1);
  sprintf(label_orig, l);
  Fl_Box::label( l );} {}
  }
  Function {copy_label(const char* l)} {open
  } {
    code {
  label_orig = new char (strlen(l)+1);
  sprintf(label_orig, l);
  Fl_Box::copy_label(l);} {}
  }
} 

class Option {: {public OyFl_Pack} private
} {
  decl {OyFl_Box   *box;
  Fl_Choice*choice;

  oyWIDGET option;
  oyWIDGET_TYPE type;
  int       i;} {public
  }
  Function {Option( int x, int y, int w, int h, const char *name,
  oyWIDGET option_,
  oyWIDGET_TYPE type_,
  int choices_n,
  const char **choices,
  int current,
  const char *tooltip,
  int flags) : OyFl_Pack(x, y, w, h)} {open
  } {
    code {Fl_Pack::type( FL_HORIZONTAL );
  Fl_Pack::spacing(H_SPACING);

  option = option_;
  type = type_;

  debug_me();

  /*int weigth = BOX_WIDTH + SELECT_WIDTH + 4 * H_SPACING + BUTTON_HEIGHT;
  if(w < weigth)
    Fl_Pack::size( weigth, Fl_Pack::h() );
  w = Fl_Pack::w();*/

  switch(type)
  {
  // == Profiles ==
  case oyTYPE_DEFAULT_PROFILE:
  case oyTYPE_PROFILE:
  {
    // Profile name box
    box = new OyFl_Box( x, y,
                      OyFl_Pack::w() - SELECT_WIDTH - BUTTON_HEIGHT - 4*H_SPACING, BUTTON_HEIGHT,
                      name );
    box->tooltip( tooltip );
    box->align(FL_ALIGN_LEFT | FL_ALIGN_CLIP|FL_ALIGN_INSIDE);

    if( flags & oyLAYOUT_NO_CHOICES )
    {
      const char* default_p = NULL;
      if(current >= 0)
        default_p = choices[current];
      if(default_p) {
        DBG_PROG_S( (default_p) )
      } else
        default_p = "";
      if(default_p) {
        box = new OyFl_Box( w - BOX_WIDTH - SELECT_WIDTH - BUTTON_HEIGHT - 3*H_SPACING, y,
                          190, BUTTON_HEIGHT, default_p );
        box->align( FL_ALIGN_LEFT | FL_ALIGN_CLIP | FL_ALIGN_INSIDE );

        // identify
        box->user_data( (void*)(intptr_t)option );

        Fl_Group::end();
        Fl_Group::resizable( box );
        return;
      }
    }

    // Choice
    choice = new Fl_Choice( box->x()+box->w(), OyFl_Pack::y(),
                            SELECT_WIDTH, h );
    choice->callback( selectDefaultProfile_callback );
    choice->tooltip( tooltip );
    DBG_PROG_V((choice->size()))

    // Profile viewer
    Fl_Button *button = new Fl_Button( w - BUTTON_HEIGHT - H_SPACING, y,
                                       BUTTON_HEIGHT, BUTTON_HEIGHT, "@-3DnArrow" );
    button->callback( showDefaultProfile_callback );
    button->tooltip(_("Show in external Viewer"));

    // Set choice
    const char* default_p = NULL;
      if(current >= 0)
        default_p = choices[current];
    if(default_p) {
      DBG_PROG_S( (default_p) )
    } else
      default_p = "";
    int val = 0, occurence = 0;
    for (i = 0; i < choices_n; ++i)
    {
      choice->add( choices[i] );
      for(int k = 0; k < choices_n; ++k)
        if(strcmp( choices[i], choices[k]) == 0 && 
           strlen( choices[i] ) &&
           i < k )
          printf("Double occurency of profile: %s\\n", choices[i]);


      if(strstr( choices[i], default_p) && 
         strlen( choices[i] ) == strlen(default_p))
      {
        if(val) {
          ++occurence;
        } else {
          val = i;
          ++occurence;
        }
      }
    }
    if(occurence > 1)
      WARN_S((_("multiple occurencies of default %s profile: %d times"),
               name, occurence))
    choice->value( val );

    DBG_PROG_V((choice->size()))

    DBG_PROG_V((val))

    // identify
    choice->user_data( (void*)(intptr_t)option );
  }
  break;

  // == Behaviour ==
  case oyTYPE_BEHAVIOUR:
  case oyTYPE_CHOICE:
  {
    Fl_Pack *pa = NULL;

    // name box
    box = new OyFl_Box( x, y,
                      w - SELECT_WIDTH - BUTTON_HEIGHT - 4*H_SPACING, BUTTON_HEIGHT,
                      name );
    box->tooltip( tooltip );
    box->align(FL_ALIGN_LEFT | FL_ALIGN_CLIP|FL_ALIGN_INSIDE);

    if( flags & oyLAYOUT_NO_CHOICES )
    {
      const char* default_p = NULL;
      if(current >= 0)
        default_p = choices[current];
      if(default_p) {
        DBG_PROG_S( (default_p) )
      } else
        default_p = "";
      if(default_p) {
        box = new OyFl_Box( w - BOX_WIDTH - SELECT_WIDTH - BUTTON_HEIGHT - 3*H_SPACING, y,
                          190, BUTTON_HEIGHT, default_p );
        box->align( FL_ALIGN_LEFT | FL_ALIGN_CLIP | FL_ALIGN_INSIDE );

        // identify
        box->user_data( (void*)(intptr_t)option );

        Fl_Group::end();
        Fl_Group::resizable( box );
        return;
      }
    }

    // Choice
    choice = new Fl_Choice( w - SELECT_WIDTH - H_SPACING, y,
                            SELECT_WIDTH + BUTTON_HEIGHT + H_SPACING, h );
    choice->callback( selectBehaviourCallback );
    choice->tooltip( tooltip );

    // Set choice
    for (i = 0; i < choices_n; ++i)
    {
      choice->add( choices[i] );
    }
    choice->value( current );

    // identify
    choice->user_data( (void*)(intptr_t)option );
  }
  break;

  // == List ==
  case oyTYPE_LIST:
  {
    int count = choices_n;

    box = NULL;

    Fl_Pack::type( FL_VERTICAL );
    Fl_Pack::spacing(3);
    Fl_Pack::user_data( (void*)(intptr_t)option );

    Fl_Pack::size( w, parent()->h() );

    ListEntry *pp = 0;
    int width = 0;
    new Fl_Box(0,0,10, H_SPACING);

    //parent()->box(FL_ENGRAVED_FRAME);

    for (int i = 0 ; i < count ; ++i) {
      int scrollb_w = 0;
      Fl_Scroll * scroll = dynamic_cast <Fl_Scroll*> (Fl_Group::current()->parent()->parent());
      if( scroll )
      {
        scrollb_w = scroll->scrollbar.w();
      }
      pp = new ListEntry( Fl_Group::current()->x(), Fl_Group::current()->y(),
                          w - scrollb_w - spacing(), BUTTON_HEIGHT,
                          choices[i], flags );
      if( width < pp->w() )
        width = pp->w();
      pp->end();
    }

    if(flags & oyLAYOUT_PATH_SELECTOR)
    {
      Fl_Pack *pack = new Fl_Pack(0,0,
                                  width, BUTTON_HEIGHT);
        pack->type( FL_HORIZONTAL );
        pack->spacing( H_SPACING );
        Fl_Button *nbutton = new Fl_Button(0,0, width-BUTTON_HEIGHT-2*spacing(), BUTTON_HEIGHT, _("@-3+"));
        nbutton->callback( addPathCallback );
        nbutton->tooltip(_("Add Path containing ICC profiles"));
        pack->resizable( nbutton );
        new Fl_Box( 0, 0, 1, BUTTON_HEIGHT );
      pack->end();
    }
  }
  } /* switch */

  
  end();
  resizable( box );} {}
  }
} 

class ListEntry {: {public OyFl_Pack} private
} {
  decl {Fl_Box   *box;
  Fl_Button*button_add, *button_remove;
  int flags;} {public
  }
  Function {ListEntry( int x, int y, int w, int h, const char * name, int flags )
    : OyFl_Pack(x, y, w, h)} {open
  } {
    code {Fl_Pack::type( FL_HORIZONTAL );
    Fl_Pack::spacing(H_SPACING);
    Fl_Group::resizable(0);

    box = new Fl_Box( 0, 0, w-BUTTON_HEIGHT-spacing(), BUTTON_HEIGHT, name );
    box->align(FL_ALIGN_LEFT | FL_ALIGN_CLIP|FL_ALIGN_INSIDE);

    if( flags & oyLAYOUT_PATH_SELECTOR )
    if( strcmp( "/usr/share/color/icc", name ) != 0 &&
        strcmp( "~/.color/icc", name ) != 0 &&
        strcmp( OY_SYSCOLORDIR OY_SLASH OY_ICCDIRNAME , name ) != 0 &&
        strcmp( OY_USERCOLORDIR OY_SLASH OY_ICCDIRNAME, name ) != 0 )
    {
      button_remove = new Fl_Button( 0, 0, BUTTON_HEIGHT, BUTTON_HEIGHT, "@-31+" );
      button_remove->callback( rmPathCallback );
      button_remove->tooltip(_("Exclude this path"));
    } else
      new Fl_Box( 0, 0, BUTTON_HEIGHT, BUTTON_HEIGHT );

    int width=0, height=0;
    int scroll_w = 50; //default_profiles_pack->w() - 3*H_SPACING - BUTTON_HEIGHT;

    box->measure_label(width, height);

    int b_w = scroll_w;
    if(width > scroll_w)
      b_w = width;

    //box->size( b_w + H_SPACING, 25 );

    Fl_Pack::resizable(box);
    //Fl_Pack::size( parent()->w(), Fl_Pack::h() );
    //if(name) delete [] name; // dont delete as it belongs now to the widget} {}
  }
} 

Function {addTab( Flmm_Tabs* tabs, const oyGROUP *groups )} {private return_type {Fl_Group*}
} {
  code {Fl_Group *parent = /*dynamic_cast <Fl_Group>*/ tabs; // parent tab
  Fl_Group *tab = NULL; // actual tab

  if( !parent )
    WARN_S( ("wrong widget") );

  for( int k = 1; k <= groups[0]; ++k )
  {
    int i = 0;
    int wcount = parent->children();
    tab = NULL;
    const char *g_name = NULL;
    oyWidgetTitleGet( (oyWIDGET)groups[k], NULL, &g_name, NULL, NULL );

    for( i = 0; i < wcount; ++i )
    {
      const char *c_name = parent->child( i )->label(); // current name

      if( c_name && g_name )
      if( strcmp( c_name, g_name ) == 0 )
      {
        // a widget with the searched label was found => tab exists allready
        tab = (Flmm_Tabs*) parent->child( i );
        tab->box( FL_THIN_UP_BOX );
        break;
      }
    }

    if( !tab )
    {
      const char *tooltip = NULL;
      const char *title = NULL;
      oyWidgetTitleGet( (oyWIDGET)groups[k], NULL, &title, &tooltip, NULL );

      parent->begin();
        Fl_Widget *wid = (Fl_Widget*)parent->user_data();
        if( !wid ) wid = parent;

        int x = parent->x() + Fl::box_dx( wid->box() ) + V_SPACING,
            y = parent->y() + Fl::box_dy( wid->box() ) + BUTTON_HEIGHT,// + V_SPACING,
            w = parent->w() - Fl::box_dw( wid->box() ) - 2*V_SPACING,
            h = parent->h() - Fl::box_dh( wid->box() ) - BUTTON_HEIGHT - 2*V_SPACING;
        printf("%d+%d,%dx%d\\n", x,y,w,h);
        if( k < groups[0] )
        {
          tab = new Flmm_Tabs(   x,y,w,h, title);
          tab->tooltip( tooltip );
          tab->user_data( tab );
          tab->box( FL_THIN_UP_BOX );
          tab->end();
        } else {
          tab = new Fl_Scroll( x,y,w,h, title );
          tab->tooltip( tooltip );
          tab->box( FL_NO_BOX ); //FL_THIN_UP_BOX );
          { OyFl_Pack* o = new OyFl_Pack( x + Fl::box_dx( tab->box() ) + V_SPACING,
                                      y + Fl::box_dy( tab->box() ) + V_SPACING,// + BUTTON_HEIGHT,
                                      w - Fl::box_dw(parent->box()) - 2*V_SPACING,
                                      h - Fl::box_dh( parent->box() ) - BUTTON_HEIGHT );
            o->box( FL_NO_BOX );
            o->spacing( V_SPACING );
            o->end();
            tab->user_data( o );
            tab->resizable( o );
          }
          tab->end();
        }
      parent->end();
      parent->resizable( tab );
    }
    parent = const_cast <Fl_Group*> (dynamic_cast<Fl_Group*>(tab));
  }

  if( tab )
    return (Fl_Group*)tab->user_data();
  else
    return NULL;} {}
} 

Function {getWidget( Fl_Group* group, oyWIDGET oywid )} {private return_type {Fl_Widget*}
} {
  code {Fl_Widget *wid = NULL;

  if( !group )
    WARN_S( ("wrong widget") );

    int wcount = group->children();

    for( int i = 0; i < wcount; ++i )
    {
      if( dynamic_cast <Fl_Widget*>( group->child( i ) ) )
      {
        oyWIDGET w_id = (oyWIDGET)(intptr_t)group->child( i )->user_data(); // widget id
        if( w_id && oywid )
          if( w_id == oywid )
            return dynamic_cast <Fl_Widget*>( group->child( i ) );
      }

      if( dynamic_cast <Fl_Group*>( group->child( i ) ) )
      {
        wid = getWidget( dynamic_cast <Fl_Group*>( group->child( i ) ),
                            oywid );
        if(wid)
          return wid;
      }
    }

  return wid;} {}
} 

Function {getTab( Flmm_Tabs* tabs, oyGROUP group, Fl_Group **container )} {private return_type {Fl_Group*}
} {
  code {Fl_Group *parent = /*dynamic_cast <Fl_Group>*/ tabs; // parent tab
  Fl_Group *tab = NULL; // actual tab

  if( container )
    *container = NULL;

  if( !parent )
    WARN_S( ("wrong widget") );

    int wcount = parent->children();
    tab = NULL;
    const char *g_name = NULL;
    oyWidgetTitleGet( (oyWIDGET)group, NULL, &g_name, NULL, NULL );

    for( int i = 0; i < wcount; ++i )
    {
      const char *c_name = parent->child( i )->label(); // current name

      if( c_name && g_name )
      if( strcmp( c_name, g_name ) == 0 )
      {
        tab = (Flmm_Tabs*) parent->child( i );
        wcount = tab->children();
        for( i = 0; i < wcount; ++i )
          if( dynamic_cast <Fl_Pack*>( tab->child( i ) ) )
          {
            Fl_Pack *p = dynamic_cast <Fl_Pack*>( tab->child( i ) );
            if( p && p == tab->user_data() )
              *container = p;
            return tab;
          }
        return tab;
      }
    }

  return tab;} {}
} 

Function {refreshOptions()} {private
} {
  code {top_tabs->damage( FL_DAMAGE_ALL );
  top_tabs->redraw();


  Option *op = 0;

  int n = 0;
  oyWIDGET *wl = oyWidgetListGet( oyGROUP_ALL, &n, myAllocFunc );

  // fill in all the options
  for( int i = 0 ; i < n ; ++i )
      {
        const oyGROUP * groups;
        int             count = 0,
                        current = 0,
                        flags = 0;
        const char    * tooltip = NULL;
        const char   ** names = NULL;
        const char    * name = NULL;
        oyWIDGET        oywid = wl[i];
        oyWIDGET_TYPE   type = oyWidgetTitleGet(  oywid,
                                                  &groups, &name, &tooltip,
                                                  &flags );
        if(type == oyTYPE_CHOICE ||
           type == oyTYPE_BEHAVIOUR ||
           type == oyTYPE_DEFAULT_PROFILE ||
           type == oyTYPE_PROFILE ||
           type == oyTYPE_LIST)
        {
          Fl_Group *w = addTab( top_tabs, groups );

          oyOptionChoicesGet( oywid, &count, &names, &current );
          /*for(int en = 0; en < count; ++en)
            printf("%s\\n", names[en]);*/

          if(oywid == oyWIDGET_POLICY)
          {
            if(current >= 0)
              policy_box->label( names[current] );
            else
              policy_box->label( _("----") );
          }

          if(w)
          {
            int bh = BUTTON_HEIGHT;
            int by = w->y();

            Fl_Widget *wid = getWidget( top_tabs, oywid );
            Fl_Choice * choice = dynamic_cast <Fl_Choice*>( wid );
            Fl_Box * box = dynamic_cast <Fl_Box*>( wid );
            Fl_Pack * pack = dynamic_cast <Fl_Pack*>( wid );
            if(box || choice)
            {
              if(choice)
              {
                int j;
                choice->clear();
                for(j = 0; j < count; ++j)
                  choice->add( names[j] );
                if(current >= 0)
                {
                  for(j = 0; j < choice->size() - 1; ++j)
                    if(strcmp(choice->text(j),names[current]) == 0)
                      choice->value( j );
                } else {
                  choice->value( -1 );
                }
              }
              if(box)
              {
                if( current >= 0 )
                  box->label( names[current] );
                else
                  box->label( "" );
              }
            } else {
              if(pack)
              {
                op = dynamic_cast <Option*>( pack );
                w->remove( pack );
                delete op;
                w->damage( FL_DAMAGE_ALL );
                w->redraw();
              }

              w->begin();
                if( flags & oyLAYOUT_MIDDLE )
                {
                  const char *nn[2] = { "","" };
                  op = new Option( w->x(), by, w->w() - Fl::box_dw(w->box()),
                         2*bh, "",
                         oywid, type, 1,nn,1,"", oyLAYOUT_NO_CHOICES | flags );
                }

                op = new Option( w->x(), by, Fl_Group::current()->w()
                                       - Fl::box_dw(Fl_Group::current()->box()),
                         bh, name,
                         oywid, type, count, names, current, tooltip, flags );
              w->end();
            }
          }
        }
      }
  delete [] wl;

  // resize the top group
  if( op )
  {
    int tw = top_group->w(),
        ow = op->w();
    if( tw < ow )
      top_group->size( ow, top_group->h() );
  }} {}
} 

Function {createUI()} {} {
  code {top_tabs->clear();
  refreshOptions();} {}
} 

Function {updateUI()} {} {
  code {//! internal@todo start refreshing when the UI has finished

  Fl::add_idle(updateUIIdle);} {}
} 

Function {updateUIIdle(void*)} {} {
  code {Fl::remove_idle(updateUIIdle);
  //! internal refreshing when the UI has finished
  refreshOptions();} {}
} 

Function {} {open C
} {
  code {Fl::scheme("plastic");

  const char *locale_paths[3] = {0,0,0};
  signed int is_path = -1;
  int num_paths = 0;
\# if __APPLE__
  std::string bdr;
  // RESOURCESPATH is set in the bundle by "Contents/MacOS/ICC Examin.sh"
  if(getenv("RESOURCESPATH")) {
    bdr = getenv("RESOURCESPATH");
    bdr += "/locale";
    locale_paths[num_paths] = bdr.c_str(); ++num_paths;
  }
  if(!locale_paths[0]) {
    //bdr = icc_examin_ns::holeBundleResource("locale","");
    if(bdr.size())
    {
      locale_paths[num_paths] = bdr.c_str();
      ++num_paths;
    }
  }
  locale_paths[num_paths] = OY_LOCALEDIR; ++num_paths;
  locale_paths[num_paths] = OY_SRC_LOCALEDIR; ++num_paths;
\# else
  locale_paths[0] = OY_LOCALEDIR; ++num_paths;
\#ifdef WIN32
\#define DIR_SEPARATOR_C '\\\\'
\#define DIR_SEPARATOR "\\\\"
\#else
\#define DIR_SEPARATOR_C '/'
\#define DIR_SEPARATOR "/"
\#endif
  //DBG_NUM_V(( argc <<" "<< argv[0] )
  if (argc)
  { const char *reloc_path = {"../share/locale"};
    int len = (strlen(argv[0]) + strlen(reloc_path)) * 2 + 128;
    char *path = (char*) malloc( len ); // small one time leak
    char *text = (char*) malloc( len );
    text[0] = 0;
    // whats the path for the executeable ?
    snprintf (text, len-1, argv[0]);
    if (strrchr(text, DIR_SEPARATOR_C)) {
      char *tmp = strrchr(text, DIR_SEPARATOR_C);
      *tmp = 0;
    } else {
      FILE *pp = NULL;

      if (text) free (text);
      text = (char*) malloc( 1024 );

      // Suche das ausfuehrbare Programm
      // TODO symbolische Verknuepfungen
      snprintf( text, 1024, "which %s", argv[0]);
      pp = popen( text, "r" );
      if (pp) {
        if (fscanf (pp, "%s", text) != 1)
        {
          pclose (pp);
          WARN_S(( "no executeable path found" ));
        }
      } else {
        WARN_S(( "could not ask for executeable path" ));
      }
    }
    snprintf (path, len-1, "%s%s%s",text,DIR_SEPARATOR,reloc_path);
    locale_paths[1] = path; ++num_paths;
    locale_paths[2] = OY_SRC_LOCALEDIR; ++num_paths;
    //DBG_NUM_V( path );
    if (text) free (text);
  } else {
    locale_paths[1] = OY_SRC_LOCALEDIR; ++num_paths;
  }
\# endif
  is_path = fl_search_locale_path (num_paths, locale_paths, "de", "oyranos");

  if(is_path >= 0) {
\#if defined(_Xutf8_h) || HASE_UTF8
    int set_charset = 0;
\#else
    int set_charset = 1;
\#endif
    int err = fl_initialise_locale ( "oyranos", locale_paths[is_path],
                                     set_charset );
    if(err) {
      WARN_S(("i18n initialisation failed"));
    }
  }} {}
  Fl_Window top_group {
    label {Oyranos Configuration} open
    xywh {564 430 505 410} type Double resizable size_range {305 255 0 0} visible
  } {
    Fl_Pack {} {open
      xywh {0 0 480 70} type HORIZONTAL
      code0 {}
      class OyFl_Pack
    } {
      Fl_Box {} {
        image {oyranos_logo.png} xywh {0 0 85 70} align 16
      }
      Fl_Box {} {
        label {Oyranos Configuration}
        xywh {95 0 385 70} labeltype ENGRAVED_LABEL labelsize 18 align 24 resizable
        code0 {o->redraw();}
        class OyFl_Box
      }
    }
    Fl_Tabs top_tabs {open
      xywh {0 70 505 301} selection_color 52 resizable
      class Flmm_Tabs
    } {
      Fl_Group {} {
        label Policy open
        tooltip {Reset to a standard Policy for Oyranos.} xywh {10 95 485 266} resizable
      } {
        Fl_Pack {} {open
          xywh {10 105 485 256}
        } {
          Fl_Box {} {
            xywh {30 180 25 25}
          }
          Fl_Choice policy_choice {open
            xywh {30 155 196 25} box NO_BOX down_box BORDER_BOX
          } {
            MenuItem {} {
              label {Office + Home}
              xywh {15 15 100 20}
            }
            MenuItem {} {
              label {Graphic Designers}
              xywh {15 15 100 20}
            }
            MenuItem {} {
              label PrePress
              xywh {15 15 100 20}
            }
            MenuItem {} {
              label Photographers
              xywh {15 15 100 20}
            }
          }
          Fl_Box {} {
            xywh {40 190 25 25} resizable
          }
        }
      }
    }
    Fl_Button {} {
      label {@-3reload}
      callback {//Fl::pushed(&bPL);
  updateUI();}
      tooltip Refresh xywh {10 375 50 25} when 6
    }
    Fl_Pack {} {open
      xywh {160 371 255 35} type HORIZONTAL
    } {
      Fl_Box {} {
        label {Active Policy:}
        xywh {160 371 120 35} align 24
      }
      Fl_Box policy_box {
        label {----}
        xywh {280 371 135 35} align 20
      }
    }
  }
  code {createUI();} {}
} 

Function {listWindow( Fl_Widget *w )} {} {
  code {Fl_Group *g = dynamic_cast <Fl_Group*> (w);

  static int level = 0;


  if( g )
  {
    int n = g->children();

    std::cout << std::endl;
    for(int i = 0; i < level; ++i) std::cout << " ";

    std::cout << "Group t" << (int)w->type() << " " << w->x()<<"+"<<w->y()<<"+"<<w->w()<<"x"<<w->h() <<
                 " \\"" << (w->label()?w->label():"") << "\\":";

    ++level;
    for( int i = 0; i < n; ++i )
    {
      listWindow( g->child(i) );
    }
    --level;
    std::cout << std::endl;
  } else
  {
    std::cout << " t" << (int)w->type() << " " << w->x()<<"+"<<w->y()<<"+"<<w->w()<<"x"<<w->h() <<
                 " " << (w->label()?w->label():"- ");
  }} {}
} 
