SET (GENDIR "${CMAKE_SOURCE_DIR}/src/API_generated/" )

INCLUDE_DIRECTORIES(
                    "${CMAKE_SOURCE_DIR}/src"
                    "${CMAKE_SOURCE_DIR}/src/include"
                    "${CMAKE_BINARY_DIR}/src/include"
                    "${CMAKE_SOURCE_DIR}/src/include_private"
                    "${CMAKE_BINARY_DIR}/src/include_private"
                    "${CMAKE_SOURCE_DIR}/src/liboyranos_core"
                    "${CMAKE_SOURCE_DIR}/src/liboyranos_object"
                    "${CMAKE_SOURCE_DIR}/src/liboyranos_modules"
                    "${CMAKE_SOURCE_DIR}/src/liboyranos_config"
                    "${CMAKE_SOURCE_DIR}/src/liboyranos"
                    "${GENDIR}"
)


INCLUDE(CheckLibraryExists)

CHECK_LIBRARY_EXISTS(m pow "math.h" HAVE_M)
IF(HAVE_M)
  SET( EXTRA_LIBS ${EXTRA_LIBS} m )
ENDIF(HAVE_M)

CHECK_LIBRARY_EXISTS(dl dlopen "dlfcn.h" HAVE_DL)
IF(HAVE_DL)
  SET( EXTRA_LIBS ${EXTRA_LIBS} dl )
ENDIF(HAVE_DL)

CHECK_LIBRARY_EXISTS(ltdl lt_dlopen "ltdl.h" HAVE_LTDL)
IF(HAVE_LTDL)
  SET( EXTRA_LIBS ${EXTRA_LIBS} ltdl )
ENDIF(HAVE_LTDL)

CHECK_LIBRARY_EXISTS(c malloc "stdio.h" HAVE_C)
IF(HAVE_C)
  SET( EXTRA_LIBS ${EXTRA_LIBS} c )
ENDIF(HAVE_C)

FIND_PACKAGE( LCMS )
INCLUDE_DIRECTORIES( ${LCMS_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${LCMS_LIBRARY_DIRS} )

FIND_PACKAGE( LCMS2 )
INCLUDE_DIRECTORIES( ${LCMS2_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${LCMS2_LIBRARY_DIRS} )

IF(NOT( LCMS_FOUND OR LCMS2_FOUND ))
  MESSAGE( SEND_ERROR "Need at least one little CMS installation. lcms2 is prefered; Download http://www.littlecms.com" )
ENDIF()

FIND_PACKAGE( OpenMP )
INCLUDE_DIRECTORIES( ${OPENMP_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${OPENMP_LIBRARY_DIRS} )
SET( EXTRA_LIBS ${EXTRA_LIBS} ${OPENMP_LIBRARIES} )
IF(OPENMP_FOUND)
  SET( HAVE_OPENMP 1 )
ENDIF(OPENMP_FOUND)

FIND_PACKAGE( Xcm )
INCLUDE_DIRECTORIES( ${XCM_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${XCM_LIBRARY_DIRS} )

FIND_PACKAGE( X11 )
INCLUDE_DIRECTORIES( ${XCM_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${XCM_LIBRARY_DIRS} )

FIND_PACKAGE( Xfixes )
INCLUDE_DIRECTORIES( ${XFIXES_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${XFIXES_LIBRARY_DIRS} )

FIND_PACKAGE( XRandR )
INCLUDE_DIRECTORIES( ${XRANDR_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${XRANDR_LIBRARY_DIRS} )

FIND_PACKAGE( Xinerama )
INCLUDE_DIRECTORIES( ${XRANDR_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${XRANDR_LIBRARY_DIRS} )

FIND_PACKAGE( Xxf86vm )
INCLUDE_DIRECTORIES( ${XRANDR_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${XRANDR_LIBRARY_DIRS} )

FIND_PACKAGE(Qt4 COMPONENTS QtCore QtTest REQUIRED)
INCLUDE_DIRECTORIES( ${QT_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${QT_LIBRARY_DIRS} )
IF(QT_FOUND)
  SET( HAVE_QT 1 )
ENDIF(QT_FOUND)

FIND_PACKAGE(LibXml2 REQUIRED)
INCLUDE_DIRECTORIES( ${QT_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${LIBXML2_LIBRARY_DIRS} )
IF(LIBXML2_FOUND)
  SET( HAVE_LIBXML2 1 )
ENDIF(LIBXML2_FOUND)

FIND_PACKAGE( Elektra REQUIRED )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${ELEKTRA_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${ELEKTRA_LIBRARY_DIRS} )

FIND_PACKAGE( Yajl REQUIRED )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${YAJL_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${YAJL_LIBRARY_DIRS} )

FIND_PACKAGE( LibRaw )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${LIBRAW_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${LIBRAW_LIBRARY_DIRS} )

FIND_PACKAGE( Exif2 )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${LIBRAW_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${LIBRAW_LIBRARY_DIRS} )

FIND_PACKAGE( LibPNG REQUIRED )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${LIBPNG_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${LIBPNG_LIBRARY_DIRS} )


ADD_SUBDIRECTORY (include)

ADD_SUBDIRECTORY (include_private)

ADD_SUBDIRECTORY (liboyranos_core)

ADD_SUBDIRECTORY (liboyranos_object)

ADD_SUBDIRECTORY (liboyranos_modules)

ADD_SUBDIRECTORY (liboyranos_config)

ADD_SUBDIRECTORY (liboyranos)

ADD_SUBDIRECTORY (modules)

ADD_SUBDIRECTORY (tests)

ADD_CUSTOM_COMMAND( OUTPUT generator/oyAPIGenerator
                COMMAND cd generator/ && CMAKE_PREFIX_PATH="${CMAKE_CURRENT_BINARY_DIR}/generator/grantlee/lib/cmake/grantlee/" cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=-g -Wall ${CMAKE_CURRENT_SOURCE_DIR}/generator && make || echo "Did you run ${CMAKE_CURRENT_SOURCE_DIR}/generator/download_grantlee.sh in ${CMAKE_CURRENT_BINARY_DIR}/generator/ ?"
		)

ADD_CUSTOM_TARGET( generate
		COMMAND cd ${CMAKE_CURRENT_BINARY_DIR}/generator/ && ./oyAPIGenerator ${CMAKE_CURRENT_SOURCE_DIR}/templates:${CMAKE_CURRENT_SOURCE_DIR}/sources:${CMAKE_CURRENT_SOURCE_DIR}/API_generated
		COMMENT "Generate source code from templates"
		VERBATIM
                DEPENDS generator/oyAPIGenerator
		WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/generator" )

