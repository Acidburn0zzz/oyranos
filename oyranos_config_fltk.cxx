// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include <libintl.h>
#include "oyranos_config_fltk.h"

static void* myAllocFunc(size_t size) {
  return new char [size];
}

void selectDefaultProfile_callback( Fl_Widget* w, void* ) {
  Option *op = dynamic_cast<Option*> (w->parent());
  if(op) {
    Fl_Choice *c = dynamic_cast<Fl_Choice*> (w);
    if(c) {
      std::cout << c->value() << c->text() << std::endl;
      char text[64];
      int error = 0;
      if(strcmp(c->text(),_("[none]")) == 0)
        error = oySetDefaultProfile( (oyDEFAULT_PROFILE)op->option,0);
      else
        error = oySetDefaultProfile( (oyDEFAULT_PROFILE)op->option, c->text());
      if(error) {
        sprintf( text, "%s %s", _("setting"), _("failed!"));
        fl_alert( text );
      } else
        updateUI();

    } else fl_alert( "no Fl_Choice" );
  } else fl_alert( _("Select Profile") );
}

void showDefaultProfile_callback( Fl_Widget* w, void* ) {
  Option *op = dynamic_cast<Option*> (w->parent());
  if(op) {
    {
      char text[64];
      char *pn = oyGetDefaultProfileName( (oyDEFAULT_PROFILE)op->option, myAllocFunc);
      if(!pn) {
        sprintf(text, "%s %s", _("showing"), _("failed!") );
        fl_alert( text );
      } else {
        char command[1024];
        snprintf( command, 1024, "export PATH=$PATH:" OY_BINDIR "; iccexamin \"%s%s%s\"&",
                  oyGetPathFromProfileName( pn, myAllocFunc ), OY_SLASH, pn );
#      ifdef DEBUG_
          fprintf(stderr, "%s\n", command);
#      endif
        int r = system( command );
        if(r >= 0x200) {
          fl_alert( _("Show Profile failed. iccexamin not found") );
          fprintf(stderr, "%s:%d command \"%s\" failed with error: %d.\n",
                  __FILE__,__LINE__, command, r);
        }
      }
    }
  } else fl_alert( _("Show Profile failed") );
}

void addPathCallback( Fl_Widget* w, void* ) {
  char* name = fl_dir_chooser(_("Select a directory with ICC profiles"), NULL);
  if( name ) {
    oyPathAdd ( name );
    updateUI();
  }
}

void rmPathCallback( Fl_Widget* w, void* ) {
  ListEntry *pp = dynamic_cast<ListEntry*> (w->parent());
  if(pp) {
    Fl_Button *b = dynamic_cast<Fl_Button*> (w);
    if(b && b == pp->button_add) {
      std::cout << b->value() << std::endl;
      char text[512];
      int error = oyPathAdd (pp->box->label());
      if(error) {
        sprintf(text, _("error setting path: %s"), pp->box->label());
        fl_alert( text );
      }
    } else
    if(b && b == pp->button_remove) {
      std::cout << b->value() << std::endl;
      oyPathRemove ( pp->box->label() );
      //Fl::pushed(&bPL);
      updateUI();

      // Alle Blaetter Loeschen
      // Nun ist der Speicherblock fuer diese Funktion bereits freigegeben
      // und wird aber weiter benutzt
    } else fl_alert( "no Fl_Button" );
  } else fl_alert( _("Path") );
}

void selectBehaviourCallback( Fl_Widget* w, void* x ) {
  Option *op = dynamic_cast<Option*> (w->parent());
  if(op) {
    Fl_Choice *c = dynamic_cast<Fl_Choice*> (w);
    if(c) {
      std::cout << (intptr_t)x << c->user_data() << c->value() << c->text() << std::endl;
      char text[64];
      int error = 0;

      if(op->option == oyWIDGET_POLICY)
      {
        error = oyPolicySet( c->text(), NULL );
      } else
        error = oySetBehaviour( (oyBEHAVIOUR)op->option, c->value());

      if(error) {
        sprintf(text, "%s %s %s", _("setting"), _("failed!"),
                c->text());
        fl_alert( text );
      }

      updateUI();
    } else fl_alert( "no Fl_Choice" );
  } else fl_alert( _("Select Behaviour") );
}

void debug_me( ) {
  int nonsense = 0;
  ++nonsense;
}

OyFl_Pack::OyFl_Pack(int x, int y, int w, int h , const char *t ) : Fl_Pack(x,y,w,h,t) {
}

void OyFl_Pack::draw() {
  int nw = 0, nh = 0;
  Fl_Scroll * scroll = dynamic_cast <Fl_Scroll*> (parent());
  if( scroll )
  {
    nw = parent()->w() - Fl::box_dw( parent()->box() ) - scroll->scrollbar.w() - spacing();
  } else {
    nw = parent()->w() - Fl::box_dw( parent()->box() );
  }
  w( nw );


  nh = parent()->h() - Fl::box_dh( parent()->box() );
  if( horizontal() )
    Fl_Pack::size( nw, Fl_Pack::h() );
  else
    Fl_Pack::size( Fl_Pack::w(), nh );

  // prearrange if one widget is resizeable
  Fl_Widget *re = resizable();
  if( re )
  {
    int n = children();
    int pos_x = Fl::box_dx(box()) + spacing(),
        pos_y = Fl::box_dy(box()) + spacing(),
        pos_x2 = pos_x + w() - Fl::box_dw(box()) - spacing(),
        pos_y2 = pos_y + h() - Fl::box_dh(box()) - spacing();
    int re_i = 0;
    
    for( int i = 0; i < n; ++i )
    {
      Fl_Widget *o = child( i );
      if( o == re )
      {
        re_i = i;
        break;
      }
      
      if( horizontal() )
      {
        o->position( pos_x, o->y() );
        pos_x += o->w() + spacing();
      } else {
        o->position( o->x(), pos_y );
        pos_y += o->h() + spacing();
      }
    }
    
    for( int i = n - 1; i > re_i; --i )
    {
      Fl_Widget *o = child( i );
      if( horizontal() )
      {
        o->position( pos_x2 - o->w(), o->y() );
        pos_x2 -= o->w() + spacing();
      } else {
        o->position( o->x(), pos_y2 - o->h());
        pos_y2 -= o->h() + spacing();
      }
    }
    
    if(horizontal())
      re->resize( pos_x, re->y(), pos_x2-pos_x, re->h() );
    else
      re->resize( re->x(), pos_y, re->w(), pos_y2-pos_y );

  }


  Fl_Pack::draw();
}

OyFl_Box::OyFl_Box(int x, int y, int w, int h , const char *t ) : Fl_Box(x,y,w,h,t) {
  if(t)
  {
    label_orig = (char*)malloc (strlen(t)+1);
    printf("%s %d\n",t, strlen(t));
    sprintf(label_orig, t);
  } else
    label_orig = 0;
}

void OyFl_Box::draw() {
  int wl=0, hl=0, // have to be zeroed
       ws; // ws - label widgets start width
  char *txt = 0;
  int len = 0;
  int last_utf8_len = 0;
  if(label_orig)
  {
    ws = w();
    Fl_Box::label( label_orig );
    measure_label(wl,hl);
    if(wl < ws)
    {
      if(strlen(label_orig))
        Fl_Box::copy_label(label_orig);
    } else {

      txt = (char*)malloc (strlen(label_orig)+1);
      sprintf(txt, label_orig);
      Fl_Box::label(txt);
      do {
        //txt = (char*)Fl_Box::label();
        len = strlen(txt);
        if(len > 3)
        {
/*
 * Index into the table below with the first byte of a UTF-8 sequence to
 * get the number of trailing bytes that are supposed to follow it.
 * Note that *legal* UTF-8 values can't have 4 or 5-bytes. The table is
 * left as-is for anyone who may want to do such conversion, which was
 * allowed in earlier algorithms.
 */
static const char trailingBytesForUTF8[256] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
};
          // now we have to get the last character length
          int ilen = 0;
          last_utf8_len = 0;
          do {
            last_utf8_len = 1 + trailingBytesForUTF8[ (unsigned char)txt[ilen] ];
            ilen += last_utf8_len;
          } while (len-3 > ilen);
          sprintf( &txt[ilen - last_utf8_len], "..." );
          Fl_Box::label(txt);
        } else
          break;
        measure_label(wl,hl);
      } while(wl > ws);

      //Fl_Box::label(txt);
    }
  }
#ifdef DEBUG
  if(label_orig)
    if(strlen(label_orig))
      printf("%d %s %d %d/%d %d\n",__LINE__,Fl_Box::label(), strlen(Fl_Box::label()), wl, ws, last_utf8_len);
#endif
  Fl_Box::draw();
}

const char * OyFl_Box::label() {
  return label_orig;
}

void OyFl_Box::label(const char * l) {
  label_orig = new char (strlen(l)+1);
  sprintf(label_orig, l);
  Fl_Box::label( l );
}

void OyFl_Box::copy_label(const char* l) {
  label_orig = new char (strlen(l)+1);
  sprintf(label_orig, l);
  Fl_Box::copy_label(l);
}

Option::Option( int x, int y, int w, int h, const char *name,
  oyWIDGET option_,
  oyWIDGET_TYPE type_,
  int choices_n,
  const char **choices,
  int current,
  const char *tooltip,
  int flags) : OyFl_Pack(x, y, w, h) {
  Fl_Pack::type( FL_HORIZONTAL );
  Fl_Pack::spacing(H_SPACING);

  option = option_;
  type = type_;

  debug_me();

  /*int weigth = BOX_WIDTH + SELECT_WIDTH + 4 * H_SPACING + BUTTON_HEIGHT;
  if(w < weigth)
    Fl_Pack::size( weigth, Fl_Pack::h() );
  w = Fl_Pack::w();*/

  switch(type)
  {
  // == Profiles ==
  case oyTYPE_DEFAULT_PROFILE:
  case oyTYPE_PROFILE:
  {
    // Profile name box
    box = new OyFl_Box( x, y,
                      OyFl_Pack::w() - SELECT_WIDTH - BUTTON_HEIGHT - 4*H_SPACING, BUTTON_HEIGHT,
                      name );
    box->tooltip( tooltip );
    box->align(FL_ALIGN_LEFT | FL_ALIGN_CLIP|FL_ALIGN_INSIDE);

    if( flags & oyLAYOUT_NO_CHOICES )
    {
      const char* default_p = NULL;
      if(current >= 0)
        default_p = choices[current];
      if(default_p) {
        DBG_PROG_S( (default_p) )
      } else
        default_p = "";
      if(default_p) {
        box = new OyFl_Box( w - BOX_WIDTH - SELECT_WIDTH - BUTTON_HEIGHT - 3*H_SPACING, y,
                          190, BUTTON_HEIGHT, default_p );
        box->align( FL_ALIGN_LEFT | FL_ALIGN_CLIP | FL_ALIGN_INSIDE );

        // identify
        box->user_data( (void*)(intptr_t)option );

        Fl_Group::end();
        Fl_Group::resizable( box );
        return;
      }
    }

    // Choice
    choice = new Fl_Choice( box->x()+box->w(), OyFl_Pack::y(),
                            SELECT_WIDTH, h );
    choice->callback( selectDefaultProfile_callback );
    choice->tooltip( tooltip );
    DBG_PROG_V((choice->size()))

    // Profile viewer
    Fl_Button *button = new Fl_Button( w - BUTTON_HEIGHT - H_SPACING, y,
                                       BUTTON_HEIGHT, BUTTON_HEIGHT, "@-3DnArrow" );
    button->callback( showDefaultProfile_callback );
    button->tooltip(_("Show in external Viewer"));

    // Set choice
    const char* default_p = NULL;
      if(current >= 0)
        default_p = choices[current];
    if(default_p) {
      DBG_PROG_S( (default_p) )
    } else
      default_p = "";
    int val = 0, occurence = 0;
    for (i = 0; i < choices_n; ++i)
    {
      choice->add( choices[i] );
      for(int k = 0; k < choices_n; ++k)
        if(strcmp( choices[i], choices[k]) == 0 && 
           strlen( choices[i] ) &&
           i < k )
          printf("Double occurency of profile: %s\n", choices[i]);


      if(strstr( choices[i], default_p) && 
         strlen( choices[i] ) == strlen(default_p))
      {
        if(val) {
          ++occurence;
        } else {
          val = i;
          ++occurence;
        }
      }
    }
    if(occurence > 1)
      WARN_S((_("multiple occurencies of default %s profile: %d times"),
               name, occurence))
    choice->value( val );

    DBG_PROG_V((choice->size()))

    DBG_PROG_V((val))

    // identify
    choice->user_data( (void*)(intptr_t)option );
  }
  break;

  // == Behaviour ==
  case oyTYPE_BEHAVIOUR:
  case oyTYPE_CHOICE:
  {
    Fl_Pack *pa = NULL;

    // name box
    box = new OyFl_Box( x, y,
                      w - SELECT_WIDTH - BUTTON_HEIGHT - 4*H_SPACING, BUTTON_HEIGHT,
                      name );
    box->tooltip( tooltip );
    box->align(FL_ALIGN_LEFT | FL_ALIGN_CLIP|FL_ALIGN_INSIDE);

    if( flags & oyLAYOUT_NO_CHOICES )
    {
      const char* default_p = NULL;
      if(current >= 0)
        default_p = choices[current];
      if(default_p) {
        DBG_PROG_S( (default_p) )
      } else
        default_p = "";
      if(default_p) {
        box = new OyFl_Box( w - BOX_WIDTH - SELECT_WIDTH - BUTTON_HEIGHT - 3*H_SPACING, y,
                          190, BUTTON_HEIGHT, default_p );
        box->align( FL_ALIGN_LEFT | FL_ALIGN_CLIP | FL_ALIGN_INSIDE );

        // identify
        box->user_data( (void*)(intptr_t)option );

        Fl_Group::end();
        Fl_Group::resizable( box );
        return;
      }
    }

    // Choice
    choice = new Fl_Choice( w - SELECT_WIDTH - H_SPACING, y,
                            SELECT_WIDTH + BUTTON_HEIGHT + H_SPACING, h );
    choice->callback( selectBehaviourCallback );
    choice->tooltip( tooltip );

    // Set choice
    for (i = 0; i < choices_n; ++i)
    {
      choice->add( choices[i] );
    }
    choice->value( current );

    // identify
    choice->user_data( (void*)(intptr_t)option );
  }
  break;

  // == List ==
  case oyTYPE_LIST:
  {
    int count = choices_n;

    box = NULL;

    Fl_Pack::type( FL_VERTICAL );
    Fl_Pack::spacing(3);
    Fl_Pack::user_data( (void*)(intptr_t)option );

    Fl_Pack::size( w, parent()->h() );

    ListEntry *pp = 0;
    int width = 0;
    new Fl_Box(0,0,10, H_SPACING);

    //parent()->box(FL_ENGRAVED_FRAME);

    for (int i = 0 ; i < count ; ++i) {
      int scrollb_w = 0;
      Fl_Scroll * scroll = dynamic_cast <Fl_Scroll*> (Fl_Group::current()->parent()->parent());
      if( scroll )
      {
        scrollb_w = scroll->scrollbar.w();
      }
      pp = new ListEntry( Fl_Group::current()->x(), Fl_Group::current()->y(),
                          w - scrollb_w - spacing(), BUTTON_HEIGHT,
                          choices[i], flags );
      if( width < pp->w() )
        width = pp->w();
      pp->end();
    }

    if(flags & oyLAYOUT_PATH_SELECTOR)
    {
      Fl_Pack *pack = new Fl_Pack(0,0,
                                  width, BUTTON_HEIGHT);
        pack->type( FL_HORIZONTAL );
        pack->spacing( H_SPACING );
        Fl_Button *nbutton = new Fl_Button(0,0, width-BUTTON_HEIGHT-2*spacing(), BUTTON_HEIGHT, _("@-3+"));
        nbutton->callback( addPathCallback );
        nbutton->tooltip(_("Add Path containing ICC profiles"));
        pack->resizable( nbutton );
        new Fl_Box( 0, 0, 1, BUTTON_HEIGHT );
      pack->end();
    }
  }
  } /* switch */

  
  end();
  resizable( box );
}

ListEntry::ListEntry( int x, int y, int w, int h, const char * name, int flags )
    : OyFl_Pack(x, y, w, h) {
  Fl_Pack::type( FL_HORIZONTAL );
    Fl_Pack::spacing(H_SPACING);
    Fl_Group::resizable(0);

    box = new Fl_Box( 0, 0, w-BUTTON_HEIGHT-spacing(), BUTTON_HEIGHT, name );
    box->align(FL_ALIGN_LEFT | FL_ALIGN_CLIP|FL_ALIGN_INSIDE);

    if( flags & oyLAYOUT_PATH_SELECTOR )
    if( strcmp( "/usr/share/color/icc", name ) != 0 &&
        strcmp( "~/.color/icc", name ) != 0 &&
        strcmp( OY_SYSCOLORDIR OY_SLASH OY_ICCDIRNAME , name ) != 0 &&
        strcmp( OY_USERCOLORDIR OY_SLASH OY_ICCDIRNAME, name ) != 0 )
    {
      button_remove = new Fl_Button( 0, 0, BUTTON_HEIGHT, BUTTON_HEIGHT, "@-31+" );
      button_remove->callback( rmPathCallback );
      button_remove->tooltip(_("Exclude this path"));
    } else
      new Fl_Box( 0, 0, BUTTON_HEIGHT, BUTTON_HEIGHT );

    int width=0, height=0;
    int scroll_w = 50; //default_profiles_pack->w() - 3*H_SPACING - BUTTON_HEIGHT;

    box->measure_label(width, height);

    int b_w = scroll_w;
    if(width > scroll_w)
      b_w = width;

    //box->size( b_w + H_SPACING, 25 );

    Fl_Pack::resizable(box);
    //Fl_Pack::size( parent()->w(), Fl_Pack::h() );
    //if(name) delete [] name; // dont delete as it belongs now to the widget
}

static Fl_Group* addTab( Flmm_Tabs* tabs, const oyGROUP *groups ) {
  Fl_Group *parent = /*dynamic_cast <Fl_Group>*/ tabs; // parent tab
  Fl_Group *tab = NULL; // actual tab

  if( !parent )
    WARN_S( ("wrong widget") );

  for( int k = 1; k <= groups[0]; ++k )
  {
    int i = 0;
    int wcount = parent->children();
    tab = NULL;
    const char *g_name = NULL;
    oyWidgetTitleGet( (oyWIDGET)groups[k], NULL, &g_name, NULL, NULL );

    for( i = 0; i < wcount; ++i )
    {
      const char *c_name = parent->child( i )->label(); // current name

      if( c_name && g_name )
      if( strcmp( c_name, g_name ) == 0 )
      {
        // a widget with the searched label was found => tab exists allready
        tab = (Flmm_Tabs*) parent->child( i );
        tab->box( FL_THIN_UP_BOX );
        break;
      }
    }

    if( !tab )
    {
      const char *tooltip = NULL;
      const char *title = NULL;
      oyWidgetTitleGet( (oyWIDGET)groups[k], NULL, &title, &tooltip, NULL );

      parent->begin();
        Fl_Widget *wid = (Fl_Widget*)parent->user_data();
        if( !wid ) wid = parent;

        int x = parent->x() + Fl::box_dx( wid->box() ) + V_SPACING,
            y = parent->y() + Fl::box_dy( wid->box() ) + BUTTON_HEIGHT,// + V_SPACING,
            w = parent->w() - Fl::box_dw( wid->box() ) - 2*V_SPACING,
            h = parent->h() - Fl::box_dh( wid->box() ) - BUTTON_HEIGHT - 2*V_SPACING;
        printf("%d+%d,%dx%d\n", x,y,w,h);
        if( k < groups[0] )
        {
          tab = new Flmm_Tabs(   x,y,w,h, title);
          tab->tooltip( tooltip );
          tab->user_data( tab );
          tab->box( FL_THIN_UP_BOX );
          tab->end();
        } else {
          tab = new Fl_Scroll( x,y,w,h, title );
          tab->tooltip( tooltip );
          tab->box( FL_NO_BOX ); //FL_THIN_UP_BOX );
          { OyFl_Pack* o = new OyFl_Pack( x + Fl::box_dx( tab->box() ) + V_SPACING,
                                      y + Fl::box_dy( tab->box() ) + V_SPACING,// + BUTTON_HEIGHT,
                                      w - Fl::box_dw(parent->box()) - 2*V_SPACING,
                                      h - Fl::box_dh( parent->box() ) - BUTTON_HEIGHT );
            o->box( FL_NO_BOX );
            o->spacing( V_SPACING );
            o->end();
            tab->user_data( o );
            tab->resizable( o );
          }
          tab->end();
        }
      parent->end();
      parent->resizable( tab );
    }
    parent = const_cast <Fl_Group*> (dynamic_cast<Fl_Group*>(tab));
  }

  if( tab )
    return (Fl_Group*)tab->user_data();
  else
    return NULL;
}

static Fl_Widget* getWidget( Fl_Group* group, oyWIDGET oywid ) {
  Fl_Widget *wid = NULL;

  if( !group )
    WARN_S( ("wrong widget") );

    int wcount = group->children();

    for( int i = 0; i < wcount; ++i )
    {
      if( dynamic_cast <Fl_Widget*>( group->child( i ) ) )
      {
        oyWIDGET w_id = (oyWIDGET)(intptr_t)group->child( i )->user_data(); // widget id
        if( w_id && oywid )
          if( w_id == oywid )
            return dynamic_cast <Fl_Widget*>( group->child( i ) );
      }

      if( dynamic_cast <Fl_Group*>( group->child( i ) ) )
      {
        wid = getWidget( dynamic_cast <Fl_Group*>( group->child( i ) ),
                            oywid );
        if(wid)
          return wid;
      }
    }

  return wid;
}

static Fl_Group* getTab( Flmm_Tabs* tabs, oyGROUP group, Fl_Group **container ) {
  Fl_Group *parent = /*dynamic_cast <Fl_Group>*/ tabs; // parent tab
  Fl_Group *tab = NULL; // actual tab

  if( container )
    *container = NULL;

  if( !parent )
    WARN_S( ("wrong widget") );

    int wcount = parent->children();
    tab = NULL;
    const char *g_name = NULL;
    oyWidgetTitleGet( (oyWIDGET)group, NULL, &g_name, NULL, NULL );

    for( int i = 0; i < wcount; ++i )
    {
      const char *c_name = parent->child( i )->label(); // current name

      if( c_name && g_name )
      if( strcmp( c_name, g_name ) == 0 )
      {
        tab = (Flmm_Tabs*) parent->child( i );
        wcount = tab->children();
        for( i = 0; i < wcount; ++i )
          if( dynamic_cast <Fl_Pack*>( tab->child( i ) ) )
          {
            Fl_Pack *p = dynamic_cast <Fl_Pack*>( tab->child( i ) );
            if( p && p == tab->user_data() )
              *container = p;
            return tab;
          }
        return tab;
      }
    }

  return tab;
}

static void refreshOptions() {
  top_tabs->damage( FL_DAMAGE_ALL );
  top_tabs->redraw();


  Option *op = 0;

  int n = 0;
  oyWIDGET *wl = oyWidgetListGet( oyGROUP_ALL, &n, myAllocFunc );

  // fill in all the options
  for( int i = 0 ; i < n ; ++i )
      {
        const oyGROUP * groups;
        int             count = 0,
                        current = 0,
                        flags = 0;
        const char    * tooltip = NULL;
        const char   ** names = NULL;
        const char    * name = NULL;
        oyWIDGET        oywid = wl[i];
        oyWIDGET_TYPE   type = oyWidgetTitleGet(  oywid,
                                                  &groups, &name, &tooltip,
                                                  &flags );
        if(type == oyTYPE_CHOICE ||
           type == oyTYPE_BEHAVIOUR ||
           type == oyTYPE_DEFAULT_PROFILE ||
           type == oyTYPE_PROFILE ||
           type == oyTYPE_LIST)
        {
          Fl_Group *w = addTab( top_tabs, groups );

          oyOptionChoicesGet( oywid, &count, &names, &current );
          /*for(int en = 0; en < count; ++en)
            printf("%s\n", names[en]);*/

          if(oywid == oyWIDGET_POLICY)
          {
            if(current >= 0)
              policy_box->label( names[current] );
            else
              policy_box->label( _("----") );
          }

          if(w)
          {
            int bh = BUTTON_HEIGHT;
            int by = w->y();

            Fl_Widget *wid = getWidget( top_tabs, oywid );
            Fl_Choice * choice = dynamic_cast <Fl_Choice*>( wid );
            Fl_Box * box = dynamic_cast <Fl_Box*>( wid );
            Fl_Pack * pack = dynamic_cast <Fl_Pack*>( wid );
            if(box || choice)
            {
              if(choice)
              {
                int j;
                choice->clear();
                for(j = 0; j < count; ++j)
                  choice->add( names[j] );
                if(current >= 0)
                {
                  for(j = 0; j < choice->size() - 1; ++j)
                    if(strcmp(choice->text(j),names[current]) == 0)
                      choice->value( j );
                } else {
                  choice->value( -1 );
                }
              }
              if(box)
              {
                if( current >= 0 )
                  box->label( names[current] );
                else
                  box->label( "" );
              }
            } else {
              if(pack)
              {
                op = dynamic_cast <Option*>( pack );
                w->remove( pack );
                delete op;
                w->damage( FL_DAMAGE_ALL );
                w->redraw();
              }

              w->begin();
                if( flags & oyLAYOUT_MIDDLE )
                {
                  const char *nn[2] = { "","" };
                  op = new Option( w->x(), by, w->w() - Fl::box_dw(w->box()),
                         2*bh, "",
                         oywid, type, 1,nn,1,"", oyLAYOUT_NO_CHOICES | flags );
                }

                op = new Option( w->x(), by, Fl_Group::current()->w()
                                       - Fl::box_dw(Fl_Group::current()->box()),
                         bh, name,
                         oywid, type, count, names, current, tooltip, flags );
              w->end();
            }
          }
        }
      }
  delete [] wl;

  // resize the top group
  if( op )
  {
    int tw = top_group->w(),
        ow = op->w();
    if( tw < ow )
      top_group->size( ow, top_group->h() );
  }
}

void createUI() {
  top_tabs->clear();
  refreshOptions();
}

void updateUI() {
  //! internal@todo start refreshing when the UI has finished

  Fl::add_idle(updateUIIdle);
}

void updateUIIdle(void*) {
  Fl::remove_idle(updateUIIdle);
  //! internal refreshing when the UI has finished
  refreshOptions();
}

Fl_Double_Window *top_group=(Fl_Double_Window *)0;

#include <FL/Fl_Image.H>
static unsigned char idata_oyranos_logo[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,182,182,182,255,199,199,199,255,199,199,199,255,198,198,198,255,196,196,
196,255,195,195,195,255,193,193,193,255,190,190,190,255,189,189,189,255,188,188,
188,255,187,187,187,255,135,135,135,255,144,144,144,255,184,184,184,255,184,184,
184,255,184,184,184,255,183,183,183,255,182,182,182,255,182,182,182,255,181,181,
181,255,181,181,181,255,181,181,181,255,180,180,180,255,179,179,179,255,179,179,
179,255,178,178,178,255,178,178,178,255,177,177,177,255,177,177,177,255,177,177,
177,255,177,177,177,255,176,176,176,255,174,174,174,255,174,174,174,255,175,175,
175,255,174,174,174,255,175,175,175,255,175,175,175,255,175,175,175,255,175,175,
175,255,176,176,176,255,176,176,176,255,176,176,176,255,176,176,176,255,166,166,
166,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,217,217,217,255,222,222,222,255,221,221,221,255,218,218,218,255,217,217,217,
255,214,214,214,255,212,212,212,255,210,210,210,255,208,208,208,255,207,207,207,
255,206,206,206,255,167,167,167,255,172,172,172,255,203,203,203,255,202,202,202,
255,201,201,201,255,200,200,200,255,199,199,199,255,198,198,198,255,197,197,197,
255,196,196,196,255,196,196,196,255,195,195,195,255,194,194,194,255,194,194,194,
255,194,194,194,255,193,193,193,255,193,193,193,255,193,193,193,255,193,193,193,
255,193,193,193,255,193,193,193,255,193,193,193,255,193,193,193,255,193,193,193,
255,193,193,193,255,194,194,194,255,195,195,195,255,196,196,196,255,197,197,197,
255,197,197,197,255,199,199,199,255,200,200,200,255,201,201,201,255,199,199,199,
255,160,160,160,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,216,216,216,255,223,223,223,255,222,222,222,255,220,220,220,255,218,218,
218,255,216,216,216,255,214,214,214,255,212,212,212,255,210,210,210,255,208,208,
208,255,207,207,207,255,162,162,162,255,169,169,169,255,204,204,204,255,185,214,
185,255,148,237,148,255,165,224,165,255,164,223,164,255,199,199,199,255,199,199,
199,255,198,198,198,255,198,198,198,255,197,197,197,255,196,196,196,255,195,195,
195,255,195,195,195,255,195,195,195,255,194,194,194,255,194,194,194,255,193,193,
193,255,193,193,193,255,192,192,192,255,193,193,193,255,193,193,193,255,193,193,
193,255,193,193,193,255,193,193,193,255,194,194,194,255,195,195,195,255,195,195,
195,255,196,196,196,255,198,198,198,255,198,198,198,255,201,201,201,255,199,199,
199,255,140,140,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,212,212,212,255,221,221,221,255,220,220,220,255,218,218,218,255,216,
216,216,255,214,214,214,255,212,212,212,255,209,209,209,255,207,207,207,255,205,
205,205,255,204,204,204,255,156,156,156,255,164,164,164,255,182,213,190,255,125,
249,141,255,123,248,126,255,122,248,122,255,121,247,121,255,139,233,139,255,176,
208,176,255,194,194,194,255,194,194,194,255,193,193,193,255,192,192,192,255,192,
192,192,255,191,191,191,255,190,190,190,255,190,190,190,255,190,190,190,255,190,
190,190,255,189,189,189,255,189,189,189,255,189,189,189,255,189,189,189,255,189,
189,189,255,190,190,190,255,190,190,190,255,190,190,190,255,191,191,191,255,192,
192,192,255,193,193,193,255,194,194,194,255,194,194,194,255,196,196,196,255,194,
194,194,255,112,112,112,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,210,210,210,255,219,219,219,255,218,218,218,255,216,216,216,255,
213,213,213,255,212,212,212,255,209,209,209,255,207,207,207,255,205,205,205,255,
202,202,202,255,201,201,201,255,150,150,150,255,159,159,159,255,158,224,177,255,
117,249,149,255,115,248,136,255,114,247,117,255,113,246,113,255,113,246,113,255,
112,244,112,255,151,217,151,255,190,190,190,255,190,190,190,255,189,189,189,255,
188,188,188,255,188,188,188,255,187,187,187,255,186,186,186,255,186,186,186,255,
186,186,186,255,186,186,186,255,186,186,186,255,186,186,186,255,185,185,185,255,
185,185,185,255,186,186,186,255,186,186,186,255,186,186,186,255,187,187,187,255,
188,188,188,255,189,189,189,255,190,190,190,255,191,191,191,255,192,192,192,255,
156,156,156,255,94,94,94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,208,208,208,255,217,217,217,255,217,217,217,255,214,214,214,
255,212,212,212,255,210,210,210,255,207,207,207,255,205,205,205,255,203,203,203,
255,200,200,200,255,198,198,198,255,144,144,144,255,153,153,153,255,111,250,162,
255,110,249,154,255,108,248,144,255,106,247,132,255,105,246,113,255,104,245,104,
255,103,244,103,255,103,243,103,255,124,228,124,255,186,186,186,255,185,185,185,
255,185,185,185,255,184,184,184,255,183,183,183,255,183,183,183,255,183,183,183,
255,182,182,182,255,182,182,182,255,182,182,182,255,182,182,182,255,182,182,182,
255,182,182,182,255,183,183,183,255,183,183,183,255,184,184,184,255,184,184,184,
255,185,185,185,255,185,185,185,255,186,186,186,255,188,188,188,255,158,158,158,
255,99,99,99,255,94,94,94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,207,207,207,255,216,216,216,255,215,215,215,255,213,213,213,
255,210,210,210,255,207,207,207,255,205,205,205,255,203,203,203,255,201,201,201,
255,198,198,198,255,196,196,196,255,139,139,139,255,148,148,148,255,103,250,163,
255,101,249,155,255,99,248,148,255,98,247,137,255,97,246,127,255,96,245,105,255,
95,244,95,255,94,242,94,255,94,241,94,255,116,225,116,255,182,182,182,255,181,
181,181,255,180,180,180,255,180,180,180,255,179,179,179,255,179,179,179,255,178,
178,178,255,178,178,178,255,178,178,178,255,179,179,179,255,178,178,178,255,179,
179,179,255,179,179,179,255,179,179,179,255,180,180,180,255,180,180,180,255,182,
182,182,255,182,182,182,255,172,172,172,255,127,127,127,255,105,105,105,255,93,
93,93,255,94,94,94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,205,205,205,255,214,214,214,255,213,213,213,255,211,211,211,255,208,
208,208,255,206,206,206,255,203,203,203,255,201,201,201,255,198,198,198,255,196,
196,196,255,193,193,193,255,133,133,133,255,143,143,143,255,95,249,165,255,93,
249,157,255,92,248,150,255,91,247,143,255,90,246,132,255,90,245,121,255,89,244,
101,255,88,243,88,255,88,241,88,255,88,239,88,255,111,222,111,255,161,192,156,
255,177,177,177,255,177,177,177,255,177,177,177,255,175,175,175,255,176,176,176,
255,175,175,175,255,175,175,175,255,174,174,174,255,175,175,175,255,175,175,175,
255,176,176,176,255,176,176,176,255,176,176,176,255,173,173,173,255,157,157,157,
255,139,139,139,255,113,113,113,255,109,109,109,255,105,105,105,255,93,93,93,
255,94,94,94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,203,203,203,255,213,213,213,255,212,212,212,255,209,209,209,255,207,207,
207,255,204,204,204,255,202,202,202,255,200,200,200,255,196,196,196,255,194,194,
194,255,191,191,191,255,127,127,127,255,138,138,138,255,89,250,168,255,87,249,
161,255,87,248,154,255,85,247,148,255,85,246,139,255,84,245,130,255,84,243,119,
255,83,242,100,255,83,239,83,255,83,236,83,255,83,233,83,255,126,229,83,255,168,
188,152,255,175,175,175,255,174,174,174,255,173,173,173,255,172,172,172,255,172,
172,172,255,171,171,171,255,171,171,171,255,171,171,171,255,166,166,166,255,159,
159,159,255,148,148,148,255,133,133,133,255,121,121,121,255,118,118,118,255,116,
116,116,255,113,113,113,255,110,110,110,255,106,106,106,255,93,93,93,255,94,94,
94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,
202,202,255,212,212,212,255,211,211,211,255,208,208,208,255,206,206,206,255,203,
203,203,255,200,200,200,255,197,197,197,255,195,195,195,255,192,192,192,255,189,
189,189,255,125,125,125,255,134,134,134,255,83,250,172,255,82,249,165,255,82,
248,159,255,80,247,151,255,80,246,146,255,79,244,137,255,79,243,128,255,79,239,
118,255,78,236,100,255,78,232,81,255,89,229,78,255,131,225,79,255,153,221,77,
255,168,181,145,255,166,166,166,255,162,162,162,255,157,157,157,255,152,152,152,
255,146,146,146,255,140,140,140,255,134,134,134,255,131,131,131,255,128,128,128,
255,127,127,127,255,125,125,125,255,121,121,121,255,119,119,119,255,116,116,116,
255,113,113,113,255,110,110,110,255,107,107,107,255,93,93,93,255,94,94,94,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,201,201,
255,211,211,211,255,210,210,210,255,207,207,207,255,204,204,204,255,201,201,201,
255,198,198,198,255,197,197,197,255,193,193,193,255,190,190,190,255,187,187,187,
255,122,122,122,255,131,131,131,255,80,250,175,255,78,249,170,255,77,248,163,
255,76,247,156,255,70,245,147,255,62,241,135,255,55,236,124,255,49,232,110,255,
44,228,94,255,39,223,72,255,56,218,38,255,106,212,28,255,128,206,22,255,147,
201,22,255,149,157,115,255,144,144,144,255,141,141,141,255,140,140,140,255,138,
138,138,255,136,136,136,255,134,134,134,255,131,131,131,255,129,129,129,255,127,
127,127,255,125,125,125,255,121,121,121,255,120,120,120,255,117,117,117,255,113,
113,113,255,110,110,110,255,108,108,108,255,93,93,93,255,94,94,94,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,200,200,255,210,
210,210,255,209,209,209,255,206,206,206,255,203,203,203,255,200,200,200,255,197,
197,197,255,194,194,194,255,192,192,192,255,189,189,189,255,187,187,187,255,120,
120,120,255,127,127,127,255,60,249,172,255,48,248,162,255,36,246,150,255,25,243,
138,255,21,238,128,255,22,235,122,255,22,229,113,255,23,226,105,255,23,221,94,
255,23,216,80,255,70,211,63,255,111,206,35,255,134,202,22,255,152,197,22,255,
167,192,22,255,152,154,114,255,142,142,142,255,140,140,140,255,138,138,138,255,
136,136,136,255,134,134,134,255,131,131,131,255,130,130,130,255,128,128,128,255,
125,125,125,255,123,123,123,255,120,120,120,255,118,118,118,255,114,114,114,255,
111,111,111,255,108,108,108,255,93,93,93,255,94,94,94,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,199,199,255,209,209,209,255,
208,208,208,255,205,205,205,255,202,202,202,255,199,199,199,255,196,196,196,255,
193,193,193,255,191,191,191,255,189,189,189,255,185,185,185,255,98,98,98,255,90,
90,90,255,18,249,162,255,19,246,156,255,20,242,150,255,21,238,144,255,22,234,
137,255,22,229,130,255,23,225,123,255,23,221,115,255,23,215,106,255,24,211,96,
255,86,207,83,255,119,202,67,255,141,197,41,255,157,191,22,255,171,186,22,255,
182,180,21,255,142,142,142,255,140,140,140,255,139,139,139,255,136,136,136,255,
134,134,134,255,132,132,132,255,130,130,130,255,128,128,128,255,125,125,125,255,
123,123,123,255,120,120,120,255,118,118,118,255,115,115,115,255,112,112,112,255,
109,109,109,255,94,94,94,255,94,94,94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,198,198,255,209,209,209,255,207,207,207,255,
205,205,205,255,201,201,201,255,198,198,198,255,195,195,195,255,193,193,193,255,
191,191,191,255,179,179,179,255,166,166,166,255,77,77,77,255,90,90,90,255,18,
245,168,255,19,241,163,255,20,237,157,255,21,233,151,255,22,229,145,255,22,225,
139,255,22,220,131,255,22,215,124,255,23,211,116,255,40,206,107,255,98,201,97,
255,127,196,85,255,146,191,70,255,162,185,46,255,175,180,23,255,186,174,21,255,
183,162,51,255,141,141,141,255,139,139,139,255,137,137,137,255,135,135,135,255,
133,133,133,255,131,131,131,255,128,128,128,255,126,126,126,255,124,124,124,255,
121,121,121,255,118,118,118,255,115,115,115,255,113,113,113,255,110,110,110,255,
95,95,95,255,94,94,94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,198,198,198,255,208,208,208,255,207,207,207,255,204,204,204,255,
200,200,200,255,197,197,197,255,195,195,195,255,193,193,193,255,185,185,185,255,
168,168,168,255,166,166,166,255,78,78,78,255,93,93,93,255,20,240,175,255,19,237,
170,255,20,232,164,255,20,228,157,255,21,223,152,255,22,219,146,255,22,215,138,
255,23,210,132,255,23,205,125,255,54,200,117,255,107,195,109,255,132,190,98,255,
151,184,87,255,166,180,73,255,179,174,52,255,190,169,26,255,199,162,21,255,189,
152,50,255,140,140,140,255,137,137,137,255,135,135,135,255,134,134,134,255,131,
131,131,255,128,128,128,255,127,127,127,255,125,125,125,255,121,121,121,255,118,
118,118,255,116,116,116,255,113,113,113,255,110,110,110,255,95,95,95,255,94,94,
94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,
197,197,255,207,207,207,255,206,206,206,255,203,203,203,255,200,200,200,255,198,
198,198,255,195,195,195,255,191,191,191,255,171,171,171,255,169,169,169,255,166,
166,166,255,80,80,80,255,93,93,93,255,56,216,176,255,19,230,175,255,20,227,170,
255,21,222,165,255,21,217,158,255,22,214,153,255,22,209,146,255,22,204,140,255,
22,199,132,255,76,195,127,255,116,189,118,255,139,184,110,255,157,179,100,255,
171,172,88,255,183,167,75,255,193,161,58,255,202,155,28,255,211,149,21,255,197,
142,50,255,138,138,138,255,136,136,136,255,134,134,134,255,131,131,131,255,129,
129,129,255,127,127,127,255,125,125,125,255,121,121,121,255,119,119,119,255,117,
117,117,255,113,113,113,255,110,110,110,255,95,95,95,255,94,94,94,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,197,197,255,208,
208,208,255,206,206,206,255,203,203,203,255,200,200,200,255,198,198,198,255,195,
195,195,255,180,180,180,255,171,171,171,255,169,169,169,255,167,167,167,255,82,
82,82,255,94,94,94,255,93,195,174,255,19,225,181,255,20,221,176,255,21,217,171,
255,21,213,165,255,21,207,159,255,22,203,153,255,22,198,146,255,28,193,140,255,
90,188,133,255,123,183,127,255,144,177,119,255,161,171,111,255,175,166,102,255,
187,160,91,255,197,155,78,255,206,148,61,255,214,142,35,255,218,135,20,255,195,
130,49,255,136,136,136,255,134,134,134,255,131,131,131,255,129,129,129,255,127,
127,127,255,125,125,125,255,123,123,123,255,120,120,120,255,117,117,117,255,114,
114,114,255,111,111,111,255,96,96,96,255,94,94,94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,197,197,255,207,207,207,255,206,
206,206,255,203,203,203,255,200,200,200,255,198,198,198,255,194,194,194,255,174,
174,174,255,171,171,171,255,170,170,170,255,168,168,168,255,83,83,83,255,96,96,
96,255,94,192,177,255,21,219,187,255,19,215,181,255,20,211,176,255,21,207,171,
255,22,202,166,255,22,196,160,255,23,192,154,255,44,186,148,255,101,182,141,255,
129,177,134,255,150,171,127,255,166,165,120,255,180,159,112,255,190,153,102,255,
201,147,91,255,208,139,79,255,217,133,65,255,218,126,39,255,215,118,19,255,193,
117,48,255,134,134,134,255,132,132,132,255,130,130,130,255,128,128,128,255,125,
125,125,255,123,123,123,255,120,120,120,255,118,118,118,255,114,114,114,255,111,
111,111,255,97,97,97,255,94,94,94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,198,198,198,255,207,207,207,255,206,206,206,255,203,
203,203,255,201,201,201,255,198,198,198,255,189,189,189,255,174,174,174,255,172,
172,172,255,171,171,171,255,169,169,169,255,85,85,85,255,98,98,98,255,163,163,
163,255,23,213,192,255,19,209,186,255,20,204,182,255,21,199,177,255,22,195,172,
255,22,190,166,255,22,185,160,255,59,179,154,255,111,175,148,255,135,169,141,
255,154,161,138,255,169,161,141,255,181,149,121,255,193,144,112,255,204,137,103,
255,212,131,93,255,219,124,81,255,219,116,67,255,216,108,44,255,214,99,22,255,
191,100,47,255,133,133,133,255,130,130,130,255,128,128,128,255,126,126,126,255,
123,123,123,255,121,121,121,255,118,118,118,255,115,115,115,255,112,112,112,255,
98,98,98,255,94,94,94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,198,198,198,255,208,208,208,255,207,207,207,255,204,204,204,255,
201,201,201,255,198,198,198,255,183,183,183,255,175,175,175,255,174,174,174,255,
172,172,172,255,170,170,170,255,87,87,87,255,99,99,99,255,164,164,164,255,26,
209,198,255,22,203,193,255,20,197,187,255,20,193,182,255,21,188,177,255,22,183,
172,255,22,177,166,255,81,173,161,255,119,167,155,255,139,156,145,255,210,209,
209,255,233,233,233,255,184,160,152,255,198,135,120,255,207,128,113,255,215,121,
103,255,221,113,93,255,219,104,82,255,217,95,69,255,214,84,50,255,211,72,23,255,
189,74,46,255,131,131,131,255,128,128,128,255,127,127,127,255,125,125,125,255,
121,121,121,255,118,118,118,255,116,116,116,255,113,113,113,255,98,98,98,255,94,
94,94,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
199,199,199,255,208,208,208,255,206,206,206,255,204,204,204,255,201,201,201,255,
199,199,199,255,181,181,181,255,176,176,176,255,175,175,175,255,173,173,173,255,
171,171,171,255,88,88,88,255,101,101,101,255,164,164,164,255,61,192,192,255,23,
197,198,255,20,191,193,255,21,186,188,255,21,180,183,255,22,175,178,255,32,170,
172,255,95,165,167,255,126,159,161,255,144,149,152,255,199,197,197,255,231,231,
231,255,181,147,148,255,201,125,127,255,210,118,121,255,219,110,114,255,222,100,
104,255,219,89,94,255,217,78,84,255,215,63,71,255,212,39,53,255,209,20,26,255,
187,45,45,255,128,128,128,255,127,127,127,255,125,125,125,255,121,121,121,255,
119,119,119,255,117,117,117,255,113,113,113,255,98,98,98,255,96,96,96,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,199,199,255,
209,209,209,255,208,208,208,255,204,204,204,255,202,202,202,255,199,199,199,255,
179,179,179,255,177,177,177,255,176,176,176,255,173,173,173,255,172,172,172,255,
90,90,90,255,102,102,102,255,165,165,165,255,97,179,185,255,25,190,203,255,21,
184,197,255,21,179,193,255,21,172,187,255,21,167,183,255,46,162,178,255,104,156,
172,255,133,150,167,255,153,143,161,255,164,134,151,255,171,130,145,255,195,122,
143,255,205,114,136,255,213,105,128,255,222,95,122,255,223,83,114,255,221,69,
106,255,218,47,95,255,215,24,85,255,212,18,72,255,209,17,57,255,206,16,31,255,
184,43,43,255,127,127,127,255,125,125,125,255,123,123,123,255,120,120,120,255,
117,117,117,255,113,113,113,255,99,99,99,255,96,96,96,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,200,200,255,210,210,210,255,
208,208,208,255,205,205,205,255,203,203,203,255,197,197,197,255,180,180,180,255,
178,178,178,255,176,176,176,255,174,174,174,255,172,172,172,255,91,91,91,255,
104,104,104,255,166,166,166,255,164,164,164,255,27,182,208,255,22,176,202,255,
20,170,197,255,21,165,193,255,21,158,187,255,68,153,183,255,114,147,179,255,
139,140,173,255,158,132,167,255,173,126,161,255,187,118,155,255,199,109,149,255,
208,99,142,255,217,88,135,255,224,75,128,255,223,56,122,255,221,31,114,255,218,
20,105,255,215,19,96,255,213,19,86,255,210,18,74,255,188,45,76,255,148,102,107,
255,128,128,128,255,125,125,125,255,123,123,123,255,120,120,120,255,118,118,118,
255,114,114,114,255,99,99,99,255,96,96,96,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,201,201,255,211,211,211,255,209,209,209,
255,206,206,206,255,204,204,204,255,194,194,194,255,181,181,181,255,179,179,179,
255,177,177,177,255,174,174,174,255,173,173,173,255,92,92,92,255,105,105,105,
255,167,167,167,255,165,165,165,255,29,175,213,255,24,168,208,255,20,162,203,
255,21,155,198,255,22,150,194,255,85,142,188,255,123,136,184,255,144,128,178,
255,164,122,173,255,178,114,167,255,191,104,161,255,202,93,156,255,212,81,149,
255,219,63,141,255,225,38,135,255,224,22,129,255,221,21,121,255,219,20,114,255,
216,19,105,255,194,48,107,255,152,106,122,255,133,133,133,255,130,130,130,255,
128,128,128,255,126,126,126,255,123,123,123,255,121,121,121,255,118,118,118,255,
115,115,115,255,100,100,100,255,96,96,96,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,202,202,255,212,212,212,255,210,210,210,
255,207,207,207,255,205,205,205,255,192,192,192,255,182,182,182,255,180,180,180,
255,177,177,177,255,176,176,176,255,174,174,174,255,94,94,94,255,106,106,106,
255,168,168,168,255,166,166,166,255,97,164,190,255,28,161,213,255,22,152,207,
255,20,145,202,255,36,139,198,255,98,132,194,255,128,125,188,255,151,117,184,
255,168,108,178,255,183,97,172,255,195,85,167,255,205,70,161,255,215,45,155,255,
224,25,149,255,227,22,142,255,224,21,135,255,222,21,129,255,199,50,126,255,157,
109,132,255,137,137,137,255,135,135,135,255,133,133,133,255,131,131,131,255,128,
128,128,255,127,127,127,255,125,125,125,255,121,121,121,255,118,118,118,255,116,
116,116,255,101,101,101,255,96,96,96,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,203,203,255,213,213,213,255,212,212,212,255,
209,209,209,255,206,206,206,255,190,190,190,255,183,183,183,255,180,180,180,255,
178,178,178,255,177,177,177,255,175,175,175,255,96,96,96,255,107,107,107,255,
169,169,169,255,168,168,168,255,131,164,179,255,29,152,218,255,24,144,212,255,
21,134,208,255,49,127,202,255,108,119,198,255,135,111,193,255,156,101,188,255,
172,89,183,255,186,75,177,255,199,52,173,255,209,28,167,255,218,23,162,255,225,
22,154,255,227,22,148,255,205,53,143,255,162,113,141,255,141,141,141,255,140,
140,140,255,137,137,137,255,136,136,136,255,134,134,134,255,131,131,131,255,128,
128,128,255,127,127,127,255,125,125,125,255,121,121,121,255,119,119,119,255,116,
116,116,255,101,101,101,255,96,96,96,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,205,205,255,214,214,214,255,213,213,213,255,
210,210,210,255,207,207,207,255,188,188,188,255,183,183,183,255,181,181,181,255,
179,179,179,255,178,178,178,255,176,176,176,255,98,98,98,255,109,109,109,255,
170,170,170,255,167,167,167,255,166,166,166,255,31,142,221,255,27,132,217,255,
22,124,213,255,73,113,207,255,117,104,202,255,142,93,198,255,161,78,193,255,
177,59,187,255,191,34,183,255,203,23,178,255,213,23,172,255,222,23,166,255,208,
54,158,255,166,116,148,255,145,145,145,255,144,144,144,255,141,141,141,255,140,
140,140,255,138,138,138,255,136,136,136,255,134,134,134,255,131,131,131,255,129,
129,129,255,127,127,127,255,125,125,125,255,123,123,123,255,120,120,120,255,117,
117,117,255,102,102,102,255,97,97,97,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,206,206,255,215,215,215,255,214,214,214,255,
212,212,212,255,207,207,207,255,186,186,186,255,184,184,184,255,182,182,182,255,
180,180,180,255,178,178,178,255,176,176,176,255,98,98,98,255,111,111,111,255,
170,170,170,255,169,169,169,255,166,166,166,255,98,146,194,255,29,121,222,255,
26,108,216,255,89,96,212,255,124,83,207,255,148,66,202,255,165,38,197,255,181,
23,193,255,195,23,188,255,205,23,183,255,199,55,170,255,167,119,155,255,148,
148,148,255,147,147,147,255,146,146,146,255,144,144,144,255,142,142,142,255,140,
140,140,255,138,138,138,255,136,136,136,255,135,135,135,255,132,132,132,255,130,
130,130,255,128,128,128,255,125,125,125,255,123,123,123,255,120,120,120,255,118,
118,118,255,103,103,103,255,97,97,97,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,208,208,255,217,217,217,255,216,216,216,
255,212,212,212,255,206,206,206,255,187,187,187,255,185,185,185,255,183,183,183,
255,181,181,181,255,179,179,179,255,177,177,177,255,100,100,100,255,112,112,112,
255,172,172,172,255,169,169,169,255,167,167,167,255,132,153,180,255,30,105,226,
255,44,91,221,255,100,71,216,255,131,46,212,255,153,24,207,255,172,23,203,255,
186,23,198,255,187,56,183,255,166,121,161,255,152,152,152,255,151,151,151,255,
149,149,149,255,147,147,147,255,146,146,146,255,144,144,144,255,142,142,142,255,
140,140,140,255,139,139,139,255,136,136,136,255,134,134,134,255,132,132,132,255,
130,130,130,255,128,128,128,255,126,126,126,255,123,123,123,255,120,120,120,255,
118,118,118,255,103,103,103,255,97,97,97,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,210,210,255,218,218,218,255,217,217,
217,255,215,215,215,255,199,199,199,255,188,188,188,255,186,186,186,255,184,184,
184,255,182,182,182,255,180,180,180,255,179,179,179,255,102,102,102,255,113,113,
113,255,172,172,172,255,170,170,170,255,168,168,168,255,165,165,165,255,65,105,
213,255,61,58,225,255,112,29,221,255,138,21,216,255,160,22,212,255,170,55,194,
255,162,122,166,255,154,154,154,255,153,153,153,255,152,152,152,255,151,151,151,
255,149,149,149,255,148,148,148,255,146,146,146,255,144,144,144,255,143,143,143,
255,141,141,141,255,139,139,139,255,137,137,137,255,135,135,135,255,133,133,133,
255,131,131,131,255,128,128,128,255,127,127,127,255,124,124,124,255,121,121,121,
255,118,118,118,255,104,104,104,255,97,97,97,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,211,211,255,220,220,220,255,219,
219,219,255,216,216,216,255,193,193,193,255,189,189,189,255,187,187,187,255,185,
185,185,255,183,183,183,255,180,180,180,255,179,179,179,255,103,103,103,255,115,
115,115,255,173,173,173,255,171,171,171,255,170,170,170,255,167,167,167,255,131,
134,182,255,85,30,231,255,122,25,224,255,146,55,204,255,157,124,172,255,156,156,
156,255,155,155,155,255,154,154,154,255,153,153,153,255,152,152,152,255,151,151,
151,255,150,150,150,255,148,148,148,255,147,147,147,255,145,145,145,255,143,143,
143,255,141,141,141,255,140,140,140,255,137,137,137,255,135,135,135,255,134,134,
134,255,131,131,131,255,128,128,128,255,127,127,127,255,125,125,125,255,121,121,
121,255,118,118,118,255,104,104,104,255,97,97,97,255,0,0,0,0,0,0,0,0,0,0,0,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,213,213,255,221,221,221,255,
220,220,220,255,206,206,206,255,192,192,192,255,190,190,190,255,188,188,188,255,
186,186,186,255,183,183,183,255,182,182,182,255,180,180,180,255,106,106,106,255,
111,111,111,255,162,162,162,255,161,161,161,255,157,157,157,255,155,155,155,255,
153,153,153,255,124,91,191,255,141,119,167,255,144,144,144,255,144,144,144,255,
143,143,143,255,142,142,142,255,141,141,141,255,141,141,141,255,140,140,140,255,
139,139,139,255,138,138,138,255,136,136,136,255,134,134,134,255,133,133,133,255,
131,131,131,255,130,130,130,255,129,129,129,255,127,127,127,255,125,125,125,255,
123,123,123,255,121,121,121,255,119,119,119,255,116,116,116,255,114,114,114,255,
111,111,111,255,109,109,109,255,95,95,95,255,79,79,79,255,0,0,0,0,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,215,215,255,222,222,222,
255,211,211,211,255,195,195,195,255,193,193,193,255,191,191,191,255,189,189,189,
255,186,186,186,255,185,185,185,255,182,182,182,255,180,180,180,255,106,106,106,
255,59,59,59,255,55,55,55,255,51,51,51,255,47,47,47,255,43,43,43,255,38,38,38,
255,34,34,34,255,30,30,30,255,25,25,25,255,21,21,21,255,22,22,22,255,22,22,22,
255,23,23,23,255,23,23,23,255,23,23,23,255,23,23,23,255,23,23,23,255,23,23,23,
255,22,22,22,255,22,22,22,255,21,21,21,255,21,21,21,255,20,20,20,255,19,19,19,
255,18,18,18,255,17,17,17,255,16,16,16,255,15,15,15,255,14,14,14,255,12,12,12,
255,11,11,11,255,9,9,9,255,7,7,7,255,3,3,3,255,0,0,0,255,0,0,0,255,0,0,0,255,2,
2,2,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,186,186,255,188,188,
188,255,186,186,186,255,184,184,184,255,181,181,181,255,179,179,179,255,176,176,
176,255,173,173,173,255,171,171,171,255,168,168,168,255,166,166,166,255,161,161,
161,255,158,158,158,255,155,155,155,255,153,153,153,255,151,151,151,255,148,148,
148,255,146,146,146,255,143,143,143,255,141,141,141,255,138,138,138,255,135,135,
135,255,134,134,134,255,134,134,134,255,133,133,133,255,132,132,132,255,131,131,
131,255,130,130,130,255,129,129,129,255,128,128,128,255,127,127,127,255,126,126,
126,255,124,124,124,255,123,123,123,255,121,121,121,255,119,119,119,255,117,117,
117,255,115,115,115,255,113,113,113,255,111,111,111,255,109,109,109,255,106,106,
106,255,104,104,104,255,101,101,101,255,96,96,96,255,86,86,86,255,0,0,0,0,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,141,141,
255,126,126,126,255,123,123,123,255,121,121,121,255,121,121,121,255,118,118,118,
255,117,117,117,255,116,116,116,255,115,115,115,255,113,113,113,255,113,113,113,
255,112,112,112,255,110,110,110,255,109,109,109,255,108,108,108,255,107,107,107,
255,104,104,104,255,104,104,104,255,102,102,102,255,101,101,101,255,100,100,100,
255,99,99,99,255,98,98,98,255,98,98,98,255,98,98,98,255,98,98,98,255,98,98,98,
255,96,96,96,255,96,96,96,255,96,96,96,255,96,96,96,255,94,94,94,255,94,94,94,
255,93,93,93,255,93,93,93,255,92,92,92,255,91,91,91,255,91,91,91,255,91,91,91,
255,90,90,90,255,88,88,88,255,88,88,88,255,87,87,87,255,75,75,75,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_oyranos_logo(idata_oyranos_logo, 64, 64, 4, 0);

Flmm_Tabs *top_tabs=(Flmm_Tabs *)0;

Fl_Choice *policy_choice=(Fl_Choice *)0;

Fl_Menu_Item menu_policy_choice[] = {
 {_("Office + Home"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Graphic Designers"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("PrePress"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Photographers"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_3reload(Fl_Button*, void*) {
  //Fl::pushed(&bPL);
  updateUI();
}

Fl_Box *policy_box=(Fl_Box *)0;

int main(int argc, char **argv) {
  Fl::scheme("plastic");

  const char *locale_paths[3] = {0,0,0};
  signed int is_path = -1;
  int num_paths = 0;
# if __APPLE__
  std::string bdr;
  // RESOURCESPATH is set in the bundle by "Contents/MacOS/ICC Examin.sh"
  if(getenv("RESOURCESPATH")) {
    bdr = getenv("RESOURCESPATH");
    bdr += "/locale";
    locale_paths[num_paths] = bdr.c_str(); ++num_paths;
  }
  if(!locale_paths[0]) {
    //bdr = icc_examin_ns::holeBundleResource("locale","");
    if(bdr.size())
    {
      locale_paths[num_paths] = bdr.c_str();
      ++num_paths;
    }
  }
  locale_paths[num_paths] = OY_LOCALEDIR; ++num_paths;
  locale_paths[num_paths] = OY_SRC_LOCALEDIR; ++num_paths;
# else
  locale_paths[0] = OY_LOCALEDIR; ++num_paths;
#ifdef WIN32
#define DIR_SEPARATOR_C '\\'
#define DIR_SEPARATOR "\\"
#else
#define DIR_SEPARATOR_C '/'
#define DIR_SEPARATOR "/"
#endif
  //DBG_NUM_V(( argc <<" "<< argv[0] )
  if (argc)
  { const char *reloc_path = {"../share/locale"};
    int len = (strlen(argv[0]) + strlen(reloc_path)) * 2 + 128;
    char *path = (char*) malloc( len ); // small one time leak
    char *text = (char*) malloc( len );
    text[0] = 0;
    // whats the path for the executeable ?
    snprintf (text, len-1, argv[0]);
    if (strrchr(text, DIR_SEPARATOR_C)) {
      char *tmp = strrchr(text, DIR_SEPARATOR_C);
      *tmp = 0;
    } else {
      FILE *pp = NULL;

      if (text) free (text);
      text = (char*) malloc( 1024 );

      // Suche das ausfuehrbare Programm
      // TODO symbolische Verknuepfungen
      snprintf( text, 1024, "which %s", argv[0]);
      pp = popen( text, "r" );
      if (pp) {
        if (fscanf (pp, "%s", text) != 1)
        {
          pclose (pp);
          WARN_S(( "no executeable path found" ));
        }
      } else {
        WARN_S(( "could not ask for executeable path" ));
      }
    }
    snprintf (path, len-1, "%s%s%s",text,DIR_SEPARATOR,reloc_path);
    locale_paths[1] = path; ++num_paths;
    locale_paths[2] = OY_SRC_LOCALEDIR; ++num_paths;
    //DBG_NUM_V( path );
    if (text) free (text);
  } else {
    locale_paths[1] = OY_SRC_LOCALEDIR; ++num_paths;
  }
# endif
  is_path = fl_search_locale_path (num_paths, locale_paths, "de", "oyranos");

  if(is_path >= 0) {
#if defined(_Xutf8_h) || HASE_UTF8
    int set_charset = 0;
#else
    int set_charset = 1;
#endif
    int err = fl_initialise_locale ( "oyranos", locale_paths[is_path],
                                     set_charset );
    if(err) {
      WARN_S(("i18n initialisation failed"));
    }
  }
  { top_group = new Fl_Double_Window(505, 410, _("Oyranos Configuration"));
    { OyFl_Pack* o = new OyFl_Pack(0, 0, 480, 70);
      o->type(1);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { Fl_Box* o = new Fl_Box(0, 0, 85, 70);
        o->image(image_oyranos_logo);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Box* o
      { OyFl_Box* o = new OyFl_Box(95, 0, 385, 70, _("Oyranos Configuration"));
        o->box(FL_NO_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(0);
        o->labelsize(18);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE);
        Fl_Group::current()->resizable(o);
        o->redraw();
      } // OyFl_Box* o
      o->end();
    } // OyFl_Pack* o
    { top_tabs = new Flmm_Tabs(0, 70, 505, 301);
      top_tabs->box(FL_THIN_UP_BOX);
      top_tabs->color(FL_BACKGROUND_COLOR);
      top_tabs->selection_color(FL_LIGHT2);
      top_tabs->labeltype(FL_NORMAL_LABEL);
      top_tabs->labelfont(0);
      top_tabs->labelsize(14);
      top_tabs->labelcolor(FL_FOREGROUND_COLOR);
      top_tabs->align(FL_ALIGN_TOP);
      top_tabs->when(FL_WHEN_RELEASE);
      { Fl_Group* o = new Fl_Group(10, 95, 485, 266, _("Policy"));
        o->tooltip(_("Reset to a standard Policy for Oyranos."));
        { Fl_Pack* o = new Fl_Pack(10, 105, 485, 256);
          { new Fl_Box(30, 180, 25, 25);
          } // Fl_Box* o
          { policy_choice = new Fl_Choice(30, 155, 196, 25);
            policy_choice->box(FL_NO_BOX);
            policy_choice->down_box(FL_BORDER_BOX);
            policy_choice->menu(menu_policy_choice);
          } // Fl_Choice* policy_choice
          { Fl_Box* o = new Fl_Box(40, 190, 25, 25);
            Fl_Group::current()->resizable(o);
          } // Fl_Box* o
          o->end();
        } // Fl_Pack* o
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      top_tabs->end();
      Fl_Group::current()->resizable(top_tabs);
    } // Flmm_Tabs* top_tabs
    { Fl_Button* o = new Fl_Button(10, 375, 50, 25, _("@-3reload"));
      o->tooltip(_("Refresh"));
      o->callback((Fl_Callback*)cb_3reload);
      o->when(FL_WHEN_RELEASE_ALWAYS);
    } // Fl_Button* o
    { Fl_Pack* o = new Fl_Pack(160, 371, 255, 35);
      o->type(1);
      { Fl_Box* o = new Fl_Box(160, 371, 120, 35, _("Active Policy:"));
        o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      } // Fl_Box* o
      { policy_box = new Fl_Box(280, 371, 135, 35, _("----"));
        policy_box->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Box* policy_box
      o->end();
    } // Fl_Pack* o
    top_group->size_range(305, 255);
    top_group->end();
  } // Fl_Double_Window* top_group
  createUI();
  top_group->show(argc, argv);
  return Fl::run();
}

void listWindow( Fl_Widget *w ) {
  Fl_Group *g = dynamic_cast <Fl_Group*> (w);

  static int level = 0;


  if( g )
  {
    int n = g->children();

    std::cout << std::endl;
    for(int i = 0; i < level; ++i) std::cout << " ";

    std::cout << "Group t" << (int)w->type() << " " << w->x()<<"+"<<w->y()<<"+"<<w->w()<<"x"<<w->h() <<
                 " \"" << (w->label()?w->label():"") << "\":";

    ++level;
    for( int i = 0; i < n; ++i )
    {
      listWindow( g->child(i) );
    }
    --level;
    std::cout << std::endl;
  } else
  {
    std::cout << " t" << (int)w->type() << " " << w->x()<<"+"<<w->y()<<"+"<<w->w()<<"x"<<w->h() <<
                 " " << (w->label()?w->label():"- ");
  }
}
