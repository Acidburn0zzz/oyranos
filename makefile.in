
COLLECT = ar cru
RANLIB = ranlib
LNK = ln -s
POST = $(fltkconfig) --post
RPMARCH = `rpmbuild --showrc | awk '/^build arch/ {print $$4}'`
MSGCAT = msgcat
MSGFMT = msgfmt -c --statistics

srcdir		= .
docdir          = $(datadir)/doc/$(TARGET)
cmmdir          = $(libdir)/color/cmms

OY_MODULE_NAME  =_cmm_module
LIBRARIES = $(TARGET) \
	$(TARGET)_moni \
	$(TARGET)_alpha
CMMS = $(TARGET)_lcms$(OY_MODULE_NAME) $(TARGET)_oyX1$(OY_MODULE_NAME)
LIBSONAMEFULL = lib$(TARGET)$(SO).$(VERSION)$(LIBEXT)
LIBSONAME = lib$(TARGET)$(SO).$(VERSION_A)$(LIBEXT)
LIBSO = lib$(TARGET)$(SO)$(LIBEXT)
LIBNAME = lib$(TARGET).a
LIB_MONI_SONAMEFULL = lib$(TARGET)_moni$(SO).$(VERSION)$(LIBEXT)
LIB_MONI_SONAME = lib$(TARGET)_moni$(SO).$(VERSION_A)$(LIBEXT)
LIB_MONI_SO = lib$(TARGET)_moni$(SO)$(LIBEXT)
LIB_MONI_NAME = lib$(TARGET)_moni.a
LIB_ALPHA_SONAMEFULL = lib$(TARGET)_alpha$(SO).$(VERSION)$(LIBEXT)
LIB_ALPHA_NAME = lib$(TARGET)_alpha.a
LIB_CMM_LCMS = lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO).$(VERSION)$(LIBEXT)
LIB_CMM_oyX1 = lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO).$(VERSION)$(LIBEXT)

#ifdef $(X11)
LIB_XNVCTRL = libXNVCtrl
LIB_XNVCTRL_NAME = $(LIB_XNVCTRL).a
#endif
LIBFL_I18N = fl_i18n/libfl_i18n.a


INCL= -I/usr/include -I$(includedir) -I/usr/X11R6/include -I$(srcdir) \
	$(PNG_H) $(ELEKTRA_H) $(X_H) $(OS_INCL)

LDLIBS = $(LDFLAGS) -L$(libdir) -L. \
	$(ELEKTRA_LIBS) -lc $(I18N_LIB)


CHEADERS = \
	$(TARGET).h \
	$(TARGET)_alpha.h \
	$(TARGET)_check.h \
	$(TARGET)_cmm.h \
	$(TARGET)_cmms.h \
	$(TARGET)_config.h \
	$(TARGET)_debug.h \
	$(TARGET)_definitions.h \
	$(TARGET)_elektra.h \
	$(TARGET)_helper.h \
	$(TARGET)_i18n.h \
	$(TARGET)_icc.h \
	$(TARGET)_io.h \
	$(TARGET)_internal.h \
	$(TARGET)_monitor.h \
	$(TARGET)_monitor_internal.h \
	$(TARGET)_sentinel.h \
	$(TARGET)_texts.h \
	$(TARGET)_xml.h \
	icc34.h \
	md5.h \
	lookup3.h
#	fl_$(TARGET).h
CFILES = \
	$(TARGET).c \
	$(TARGET)_check.c \
	$(TARGET)_cmms.c \
	$(TARGET)_elektra.c \
	$(TARGET)_helper.c \
	$(TARGET)_i18n.c \
	$(TARGET)_io.c \
	$(TARGET)_misc.c \
	$(TARGET)_sentinel.c \
	$(TARGET)_texts.c \
	$(TARGET)_xml.c \
	md5.c \
	lookup3.c
CFILESC = \
	$(TARGET)_debug.c
CFILES_ALPHA = \
	$(TARGET)_alpha.c
CFILES_CMM_LCMS = \
	$(TARGET)_cmm_lcms.c
CFILES_CMM_oyX1 = \
	$(TARGET)_cmm_oyX1.c
CFILES_MONI = \
	$(TARGET)_monitor.c
CFILES_MONI_NVIDIA = \
	$(TARGET)_monitor_nvidia.c
CFILES_GAMMA = \
	$(TARGET)_gamma.c
CFILES_POLICY = \
	$(TARGET)_policy.c \

CXXFILES_FLTK = \
	$(TARGET)_config_fltk.cxx
CXXFILES_Flmm = \
	FL/Flmm_Tabs.cxx
TEST_CPP = \
	tests/dl_test.cxx \
	tests/fltk_test.cxx \
	tests/dE2000_test.cpp \
	tests/gettext_test.cxx \
	tests/lib_test.cxx \
	tests/tiff_test.cxx
TEST_H = \
	tests/ciede2000testdata.h
CPPFILES =
CXXFILES =
#	fl_oyranos.cxx
TEST_FILES = $(TEST_CPP) $(TEST_H)

MAN1 = oyranos-config.1 oyranos-config-fltk.1 oyranos-monitor.1 oyranos-policy.1
MAN3 = oyranos.3
DATA = \
	$(TARGET)_logo.png
DOKU =  AUTHORS \
        ChangeLog \
        COPYING \
        README
DOC_TEMPLATES =  Doxyfile \
        doxymentation

LINGUAS_SRC = $(LING:.po=.gmo)
POT_FILE = po/$(TARGET).pot
POT_SCRIPT = oyranos_xml_to_po.sh

SCRIPTS = $(POT_SCRIPT)

FLTK_FILES = \
	oyranos_config_fltk.fl \
	oyranos_config_fltk.h \

Flmm_FILES = \
	FL/Flmm_Tabs.H \
	$(CXXFILES_Flmm) \
	FL/ANNOUNCEMENT \
	FL/CHANGES \
	FL/COPYING \
	FL/CREDITS \
	FL/README

SOURCES = $(CPPFILES) $(CXXFILES) $(CFILES) $(CFILESC) \
		$(CFILES_MONI) $(CFILES_MONI_NVIDIA) $(CFILES_GAMMA) \
		$(CFILES_POLICY) $(CFILES_ALPHA) \
		$(CFILES_CMM_LCMS) $(CFILES_CMM_oyX1) \
		$(CXXFILES_FLTK) test.c test2.cpp
OBJECTS = $(CPPFILES:.cpp=.o) $(CXXFILES:.cxx=.o) $(CFILES:.c=.o) $(CFILESC:.c=.o)
ALPHA_OBJECTS = $(CPPFILES_ALPHA:.cpp=.o) $(CXXFILES_ALPHA:.cxx=.o) $(CFILES_ALPHA:.c=.o)
CMM_LCMS_OBJECTS = $(CFILES_CMM_LCMS:.c=.o)
CMM_oyX1_OBJECTS = $(CFILES_CMM_oyX1:.c=.o)
MONI_OBJECTS = $(CPPFILES_MONI:.cpp=.o) $(CXXFILESMONI:.cxx=.o) $(CFILES_MONI:.c=.o)
Flmm_OBJECTS = $(CXXFILES_Flmm:.cxx=.o)
FLTK_OBJECTS = $(CXXFILES_FLTK:.cxx=.o) $(Flmm_OBJECTS)


INCL_DEP = $(INCL) $(SOURCES)

.PHONY:	doc $(ELEKTRA_VERSION) test2

#TEST2 = test2

STD_PROFILES = base eci

ALL_FILES = \
	$(DATA) \
	$(DOKU) \
	configure \
	configure.sh \
	makefile.in \
	$(TARGET).pc.in \
	$(TARGET)_monitor.pc.in \
	$(TARGET).spec.in \
	$(TARGET)-icc.spec.in \
	$(TARGET)-config.in \
	$(SOURCES) \
	$(CHEADERS) \
	$(SCRIPTS) \
	$(MAN1) $(MAN3) \
	$(DOC_TEMPLATES) \
	$(FLTK_FILES)

# build all what is needed to run the libraries, helpers and the examples
all:	mkdepend $(ELEKTRA_VERSION) \
	$(LIBSONAMEFULL) \
	$(LIB_ALPHA_SONAMEFULL) \
	$(TARGET)-monitor $(X11) $(LIB_CMM_LCMS) $(LIB_CMM_oyX1) \
	$(FLTK_GUI) $(TARGET)-policy \
	$(TEST2) $(LINGUAS_SRC)
	cd standard_profiles; \
	for prof in $(STD_PROFILES); do \
	     test $${prof} && \
	         echo -e "$${prof} profiles will be included" || \
	         echo -e "$${prof} profile directory is not found - ignoring"; \
	done;

$(X11): $(TARGET)-monitor-nvidia

# get time stamp
MTIME   := $(shell date +%y%m%d.%H%M%S)

# this is a test
time:
	echo $(MTIME)

# build all objects and libraries, link the headers to $(TARGET)
$(LIBSONAMEFULL):	$(OBJECTS) $(LIBNAME)
	echo Linking $@ ...
	$(CC) $(LINK_FLAGS_DYNAMIC) $(CFLAGS) $(LINK_NAME) -o $(LIBSONAMEFULL) \
	$(OBJECTS) \
	-L$(libdir) $(LDLIBS)
	$(RM)  $(LIBSONAME)
	$(LNK) $(LIBSONAMEFULL) $(LIBSONAME)
	$(RM)  $(LIBSO)
	$(LNK) $(LIBSONAMEFULL) $(LIBSO)

# the monitor library
$(LIB_MONI_SONAMEFULL):	$(MONI_OBJECTS) $(LIB_MONI_NAME) $(LIBSONAMEFULL)
	echo Linking $@ ...
	$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC) $(LINK_NAME_M) $(LIBSONAMEFULL) \
	-o $(LIB_MONI_SONAMEFULL) \
	$(MONI_OBJECTS) $(X11_LIBS) $(LDLIBS)
	$(RM)  $(LIB_MONI_SONAME)
	$(LNK) $(LIB_MONI_SONAMEFULL) $(LIB_MONI_SONAME)
	$(RM)  $(LIB_MONI_SO)
	$(LNK) $(LIB_MONI_SONAMEFULL) $(LIB_MONI_SO)

$(LIB_ALPHA_SONAMEFULL):	$(OBJECTS) $(LIB_ALPHA_NAME)
	echo Linking $@ ...
	$(CC) $(LINK_FLAGS_DYNAMIC) $(CFLAGS) -o $(LIB_ALPHA_SONAMEFULL) \
	$(ALPHA_OBJECTS) \
	-L$(libdir) $(LDLIBS)

$(LIB_CMM_LCMS): $(CMM_LCMS_OBJECTS)
	echo Linking $@ ...
	$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC) $(LINK_NAME_CMM_LCMS) \
	-o $@ \
	$(CMM_LCMS_OBJECTS) $(LCMS_LIBS) $(LDLIBS)
	$(RM)  $(BUILDDIR)lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oyX1): $(CMM_oyX1_OBJECTS)
	echo Linking $@ ...
	$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC) $(LINK_NAME_CMM_oyX1) \
	-o $@ \
	$(CMM_oyX1_OBJECTS) $(LIB_MONI_SONAMEFULL) $(LDLIBS)
	$(RM)  $(BUILDDIR)lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_XNVCTRL).a:
	echo Building $@ ...
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile)
	test -L $(LIB_XNVCTRL).a || $(LNK) $(LIB_XNVCTRL)/$(LIB_XNVCTRL).a .

# the twinview library
$(TARGET)-monitor-nvidia:	$(TARGET)_monitor_nvidia.c $(LIB_XNVCTRL).a
	echo Linking $@ ...
	-$(CC) $(CFLAGS) $(INCL) $(TARGET)_monitor_nvidia.c -I./$(LIB_XNVCTRL) \
	-o $(TARGET)-monitor-nvidia -L./   $(LDLIBS) $(X11_LIBS) \
	-L./$(LIB_XNVCTRL) -lXNVCtrl $(LIBSONAMEFULL) $(LIB_MONI_SONAMEFULL) \
	$(LINK_LIB_PATH)

$(target)_config_fltk.o:	$(TARGET)_config_fltk.cxx
	$(CXX) -I.. $(CXXFLAGS) $(FLTK_H) -c $<
FL/Flmm_Tabs.o:	FL/Flmm_Tabs.cxx
	echo Compiling FL/Flmm_Tabs.cxx
	$(CXX) -I./FL -I./ -I../ $(CXXFLAGS) $(FLTK_H) -o $@ -c $<

# general configuration tool example
$(TARGET)-config-fltk:	$(FLTK_OBJECTS) $(LIBFL_I18N)
	echo Linking $@ ...
	$(CXX) $(CXXFLAGS) -o $(TARGET)-config-fltk \
	$(FLTK_OBJECTS) \
	$(LIBSONAMEFULL) $(LIB_MONI_SONAMEFULL) $(LINK_LIB_PATH) \
	$(LDLIBS) $(FLTK_LIBS) $(PNG_LIBS) $(I18N_LIB) $(LIBFL_I18N)
	$(REZ)


$(LIBNAME):	$(OBJECTS)
	echo Linking $@ ...
	$(COLLECT) $(LINK_FLAGS_STATIC) $(LIBNAME) \
		$(OBJECTS) \
		`test -f $(ELEKTRA_VERSION)/src/libelektra/libelektra.a && echo $(ELEKTRA_VERSION)/src/libloader/libloader_static_a-kdbLibLoader.o $(ELEKTRA_VERSION)/src/backends/filesys/libelektra_filesys_a-filesys.o $(ELEKTRA_VERSION)/src/libelektra/libelektra_a-kdb.o $(ELEKTRA_VERSION)/src/libelektra/libelektra_a-error.o $(ELEKTRA_VERSION)/src/libelektra/libelektra_a-key.o $(ELEKTRA_VERSION)/src/libelektra/libelektra_a-keyset.o $(ELEKTRA_VERSION)/src/libelektra/libelektra_a-kdbhighlevel.o $(ELEKTRA_VERSION)/src/libelektra/libelektra_a-backendhelpers.o $(ELEKTRA_VERSION)/src/libelektra/libelektra_a-exported_symbols.o`
	$(RANLIB) $(LIBNAME)

$(LIB_ALPHA_NAME):	$(ALPHA_OBJECTS)
	echo Linking $@ ...
	$(COLLECT) $(LINK_FLAGS_STATIC) $(LIB_ALPHA_NAME) $(ALPHA_OBJECTS)
	$(RANLIB) $(LIB_ALPHA_NAME)

$(LIB_MONI_NAME):	$(MONI_OBJECTS)
	echo Linking $@ ...
	$(COLLECT) $(LINK_FLAGS_STATIC) $(LIB_MONI_NAME) $(MONI_OBJECTS)
	$(RANLIB) $(LIB_MONI_NAME)

# the monitor profile tool
$(TARGET)-monitor:	$(LIBSONAMEFULL) $(LIB_MONI_SONAMEFULL) $(TARGET)_gamma.o
	echo Linking $@ ...
	$(CC) $(CFLAGS) -o $(TARGET)-monitor \
	$(TARGET)_gamma.o \
	$(LIBSONAMEFULL) $(LIB_MONI_SONAMEFULL) $(LDLIBS) $(LINK_LIB_PATH)

$(ELEKTRA_VERSION):
	-cd $(ELEKTRA_VERSION) && (test -f Makefile && ( \
	  test -f src/libelektra/libelektra.a || \
	    ($(MAKE); ranlib src/libelektra/libelektra.a; $(MAKE))))

$(TARGET)-policy:	$(LIBSONAMEFULL) $(TARGET)_policy.o
	echo Linking $@ ...
	$(CC) $(CFLAGS) -o $(TARGET)-policy \
	$(TARGET)_policy.o \
	$(LIBSONAMEFULL) $(LDLIBS) $(LINK_LIB_PATH)


test2:	$(LIB_MONI_SONAMEFULL)
	echo Compile $@ ...
	$(CXX) `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -c test2.cpp \
	-o test2.o `oyranos-config --cflags`
	echo Linking dynamic $@ ...
	$(CXX) `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -o test2_dyn \
	test2.o `oyranos-config --ld_x_flags`
	echo Linking static $@ ...
	$(CXX) `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -o test2 \
	test2.o `oyranos-config --ld_x_staticflags`
	

check:	test2
	test2

test:	test.o
	$(CC) $(CFLAGS) -o test \
	test.o \
	$(LIBSONAMEFULL) $(LDLIBS) $(LINK_SRC_PATH)

$(LIBFL_I18N):
	cd fl_i18n/ && $(MAKE) -f $(MAKEFILE_ARCH)

$(LINGUAS_SRC):	$(POT_FILE)
	echo Linguas ... $(@:.gmo=)
	for ling in $(@:.gmo=); do \
	  lingua=`echo $${ling} | sed s%po\/%%g`; \
	  echo "update $${ling}.gmo ..."; \
	  test -f $${ling}.po \
        && ($(MSGFMT) -o $${ling}.gmo $${ling}.po; \
            if [ ! -d $${ling} ]; then \
              mkdir $${ling}; \
            fi; \
            if [ ! -d ./$${ling}/LC_MESSAGES ]; then \
              mkdir $${ling}/LC_MESSAGES; \
            fi; \
            test -L $${ling}/LC_MESSAGES/$(TARGET).mo \
              && $(RM) $${ling}/LC_MESSAGES/$(TARGET).mo \
              || echo $${ling}/LC_MESSAGES/$(TARGET).mo nicht gefunden; \
            ln -s ../../$${lingua}.gmo $$ling/LC_MESSAGES/$(TARGET).mo;) \
        || (echo $${ling}.po is not yet ready ... skipping) \
	done;

$(POT_FILE):
	mkdir -p ./po
	for i in cmms/*.oy_cmm_register.xml; do \
	  ii=`echo $${i} | sed s%cmms\/%%g`; \
	  iii=`echo $${ii} | sed s%.xml%.pot%g`; \
	  ./$(POT_SCRIPT) cmms/$${ii}; \
	  mv cmms/$${iii} po/; \
	done;
	test `which xgettext` && xgettext --force-po $(XGETTEXT_OPTIONS) \
	-d $(TARGET) \
	-o $(POT_FILE) \
	$(SOURCES) $(CHEADERS) || echo -e "\c"
	$(MSGCAT) po/*.pot -o po/oyranos.pot
	for ling in po/*.po; do \
	  lingua=`echo $${ling} | sed 's%po\/%%g ; s%.po%%'`; \
	  test `which $(MSGMERGE)` && \
	         $(MSGMERGE) $(MSGMERG_OPTS) po/$${lingua}.po \
	         $(POT_FILE) || \
	      echo -e "\c"; \
	done;
	echo $(POT_FILE) fertig


doc:
	echo Documentation ...
	test -n 'which doxygen' && doxygen Doxyfile || echo "Will not create Documentation because doxygen is missing"
	echo ... Documentation done

# the copy part for this directory level
install_bin:	all doc
	echo Installing main ...
	-$(MAKE) DESTDIR=$(DESTDIR) uninstall
	mkdir -p $(DESTDIR)$(bindir)
	$(INSTALL) -m 755 $(TARGET)-config     $(DESTDIR)$(bindir)
	-$(INSTALL) -m 755 $(TARGET)-monitor    $(DESTDIR)$(bindir)
	-$(INSTALL) -m 755 $(TARGET)-policy     $(DESTDIR)$(bindir)
	-$(INSTALL) -m 755 $(TARGET)-monitor-nvidia $(DESTDIR)$(bindir)
	-$(INSTALL) -m 755 $(ELEKTRA_VERSION)/src/kdb/kdb_static $(DESTDIR)$(bindir)/$(TARGET)-kdb_static
	mkdir -p $(DESTDIR)$(libdir)
	mkdir -p $(DESTDIR)$(libdir)/pkgconfig
	mkdir -p $(DESTDIR)$(cmmdir)
	$(INSTALL) -m 644 $(TARGET).pc         $(DESTDIR)$(libdir)/pkgconfig/
	for lib in $(LIBRARIES); do \
	   test -f $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		($(INSTALL) -m 755 $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(libdir) \
		); \
	   test -f $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		(test -L $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) && $(RM) $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		test -L $(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT) && ( \
		$(RM) $(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT)) ; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT); \
		); \
	   test -f $(BUILDDIR)lib$${lib}.a && \
		($(INSTALL) -m 644 $(BUILDDIR)lib$${lib}.a $(DESTDIR)$(libdir);\
		$(RANLIB) $(DESTDIR)$(libdir)/lib$${lib}.a \
		) || echo ""; \
	done
	for lib in $(CMMS); do \
	   test -f $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		($(INSTALL) -m 755 $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(cmmdir) \
		); \
	   test -f NOT_$(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		(test -L $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) && $(RM) $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		test -L $(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT) && ( \
		$(RM) $(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT)) ; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT); \
		); \
	   test -f $(BUILDDIR)lib$${lib}.a && \
		($(INSTALL) -m 644 $(BUILDDIR)lib$${lib}.a $(DESTDIR)$(cmmdir);\
		$(RANLIB) $(DESTDIR)$(cmmdir)/lib$${lib}.a \
		) || echo ""; \
	done
	#$(INSTALL) -m 644 $(LIBNAME) $(DESTDIR)$(libdir)
	#$(RANLIB) $(DESTDIR)$(libdir)/$(LIBNAME)
	#$(INSTALL) -m 755 $(LIBSONAMEFULL) $(DESTDIR)$(libdir)
	#$(LNK)  $(LIBSONAMEFULL) $(DESTDIR)$(libdir)/$(LIBSONAME)
	#$(LNK)  $(LIBSONAMEFULL) $(DESTDIR)$(libdir)/$(LIBSO)
	$(INSTALL) -m 644 $(TARGET)_monitor.pc $(DESTDIR)$(libdir)/pkgconfig/
	#$(INSTALL) -m 644 $(LIB_MONI_NAME) $(DESTDIR)$(libdir)
	#$(INSTALL) -m 644 $(LIB_ALPHA_NAME) $(DESTDIR)$(libdir)
	#$(RANLIB) $(DESTDIR)$(libdir)/$(LIB_MONI_NAME)
	#$(RANLIB) $(DESTDIR)$(libdir)/$(LIB_ALPHA_NAME)
	#$(INSTALL) -m 755 $(LIB_MONI_SONAMEFULL) $(DESTDIR)$(libdir)
	#$(LNK)  $(LIB_MONI_SONAMEFULL) $(DESTDIR)$(libdir)/$(LIB_MONI_SONAME)
	#$(LNK)  $(LIB_MONI_SONAMEFULL) $(DESTDIR)$(libdir)/$(LIB_MONI_SO)
	-$(INSTALL) -m 644 $(ELEKTRA_VERSION)/src/libelektra/libelektra.a $(DESTDIR)$(libdir)/lib$(TARGET)_elektra.a
	-$(RANLIB) $(DESTDIR)$(libdir)/lib$(TARGET)_elektra.a
	test -d $(DESTDIR)$(includedir)/$(TARGET) || mkdir -p $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET).h $(DESTDIR)$(includedir)/$(TARGET)
	-$(INSTALL) -m 644 $(TARGET)_alpha.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET)_config.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET)_definitions.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 icc34.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET)_icc.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET)_monitor.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET)_version.h $(DESTDIR)$(includedir)/$(TARGET)
	test "$(FLTK_GUI)" && $(MAKE) DESTDIR=$(DESTDIR) install_gui || echo -e "GUI not installed"
	echo Installing policy settings files ...
	-mkdir -p $(DESTDIR)$(syscolordir)/$(settingsdirname)
	-$(INSTALL) -m 644 settings/*.policy.xml $(DESTDIR)$(syscolordir)/$(settingsdirname)
	echo Installing CMM description files ...
	-mkdir -p $(DESTDIR)$(syscolordir)/cmms
	-$(INSTALL) -m 644 cmms/*.oy_cmm_register.xml $(DESTDIR)$(syscolordir)/cmms
	mkdir -p $(DESTDIR)$(docdir)
	$(INSTALL) -m 644 $(DOKU) $(DESTDIR)$(docdir)
	mkdir -p $(DESTDIR)$(mandir)/man1
	$(INSTALL) -m 644 $(MAN1) $(DESTDIR)$(mandir)/man1
	mkdir -p $(DESTDIR)$(mandir)/man3
	$(INSTALL) -m 644 $(MAN3) $(DESTDIR)$(mandir)/man3
	mkdir -p $(DESTDIR)$(docdir)/html
	-$(INSTALL) -m 644 doc/html/* $(DESTDIR)$(docdir)/html
	$(INSTALL) $(SCRIPTS) $(DESTDIR)$(docdir)
	echo ... main Installation finished

# install recursive
install:	install_bin
	$(MAKE) DESTDIR=$(DESTDIR) install_profiles
	$(MAKE) DESTDIR=$(DESTDIR) install_linguas
#	$(MAKE) install_usersettings

install-main:	install_bin
	$(MAKE) DESTDIR=$(DESTDIR) install_linguas
#	$(MAKE) DESTDIR=$(DESTDIR) install_usersettings

install-icc:
	$(MAKE) DESTDIR=$(DESTDIR) install_profiles

install_gui:	$(TARGET)-config-fltk
	echo Installing UI ...
	mkdir -p $(DESTDIR)$(bindir)
	$(INSTALL) -m 755 $(TARGET)-config-fltk $(DESTDIR)$(bindir)
	$(POST) $(DESTDIR)$(bindir)/$(TARGET)-config-fltk

install_profiles:
	cd standard_profiles; \
	for prof in $(STD_PROFILES); do \
	     test $${prof} && \
	         (cd $${prof}; $(MAKE) DESTDIR=$(DESTDIR) SYSCOLORDIR=$(syscolordir) ICCDIRNAME=$(iccdirname) install) || \
	         echo -e "$${prof} profile directory is not found - ignoring"; \
	done;

install_linguas:
	echo  Linguas ...
	for ling in $(LINGUAS); do \
	  echo "installiere po/$${ling}.gmo ..."; \
	  mkdir -p $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES; \
	  test -f po/$${ling}.gmo \
		&& (mkdir -p $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES; \
            $(INSTALL) -m 644 po/$${ling}.gmo $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo ) \
		|| (echo $${ling}.gmo is not yet ready ... skipping); \
	done;

# it is not used, as the defaults reside inside the library
install_usersettings:
	if [ -z "$(DESTDIR)" ]; then \
	  kdb=kdb; \
	  test `$${kdb}` && kdb_found=1 || kdb_found=0; \
	  if [ $${kdb_found} -gt 0 ]; then \
	    echo "`which kdb` found"; \
	  else \
	    kdb=$(ELEKTRA_VERSION)/src/kdb/kdb_static; \
	    test -f $${kdb} && kdb_found=1 || kdb_found=0; \
	    if [ $${kdb_found} -gt 0 ]; then \
	      echo "using local kdb_static"; \
	    fi; \
	  fi; \
	  $${kdb} set user/sw/oy_install_test "10"; \
	  kdb_r=`$${kdb} get user/sw/oy_install_test`; \
	  if [ -n "$${kdb_r}" ]; then \
	    if [ "$${kdb_r}" != "10" ]; then \
	      kdb_found=0; \
	    fi; \
	  else \
	    kdb_found=0; \
	  fi; $${kdb} rm user/sw/oy_install_test; \
	  if [ $${kdb_found} -eq 0 ]; then \
	    echo "!!!WARNING!!! kdb not useable,"; \
	    echo "              no check for Oyranos configuration possible"; \
	  fi; \
	  if [ $${kdb_found} -gt 0 ]; then \
	    if [ `$${kdb} ls system/sw/oyranos 2>/dev/zero | grep oyranos | wc -l` -eq 0 ]; then \
	      if [ `$${kdb} ls user/sw/oyranos 2>/dev/zero | grep oyranos | wc -l` -eq 0 ]; then \
	        echo "no oyranos keys found: set default policy home+office"; \
	        ./oyranos-policy $(syscolordir)/$(settingsdirname)/office.policy.xml; \
	      fi; \
	    fi; \
	  fi; \
	fi;

# build a source distribution package
dist: targz
	test -d ../Archiv && $(COPY) ../Archiv/$(TARGET)-$(MTIME).tgz $(TARGET)-$(VERSION).tar.gz || $(COPY) $(TARGET)-$(MTIME).tgz $(TARGET)-$(VERSION).tar.gz

# build a binary rpm package
rpm:	dist
	./configure --prefix=/usr --rpm-only # generate the spec file
	mkdir -p rpmdir/BUILD \
	rpmdir/SPECS \
	rpmdir/SOURCES \
	rpmdir/SRPMS \
	rpmdir/RPMS/$(RPMARCH)
	cp -f $(TARGET)-$(VERSION).tar.gz rpmdir/SOURCES
	rpmbuild --clean -ba $(srcdir)/$(TARGET).spec --define "_topdir $$PWD/rpmdir"
	rpmbuild --clean -ba $(srcdir)/$(TARGET)-icc.spec --define "_topdir $$PWD/rpmdir"
	@echo "============================================================"
	@echo "Finished - the packages are in rpmdir/RPMS and rpmdir/SRPMS!"

# remove everything previously installed
uninstall:
	echo Uninstalling ...
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-monitor
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-config
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-config-fltk
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-policy
	-$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-monitor-nvidia
	$(RM)   $(DESTDIR)$(libdir)/pkgconfig/$(TARGET).pc
	$(RM)   $(DESTDIR)$(libdir)/pkgconfig/$(TARGET)_monitor.pc
	for lib in $(LIBRARIES); do \
	    $(RM) $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	          $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	          $(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT) \
	          $(DESTDIR)$(libdir)/lib$${lib}.a; \
	done
	$(RM)   -R $(DESTDIR)$(includedir)/$(TARGET)
	test -d standard_profiles && \
	(  cd standard_profiles; \
	   for prof in $(STD_PROFILES); do \
	     test $${prof} && \
	         (cd $${prof}; $(MAKE)  DESTDIR=$(DESTDIR) SYSCOLORDIR=$(syscolordir) ICCDIRNAME=$(iccdirname) uninstall) || \
	         echo -e "$${prof} profile directory is not found - ignoring"; \
	   done; \
        ) || echo "no profile directory found"
	for i in settings/*.policy.xml; do \
	  ii=`echo $${i} | sed s%settings\/%%g`; \
	  $(RM)   $(DESTDIR)$(syscolordir)/$(settingsdirname)/$${ii}; \
	done;
	for i in cmms/*.oy_cmm_register.xml; do \
	  ii=`echo $${i} | sed s%cmms\/%%g`; \
	  $(RM)   $(DESTDIR)$(syscolordir)/cmms/$${ii}; \
	done;
	for file in $(DOKU); do \
	  $(RM) $(DESTDIR)$(docdir)/$$file; \
	done
	for file in $(SCRIPTS); do \
	  $(RM) $(DESTDIR)$(docdir)/$$file; \
	done
	-$(RM) -R $(DESTDIR)$(docdir)/html
	for file in $(MAN1); do \
	  $(RM) $(DESTDIR)$(mandir)/man1/$$file; \
	done
	for file in $(MAN3); do \
	  $(RM) $(DESTDIR)$(mandir)/man3/$$file; \
	done
	for ling in $(LINGUAS); do \
	  $(RM) $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo; \
	done;
	echo ... $@ done

# remove in this directory
distclean: clean
	-$(RM) Makefile
	-$(RM) fl_i18n/Makefile
	-$(RM) libXNVCtrl/Makefile
	-$(RM) standard_profiles/base/Makefile
	-$(RM) standard_profiles/eci/Makefile
	-$(RM) mkdepend config.h oyranos.pc oyranos_monitor.pc oyranos.spec
	-$(RM) oyranos-icc.spec config.log oyranos_version.h oyranos-config
	-$(RM) config.sh
	(cd fl_i18n/po; $(RM) -R ar de eo fr hy ja ru uk zh_CN)
	-$(RM) -R doc/html
	test -n $(ELEKTRA_VERSION) && (cd $(ELEKTRA_VERSION) && $(MAKE) distclean)

clean:
	-$(RM) \
	$(OBJECTS) $(MONI_OBJECTS) $(FLTK_OBJECTS) \
	$(TARGET)_gamma.o $(TARGET)-policy $(TARGET)_policy.o \
	$(TARGET)-monitor $(TARGET)-monitor-nvidia \
	test2.o test.o test2 test \
	$(TARGET)-config-fltk $(FLTK_OBJECTS); \
	for ling in $(LINGUAS); do \
	  test -f po/$${ling}.gmo \
        && $(RM) po/$${ling}.gmo; \
	done;
	for lib in $(LIBRARIES); do \
	   $(RM) $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         $(BUILDDIR)lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         $(BUILDDIR)lib$${lib}$(SO)$(LIBEXT) \
	         $(BUILDDIR)lib$${lib}.a; \
	done
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile clean)
	cd fl_i18n/ && $(MAKE) -f $(MAKEFILE_ARCH) clean
	test -n $(ELEKTRA_VERSION) && (cd $(ELEKTRA_VERSION) && $(MAKE) clean)
	echo ... $@ done

# configure if the file config is not available
config:
	./configure

# try to resolve dependencies
depend:
	echo "setting up dependencies ..."
	echo "MAKEDEPEND_ISUP = 1" > mkdepend
	echo "#nicht editieren/dont edit - automatisch generiert" >> mkdepend
	-$(MAKEDEPEND) -I./ $(INCL_DEP) >> mkdepend


# Build commands and filename extensions...
.SUFFIXES:	.0 .1 .3 .c .cxx .h .fl .man .o .z


.c.o:
	echo Compiling $< ...
	$(CC) -I. $(CFLAGS) -c $<

.cxx.o:
	echo Compiling $< ...
	$(CXX) -I. $(CXXFLAGS) -c -o $@ $<

.cpp.o:	mkdepend
	echo Compiling $< ...
	$(CXX) -I. $(CXXFLAGS) -c $<

.fl.cxx:
	echo Expanding $< ...
	fluid -c $<

.po:
	echo Generating $@ ...
	msgfmt $<


# smallest package covering the current directory
tgz:
	-test -d Entwickeln && $(RM) -r Entwickeln
	$(MAKE) DESTDIR=Entwickeln copy_files
	tar cf - Entwickeln/ \
	| gzip > $(TARGET)_$(MTIME).tgz
	-test -d ../Archiv && mv -v $(TARGET)_*.tgz ../Archiv
	-test -d Entwickeln && \
	test `pwd` != `(cd Entwickeln; pwd)` && \
	rm -R Entwickeln

# build the source package including the subdirectories
targz:
	test -d $(TARGET)-$(VERSION) && $(RM) -R $(TARGET)-$(VERSION) || echo -e "\c"
	$(MAKE) DESTDIR=$(TARGET)-$(VERSION) copy_files
	cd standard_profiles; \
	for prof in $(STD_PROFILES); do \
	     test $${prof} && \
	         mkdir -p ../$(TARGET)-$(VERSION)/standard_profiles/$${prof}; \
	         (cd $${prof}; echo bin in `pwd`; $(MAKE) DESTDIR=../../$(TARGET)-$(VERSION)/standard_profiles/$${prof} copy_files) || \
	         echo -e "$${prof} profile directory is not found - ignoring"; \
	done;
	tar cf - $(TARGET)-$(VERSION)/ \
	| gzip > $(TARGET)-$(MTIME).tgz
	test -d $(TARGET)-$(VERSION) && \
	test `pwd` != `(cd $(TARGET)-$(VERSION); pwd)` && \
	$(RM) -R $(TARGET)-$(VERSION)
	test -d ../Archiv && mv -v $(TARGET)-*.tgz ../Archiv || echo "no copy"

# basic file set
copy_files:
	mkdir $(DESTDIR)
	cd fl_i18n && \
	 $(MAKE) DESTDIR=../$(DESTDIR)/fl_i18n -f $(MAKEFILE_ARCH) copy_files
	$(COPY) -R \
	$(ALL_FILES) \
	$(DESTDIR)
	$(COPY) -r settings $(DESTDIR)
	$(COPY) -r cmms $(DESTDIR)
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile clean)
	$(COPY) -R $(LIB_XNVCTRL) $(DESTDIR)
	mkdir $(DESTDIR)/tests
	$(COPY) $(TEST_FILES) $(DESTDIR)/tests
	mkdir $(DESTDIR)/FL
	$(COPY) $(Flmm_FILES) $(DESTDIR)/FL
	mkdir $(DESTDIR)/po
	$(COPY) $(POT_FILE) $(DESTDIR)/po
	for ling in $(LINGUAS); do \
	  test -f po/$${ling}.po \
	  && $(COPY) po/$${ling}.po $(DESTDIR)/po/; \
	done;
	test -n $(ELEKTRA_VERSION) && (cd $(ELEKTRA_VERSION) && \
	     $(MAKE) dist-gzip; \
	     cd ../$(DESTDIR); \
	     test -f ../$(ELEKTRA_VERSION)/$(ELEKTRA_VERSION).tar.gz && tar xzf ../$(ELEKTRA_VERSION)/$(ELEKTRA_VERSION).tar.gz; \
	     rm ../$(ELEKTRA_VERSION)/$(ELEKTRA_VERSION).tar.gz)
	echo copy done

# mkdepend
include mkdepend

#ifndef MAKEDEPEND_ISUP
mkdepend: depend
#endif

