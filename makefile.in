
COLLECT = ar cru
RANLIB = ranlib
LNK = ln -s
POST = $(fltkconfig) --post
RPMARCH = `rpmbuild --showrc | awk '/^build arch/ {print $$4}'`
MSGCAT = msgcat
MSGFMT = msgfmt -c --statistics

docdir          = $(datadir)/doc/$(TARGET)
cmmdir          = $(libdir)/color/cmms
SRCDIR          = $(src_dir)

OY_MODULE_NAME  =_cmm_module
LIBRARIES = $(TARGET) \
	$(TARGET)_moni
CMMS = 	$(TARGET)_lcms$(OY_MODULE_NAME) \
	$(TARGET)_oyX1$(OY_MODULE_NAME) \
	$(TARGET)_oyra$(OY_MODULE_NAME)
LIBSONAMEFULL = lib$(TARGET)$(SO).$(VERSION)$(LIBEXT)
LIBSONAME = lib$(TARGET)$(SO).$(VERSION_A)$(LIBEXT)
LIBSO = lib$(TARGET)$(SO)$(LIBEXT)
LIBNAME = lib$(TARGET).a
LIB_MONI_SONAMEFULL = lib$(TARGET)_moni$(SO).$(VERSION)$(LIBEXT)
LIB_MONI_SONAME = lib$(TARGET)_moni$(SO).$(VERSION_A)$(LIBEXT)
LIB_MONI_SO = lib$(TARGET)_moni$(SO)$(LIBEXT)
LIB_MONI_NAME = lib$(TARGET)_moni.a
LIB_CMM_LCMS = lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO).$(VERSION)$(LIBEXT)
LIB_CMM_oyX1 = lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO).$(VERSION)$(LIBEXT)
LIB_CMM_oyra = lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO).$(VERSION)$(LIBEXT)

EXAMPLE1 = examples/image2pdf
EXAMPLES = \
	$(EXAMPLE1)

#ifdef $(X11)
LIB_XNVCTRL = libXNVCtrl
LIB_XNVCTRL_NAME = $(LIB_XNVCTRL).a
#endif
LIBFL_I18N = fl_i18n/libfl_i18n.a


INCL= -I/usr/include -I$(includedir) -I/usr/X11R6/include -I$(SRCDIR) \
	$(LCMS_H) $(PNG_H) $(ELEKTRA_H) $(X_H) $(OS_INCL) $(LIBXML2_H)

LDLIBS = $(LDFLAGS) -L$(libdir) -L. \
	$(ELEKTRA_LIBS) $(LIBXML2_LIBS) -lc $(I18N_LIB)

MODULE_LDLIBS =	$(lc)


CHEADERS = \
	$(SRCDIR)/$(TARGET).h \
	$(SRCDIR)/$(TARGET)_alpha.h \
	$(SRCDIR)/$(TARGET)_check.h \
	$(SRCDIR)/$(TARGET)_cmm.h \
	$(SRCDIR)/$(TARGET)_cmm_oyra.h \
	$(SRCDIR)/$(TARGET)_cmms.h \
	$(SRCDIR)/$(TARGET)_config.h \
	$(SRCDIR)/$(TARGET)_debug.h \
	$(SRCDIR)/$(TARGET)_definitions.h \
	$(SRCDIR)/$(TARGET)_elektra.h \
	$(SRCDIR)/$(TARGET)_helper.h \
	$(SRCDIR)/$(TARGET)_i18n.h \
	$(SRCDIR)/$(TARGET)_icc.h \
	$(SRCDIR)/$(TARGET)_io.h \
	$(SRCDIR)/$(TARGET)_internal.h \
	$(SRCDIR)/$(TARGET)_monitor.h \
	$(SRCDIR)/$(TARGET)_monitor_internal.h \
	$(SRCDIR)/$(TARGET)_sentinel.h \
	$(SRCDIR)/$(TARGET)_texts.h \
	$(SRCDIR)/$(TARGET)_xml.h \
	$(SRCDIR)/icc34.h \
	$(SRCDIR)/md5.h \
	$(SRCDIR)/lookup3.h
#	fl_$(TARGET).h
CFILES = \
	$(SRCDIR)/$(TARGET).c \
	$(SRCDIR)/$(TARGET)_check.c \
	$(SRCDIR)/$(TARGET)_cmms.c \
	$(SRCDIR)/$(TARGET)_elektra.c \
	$(SRCDIR)/$(TARGET)_helper.c \
	$(SRCDIR)/$(TARGET)_i18n.c \
	$(SRCDIR)/$(TARGET)_icc.c \
	$(SRCDIR)/$(TARGET)_io.c \
	$(SRCDIR)/$(TARGET)_misc.c \
	$(SRCDIR)/$(TARGET)_sentinel.c \
	$(SRCDIR)/$(TARGET)_texts.c \
	$(SRCDIR)/$(TARGET)_widgets.c \
	$(SRCDIR)/$(TARGET)_xml.c \
	$(SRCDIR)/md5.c \
	$(SRCDIR)/lookup3.c
CFILESC = \
	$(SRCDIR)/$(TARGET)_debug.c
CFILES_ALPHA = \
	$(SRCDIR)/$(TARGET)_alpha.c
CFILES_CMM_LCMS = \
	$(SRCDIR)/$(TARGET)_cmm_lcms.c
CFILES_CMM_oyX1 = \
	$(SRCDIR)/$(TARGET)_cmm_oyX1.c
CFILES_CMM_oyra = \
	$(SRCDIR)/$(TARGET)_cmm_oyra.c \
	$(SRCDIR)/$(TARGET)_cmm_oyra_icc.c \
	$(SRCDIR)/$(TARGET)_cmm_oyra_image.c \
	$(SRCDIR)/$(TARGET)_cmm_oyra_profile.c
CFILES_MONI = \
	$(SRCDIR)/$(TARGET)_monitor.c
CFILES_MONI_NVIDIA = \
	$(SRCDIR)/$(TARGET)_monitor_nvidia.c
CFILES_GAMMA = \
	$(SRCDIR)/$(TARGET)_gamma.c
CFILES_POLICY = \
	$(SRCDIR)/$(TARGET)_policy.c \

CXXFILES_FLTK = \
	$(SRCDIR)/$(TARGET)_config_fltk.cxx
CXXFILES_Flmm = \
	$(SRCDIR)/FL/Flmm_Tabs.cxx
EXAMPLE1_C = \
	$(SRCDIR)/$(EXAMPLE1).c
EXAMPLES_C = \
	$(EXAMPLE1_C)
EXAMPLES_OBJECTS = $(EXAMPLES_C:.c=.o)

TEST_CPP = \
	$(SRCDIR)/tests/dl_test.cxx \
	$(SRCDIR)/tests/fltk_test.cxx \
	$(SRCDIR)/tests/dE2000_test.cpp \
	$(SRCDIR)/tests/gettext_test.cxx \
	$(SRCDIR)/tests/intptr_test.c \
	$(SRCDIR)/tests/lib_test.cxx \
	$(SRCDIR)/tests/library.c \
	$(SRCDIR)/tests/test_oyranos.c \
	$(SRCDIR)/tests/tiff_test.cxx
TEST_H = \
	$(SRCDIR)/tests/ciede2000testdata.h
CPPFILES =
CXXFILES =
#	fl_oyranos.cxx
TEST_FILES = $(TEST_CPP) $(TEST_H)
EXAMPLE_FILES = $(EXAMPLES_C)

MAN1 = oyranos-config.1 oyranos-config-fltk.1 oyranos-monitor.1 oyranos-policy.1
MAN3 = oyranos.3
DATA = \
	$(SRCDIR)/$(TARGET)_logo.png
DOKU =  $(SRCDIR)/AUTHORS \
        $(SRCDIR)/ChangeLog \
        $(SRCDIR)/COPYING \
        $(SRCDIR)/README
DOC_TEMPLATES = \
	$(SRCDIR)/Doxyfile \
	$(SRCDIR)/doxymentation

LINGUAS_SRC = $(LING:.po=.gmo)
POT_FILE = $(SRCDIR)/po/$(TARGET).pot
POT_SCRIPT = $(SRCDIR)/oyranos_xml_to_po.sh

SCRIPTS = $(POT_SCRIPT)

FLTK_GUI = $(BUILDDIR)$(TARGET)-config-fltk

FLTK_FILES = \
	$(SRCDIR)/oyranos_config_fltk.fl \
	$(SRCDIR)/oyranos_config_fltk.h \

Flmm_FILES = \
	$(SRCDIR)/FL/Flmm_Tabs.H \
	$(CXXFILES_Flmm) \
	$(SRCDIR)/FL/AUTHORS \
	$(SRCDIR)/FL/ANNOUNCEMENT \
	$(SRCDIR)/FL/CHANGES \
	$(SRCDIR)/FL/COPYING \
	$(SRCDIR)/FL/CREDITS \
	$(SRCDIR)/FL/README


SOURCES = $(CPPFILES) $(CXXFILES) $(CFILES) $(CFILESC) \
		$(CFILES_MONI) $(CFILES_MONI_NVIDIA) $(CFILES_GAMMA) \
		$(CFILES_POLICY) $(CFILES_ALPHA) \
		$(CFILES_CMM_LCMS) $(CFILES_CMM_oyX1) $(CFILES_CMM_oyra) \
		$(CXXFILES_FLTK) test.c test2.cpp
OBJECTS = $(CPPFILES:.cpp=.o) $(CXXFILES:.cxx=.o) $(CFILES:.c=.o) $(CFILESC:.c=.o) $(CFILES_ALPHA:.c=.o)
CMM_LCMS_OBJECTS = $(CFILES_CMM_LCMS:.c=.o)
CMM_oyX1_OBJECTS = $(CFILES_CMM_oyX1:.c=.o)
CMM_oyra_OBJECTS = $(CFILES_CMM_oyra:.c=.o)
MONI_OBJECTS = $(CPPFILES_MONI:.cpp=.o) $(CXXFILESMONI:.cxx=.o) $(CFILES_MONI:.c=.o)
Flmm_OBJECTS = $(CXXFILES_Flmm:.cxx=.o)
FLTK_OBJECTS = $(CXXFILES_FLTK:.cxx=.o) $(Flmm_OBJECTS)

CLEAN_OBJECTS = $(OBJECTS) \
	$(MONI_OBJECTS) \
	$(CMM_LCMS_OBJECTS) \
	$(CMM_oyX1_OBJECTS) \
	$(CMM_oyra_OBJECTS) \
	$(EXAMPLES_OBJECTS) \
	$(FLTK_OBJECTS) \
	$(Flmm_OBJECTS) \
	$(TARGET)_gamma.o \
	$(TARGET)_policy.o \
	test2.o tests/test_oyranos.o test.o


INCL_DEP = $(INCL) $(SOURCES)

.PHONY:	docu test2

#TEST2 = test2

DEFAULT_PROFILES = base printing

CONFIG_FILES = \
	configure \
	configure.sh \
	makefile.in \
	$(TARGET).pc.in \
	$(TARGET).spec.in \
	$(TARGET)-icc.spec.in \
	$(TARGET)-config.in

ALL_FILES = \
	$(CONFIG_FILES) \
	$(DATA) \
	$(DOKU) \
	$(SOURCES) \
	$(CHEADERS) \
	$(SCRIPTS) \
	$(MAN1) $(MAN3) \
	$(DOC_TEMPLATES) \
	$(FLTK_FILES)


# build all what is needed to run the libraries, helpers and the examples
all:	setup config.log.h mkdepend \
	$(BUILDDIR)$(LIBSONAMEFULL) \
	$(BUILDDIR)$(TARGET)-monitor $(X11) $(BUILDDIR)$(LIB_CMM_LCMS) \
	$(BUILDDIR)$(LIB_CMM_oyX1) $(BUILDDIR)$(LIB_CMM_oyra) \
	$(BUILDDIR)$(TARGET)-policy $(FLTK_GUI) \
	$(BUILDDIR)$(TEST2) $(BUILDDIR)$(EXAMPLES) $(LINGUAS_SRC)
	test -d default_profiles && \
	( cd default_profiles; \
	for prof in $(DEFAULT_PROFILES); do \
	     test -d $${prof} && \
	         echo "$${prof} profiles will be included" || \
	         echo "$${prof} profile directory is not found - ignoring"; \
	done; ) || echo "default_profiles directory is not found - ignoring"
	echo ... $@ done

$(X11): $(TARGET)-monitor-nvidia

# get time stamp
MTIME   := $(shell date +%y%m%d.%H%M%S)

# this is a test
time:
	echo $(MTIME)

setup:
	test -d $(BUILDDIR). && echo "" || (echo output to $(BUILDDIR); mkdir -p $(BUILDDIR))

# build all objects and libraries, link the headers to $(TARGET)
$(BUILDDIR)$(LIBSONAMEFULL):	$(OBJECTS) $(BUILDDIR)$(LIBNAME)
	echo Linking $@ ...
	$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$@ \
	-o $(BUILDDIR)$(LIBSONAMEFULL) \
	$(OBJECTS) \
	-L$(libdir) $(LDLIBS) $(m)
	$(RM)  $(BUILDDIR)$(LIBSONAME)
	$(LNK) $(LIBSONAMEFULL) $(BUILDDIR)$(LIBSONAME)
	$(RM)  $(BUILDDIR)$(LIBSO)
	$(LNK) $(LIBSONAMEFULL) $(BUILDDIR)$(LIBSO)

# the monitor library
$(BUILDDIR)$(LIB_MONI_SONAMEFULL):	$(MONI_OBJECTS) $(BUILDDIR)$(LIB_MONI_NAME) $(BUILDDIR)$(LIBSONAMEFULL)
	echo Linking $@ ...
	$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$@ \
	$(BUILDDIR)$(LIBSONAMEFULL) -o $(BUILDDIR)$(LIB_MONI_SONAMEFULL) \
	$(MONI_OBJECTS) $(X11_LIBS) $(LDLIBS)
	$(RM)  $(BUILDDIR)$(LIB_MONI_SONAME)
	$(LNK) $(LIB_MONI_SONAMEFULL) $(BUILDDIR)$(LIB_MONI_SONAME)
	$(RM)  $(BUILDDIR)$(LIB_MONI_SO)
	$(LNK) $(LIB_MONI_SONAMEFULL) $(BUILDDIR)$(LIB_MONI_SO)

$(BUILDDIR)$(LIB_CMM_LCMS): $(CMM_LCMS_OBJECTS)
	echo Linking $@ ...
	$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$@ \
	-o $(BUILDDIR)$@ \
	$(CMM_LCMS_OBJECTS) $(LCMS_LIBS) $(MODULE_LDLIBS)
	$(RM)  $(BUILDDIR)lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ $(BUILDDIR)lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  $(BUILDDIR)lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ $(BUILDDIR)lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(BUILDDIR)$(LIB_CMM_oyX1): $(CMM_oyX1_OBJECTS) $(BUILDDIR)$(LIB_MONI_SONAMEFULL)
	echo Linking $@ ...
	$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$@ \
	-o $(BUILDDIR)$@ \
	$(CMM_oyX1_OBJECTS) $(BUILDDIR)$(LIB_MONI_SONAMEFULL)
	$(RM)  $(BUILDDIR)lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ $(BUILDDIR)lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  $(BUILDDIR)lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ $(BUILDDIR)lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(BUILDDIR)$(LIB_CMM_oyra): $(CMM_oyra_OBJECTS)
	echo Linking $@ ...
	$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$@ \
	-o $(BUILDDIR)$@ \
	$(CMM_oyra_OBJECTS) $(BUILDDIR)$(LIBSONAMEFULL)
	$(RM)  $(BUILDDIR)lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ $(BUILDDIR)lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  $(BUILDDIR)lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ $(BUILDDIR)lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_XNVCTRL).a:
	echo Building $@ ...
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile)
	test -L $(BUILDDIR)$(LIB_XNVCTRL).a || $(LNK) $(LIB_XNVCTRL)/$(LIB_XNVCTRL).a $(BUILDDIR).

# the twinview library
$(BUILDDIR)$(TARGET)-monitor-nvidia:	$(TARGET)_monitor_nvidia.c $(BUILDDIR)$(LIB_XNVCTRL).a $(BUILDDIR)$(LIB_MONI_SONAMEFULL)
	echo Linking $@ ...
	-$(CC) $(CFLAGS) $(INCL) $(TARGET)_monitor_nvidia.c -I./$(LIB_XNVCTRL) \
	-o $(BUILDDIR)$(TARGET)-monitor-nvidia -L./   $(LDLIBS) $(X11_LIBS) \
	-L./$(LIB_XNVCTRL) -lXNVCtrl $(BUILDDIR)$(LIBSONAMEFULL) $(BUILDDIR)$(LIB_MONI_SONAMEFULL) \
	$(LINK_LIB_PATH)

$(target)_config_fltk.o:	$(TARGET)_config_fltk.cxx
	$(CXX) -I.. $(CXXFLAGS) $(FLTK_H) -c $<
FL/Flmm_Tabs.o:	FL/Flmm_Tabs.cxx
	echo Compiling FL/Flmm_Tabs.cxx
	$(CXX) -I./FL -I./ -I../ $(CXXFLAGS) $(FLTK_H) -o $(BUILDDIR)$@ -c $<

# general configuration tool example
$(TARGET)-config-fltk:	$(FLTK_OBJECTS) $(LIBFL_I18N)
	echo Linking $@ ...
	$(CXX) $(CXXFLAGS) -o $(BUILDDIR)$(TARGET)-config-fltk \
	$(FLTK_OBJECTS) \
	$(BUILDDIR)$(LIBSONAMEFULL) $(LINK_LIB_PATH) \
	$(LDLIBS) $(FLTK_LIBS) $(PNG_LIBS) $(I18N_LIB) $(LIBFL_I18N)
	$(REZ)


$(BUILDDIR)$(LIBNAME):	$(OBJECTS)
	echo Linking $@ ...
	test -f $(BUILDDIR)$(LIBNAME) && $(RM) $(BUILDDIR)$(LIBNAME) || echo ""
	$(COLLECT) $(LINK_FLAGS_STATIC) $(BUILDDIR)$(LIBNAME) \
		$(OBJECTS)
	$(RANLIB) $(BUILDDIR)$(LIBNAME)

$(BUILDDIR)$(LIB_MONI_NAME):	$(MONI_OBJECTS)
	echo Linking $@ ...
	test -f $(BUILDDIR)$(LIB_MONI_NAME) && $(RM) $(BUILDDIR)$(LIB_MONI_NAME) || echo ""
	$(COLLECT) $(LINK_FLAGS_STATIC) $(BUILDDIR)$(LIB_MONI_NAME) $(MONI_OBJECTS)
	$(RANLIB) $(BUILDDIR)$(LIB_MONI_NAME)

# the monitor profile tool
$(BUILDDIR)$(TARGET)-monitor:	$(BUILDDIR)$(LIBSONAMEFULL) $(BUILDDIR)$(TARGET)_gamma.o
	echo Linking $@ ...
	$(CC) $(CFLAGS) -o $(BUILDDIR)$(TARGET)-monitor \
	$(BUILDDIR)$(TARGET)_gamma.o \
	$(BUILDDIR)$(LIBSONAMEFULL) $(LDLIBS) $(LINK_LIB_PATH)

$(BUILDDIR)$(TARGET)-policy:	$(BUILDDIR)$(LIBSONAMEFULL) $(BUILDDIR)$(TARGET)_policy.o
	echo Linking $@ ...
	$(CC) $(CFLAGS) -o $(BUILDDIR)$(TARGET)-policy \
	$(BUILDDIR)$(TARGET)_policy.o \
	$(BUILDDIR)$(LIBSONAMEFULL) $(LDLIBS) $(LINK_LIB_PATH)


$(BUILDDIR)test2:	$(BUILDDIR)$(LIBSONAMEFULL)
	echo Compile $@ ...
	$(CXX) `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -c test2.cpp \
	-o $(BUILDDIR)test2.o `./oyranos-config --cflags`
	echo Linking dynamic $@ ...
	$(CXX) `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -o $(BUILDDIR)test2_dyn \
	$(BUILDDIR)test2.o `./oyranos-config --ldflags`
	echo Linking static $@ ...
	$(CXX) `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -o $(BUILDDIR)test2 \
	$(BUILDDIR)test2.o `./oyranos-config --ldstaticflags`
	

check:	all install_bin install-icc $(BUILDDIR)tests/test_oyranos
	echo current git version is:
	n=0; for i in `git rev-list master`; do if [ $${n} -eq 0 ]; then echo git id:$${i}; fi; n=1; done
	echo run tests/test_oyranos
	LD_LIBRARY_PATH=./:$(libdir):$${LD_LIBRARY_PATH} $(BUILDDIR)tests/test_oyranos

$(BUILDDIR)test:	$(BUILDDIR)test.o
	$(CC) $(CFLAGS) -o $(BUILDDIR)test \
	$(BUILDDIR)test.o \
	$(BUILDDIR)$(LIBSONAMEFULL) $(LDLIBS) $(LINK_SRC_PATH)

$(BUILDDIR)tests/test_oyranos:	$(BUILDDIR)tests/test_oyranos.o
	echo Linking tests/test_oyranos
	$(CC) $(CFLAGS) -o $(BUILDDIR)tests/test_oyranos \
        $(BUILDDIR)tests/test_oyranos.o \
        $(BUILDDIR)$(LIBSONAMEFULL) $(LDLIBS) $(LINK_SRC_PATH)

$(BUILDDIR)tests/test_oyranos.o:	tests/test_oyranos.c oyranos_version.h
	echo Compiling tests/test_oyranos.c
	$(CC) -I./ -I../ $(CFLAGS) -o $(BUILDDIR)$@ -c $<

$(BUILDDIR)$(EXAMPLE1): $(EXAMPLE1_C)
	echo Compile $@ ...
	-$(CC) `echo $(CFLAGS) | sed s/-0.//g` -g -Wall -c $(EXAMPLE1_C) \
	-o $(BUILDDIR)$(EXAMPLE1).o \
	`./oyranos-config --cflags` `pkg-config --cflags cairo` \
	`pkg-config --cflags lcms` -I.
	echo Linking $@ ...
	-$(CC) `echo $(CFLAGS) | sed s/-0.//g` -g -Wall \
	-o $(BUILDDIR)$(EXAMPLE1) \
	$(BUILDDIR)$(EXAMPLE1).o `./oyranos-config --ldflags` \
	`pkg-config --libs cairo` `pkg-config --libs lcms` -L. \
	$(LINK_SRC_PATH)

$(LIBFL_I18N):	fl_i18n/Makefile
	cd fl_i18n/ && $(MAKE) -f $(MAKEFILE_ARCH)

$(LINGUAS_SRC):	$(POT_FILE)
	echo Linguas ... $(@:.gmo=)
	for ling in $(@:.gmo=); do \
	  lingua=`echo $${ling} | sed s%po\/%%g`; \
	  echo "update $${ling}.gmo ..."; \
	  test -f $${ling}.po \
        && ($(MSGFMT) -o $${ling}.gmo $${ling}.po; \
            if [ ! -d $${ling} ]; then \
              mkdir $${ling}; \
            fi; \
            if [ ! -d ./$${ling}/LC_MESSAGES ]; then \
              mkdir $${ling}/LC_MESSAGES; \
            fi; \
            test -L $${ling}/LC_MESSAGES/$(TARGET).mo \
              && $(RM) $${ling}/LC_MESSAGES/$(TARGET).mo \
              || echo $${ling}/LC_MESSAGES/$(TARGET).mo nicht gefunden; \
            ln -s ../../$${lingua}.gmo $$ling/LC_MESSAGES/$(TARGET).mo;) \
        || (echo $${ling}.po is not yet ready ... skipping) \
	done;

$(POT_FILE):
	mkdir -p ./po
	test `which xgettext` && xgettext --force-po $(XGETTEXT_OPTIONS) \
	-d $(TARGET) \
	-o $(POT_FILE) \
	$(SOURCES) $(CHEADERS) || echo -e "\c"
	$(MSGCAT) po/*.pot -o po/oyranos.pot
	for ling in po/*.po; do \
	  lingua=`echo $${ling} | sed 's%po\/%%g ; s%.po%%'`; \
	  test `which $(MSGMERGE)` && \
	         $(MSGMERGE) $(MSGMERG_OPTS) po/$${lingua}.po \
	         $(POT_FILE) || \
	      echo -e "\c"; \
	done;
	echo $(POT_FILE) fertig


docu:
	echo Documentation ...
	test -n 'which doxygen' && doxygen Doxyfile || echo "Will not create Documentation because doxygen is missing"
	echo ... Documentation done

# the copy part for this directory level
install_bin:	all uninstall_bin install_gui
	echo Installing binaries ...
	mkdir -p $(DESTDIR)$(bindir)
	$(INSTALL) -m 755 $(BUILDDIR)$(TARGET)-config     $(DESTDIR)$(bindir)
	-$(INSTALL) -m 755 $(BUILDDIR)$(TARGET)-monitor    $(DESTDIR)$(bindir)
	-$(INSTALL) -m 755 $(BUILDDIR)$(TARGET)-policy     $(DESTDIR)$(bindir)
	-$(INSTALL) -m 755 $(BUILDDIR)$(TARGET)-monitor-nvidia $(DESTDIR)$(bindir)
	mkdir -p $(DESTDIR)$(libdir)
	mkdir -p $(DESTDIR)$(libdir)/pkgconfig
	mkdir -p $(DESTDIR)$(cmmdir)
	$(INSTALL) -m 644 $(TARGET).pc $(DESTDIR)$(libdir)/pkgconfig/
	for lib in $(LIBRARIES); do \
	   test -f $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		($(INSTALL) -m 755 $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(libdir) \
		); \
	   test -f $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		(test -L $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) && $(RM) $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		test -L $(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT) && ( \
		$(RM) $(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT)) ; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT); \
		); \
	   if [ "$(STATIC)" = "" ]; then test -f $(BUILDDIR)lib$${lib}.a && \
		($(INSTALL) -m 644 $(BUILDDIR)lib$${lib}.a $(DESTDIR)$(libdir);\
		$(RANLIB) $(DESTDIR)$(libdir)/lib$${lib}.a \
		) || echo ""; \
           fi; \
	done
	for lib in $(CMMS); do \
	   test -f $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		($(INSTALL) -m 755 $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(cmmdir) \
		); \
	   test -f NOT_$(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		(test -L $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) && $(RM) $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		test -L $(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT) && ( \
		$(RM) $(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT)) ; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT); \
		); \
	   test -f $(BUILDDIR)lib$${lib}.a && \
		($(INSTALL) -m 644 $(BUILDDIR)lib$${lib}.a $(DESTDIR)$(cmmdir);\
		$(RANLIB) $(DESTDIR)$(cmmdir)/lib$${lib}.a \
		) || echo ""; \
	done
	test -d $(DESTDIR)$(includedir)/$(TARGET) || mkdir -p $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET).h $(DESTDIR)$(includedir)/$(TARGET)
	-$(INSTALL) -m 644 $(TARGET)_alpha.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET)_config.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET)_definitions.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 icc34.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET)_icc.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET)_version.h $(DESTDIR)$(includedir)/$(TARGET)
	echo ... binary Installation finished

# install recursive
install:	uninstall install-main install-icc
	echo ... $@ done

install-main:	install_bin install_linguas install_docu

install-icc:	install_profiles

# synonymes
doc:		docu
install_doc:	install_docu

install_docu: docu
	echo Installing policy settings files ...
	-mkdir -p $(DESTDIR)$(syscolordir)/$(settingsdirname)
	-$(INSTALL) -m 644 settings/*.policy.xml $(DESTDIR)$(syscolordir)/$(settingsdirname)
	mkdir -p $(DESTDIR)$(docdir)
	$(INSTALL) -m 644 $(DOKU) $(DESTDIR)$(docdir)
	mkdir -p $(DESTDIR)$(mandir)/man1
	$(INSTALL) -m 644 $(MAN1) $(DESTDIR)$(mandir)/man1
	mkdir -p $(DESTDIR)$(mandir)/man3
	$(INSTALL) -m 644 $(MAN3) $(DESTDIR)$(mandir)/man3
	mkdir -p $(DESTDIR)$(docdir)/html
	-$(INSTALL) -m 644 doc/html/* $(DESTDIR)$(docdir)/html
	$(INSTALL) $(SCRIPTS) $(DESTDIR)$(docdir)
	

install_gui:	$(TARGET)-config-fltk
	echo Installing UI ...
	mkdir -p $(DESTDIR)$(bindir)
	$(INSTALL) -m 755 $(BUILDDIR)$(TARGET)-config-fltk $(DESTDIR)$(bindir)
	$(POST) $(DESTDIR)$(bindir)/$(TARGET)-config-fltk

install_profiles:
	test -d default_profiles && \
	( cd default_profiles; \
	for prof in $(DEFAULT_PROFILES); do \
	     test -d $${prof} && \
	         (cd $${prof}; $(MAKE) DESTDIR="$(DESTDIR)" SYSCOLORDIR=$(syscolordir) ICCDIRNAME=$(iccdirname) install) || \
	         echo "$${prof} profile directory is not found - ignoring"; \
	done; ) || echo "default_profiles directory is not found - ignoring"

install_linguas:
	echo  Linguas ...
	for ling in $(LINGUAS); do \
	  echo "Installing po/$${ling}.gmo ..."; \
	  mkdir -p $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES; \
	  test -f po/$${ling}.gmo \
		&& (mkdir -p $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES; \
            $(INSTALL) -m 644 po/$${ling}.gmo $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo ) \
		|| (echo $${ling}.gmo is not yet ready ... skipping); \
	done;

# build a source distribution package
dist: targz
	test -d ../Archiv && mv -v ../Archiv/$(TARGET)-$(MTIME).tgz $(TARGET)-$(VERSION).tar.gz || mv -v $(TARGET)-$(MTIME).tgz $(TARGET)-$(VERSION).tar.gz

dist-gzip:	dist

# build a binary rpm package
rpm:	dist
	./configure --prefix=/usr --rpm-only # generate the spec file
	mkdir -p rpmdir/BUILD \
	rpmdir/SPECS \
	rpmdir/SOURCES \
	rpmdir/SRPMS \
	rpmdir/RPMS/$(RPMARCH)
	cp -f $(TARGET)-$(VERSION).tar.gz rpmdir/SOURCES
	rpmbuild --clean -ba $(srcdir)/$(TARGET).spec --define "_topdir $$PWD/rpmdir"
	rpmbuild --clean -ba $(srcdir)/$(TARGET)-icc.spec --define "_topdir $$PWD/rpmdir"
	@echo "============================================================"
	@echo "Finished - the packages are in rpmdir/RPMS and rpmdir/SRPMS!"

# remove everything previously installed
uninstall:	uninstall_bin uninstall_docu uninstall_profiles uninstall_linguas
	echo ... $@ done

uninstall_bin:
	echo Uninstalling binaries ...
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-monitor
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-config
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-config-fltk
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-policy
	-$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-monitor-nvidia
	$(RM)   $(DESTDIR)$(libdir)/pkgconfig/$(TARGET).pc
	for lib in $(LIBRARIES); do \
	    $(RM) $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	          $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	          $(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT) \
	          $(DESTDIR)$(libdir)/lib$${lib}.a; \
	done
	for lib in $(CMMS); do \
	   $(RM) $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         $(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT) \
	         $(DESTDIR)$(cmmdir)/lib$${lib}.a; \
	done
	$(RM)   -R $(DESTDIR)$(includedir)/$(TARGET)
	echo ... done uninstalling binaries
	
uninstall_profiles:
	echo Uninstalling profiles ...
	test -d default_profiles && \
	(  cd default_profiles; \
	   for prof in $(DEFAULT_PROFILES); do \
	     test -d $${prof} && \
	         (cd $${prof}; $(MAKE)  DESTDIR="$(DESTDIR)" SYSCOLORDIR=$(syscolordir) ICCDIRNAME=$(iccdirname) uninstall) || \
	         echo "$${prof} profile directory is not found - ignoring"; \
	   done; \
        ) || echo "no profile directory found"
	echo ... done uninstalling profiles

uninstall-icc:	uninstall_profiles


uninstall_linguas:
	echo Uninstalling linguas ...
	for ling in $(LINGUAS); do \
	  $(RM) $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo; \
	done;
	echo ... done uninstalling linguas

uninstall_docu:
	echo Uninstalling docu ...
	for i in settings/*.policy.xml; do \
	  ii=`echo $${i} | sed s%settings\/%%g`; \
	  $(RM)   $(DESTDIR)$(syscolordir)/$(settingsdirname)/$${ii}; \
	done;
	for file in $(DOKU); do \
	  $(RM) $(DESTDIR)$(docdir)/$$file; \
	done
	for file in $(SCRIPTS); do \
	  $(RM) $(DESTDIR)$(docdir)/$$file; \
	done
	-$(RM) -R $(DESTDIR)$(docdir)/html
	for file in $(MAN1); do \
	  $(RM) $(DESTDIR)$(mandir)/man1/$$file; \
	done
	for file in $(MAN3); do \
	  $(RM) $(DESTDIR)$(mandir)/man3/$$file; \
	done
	echo ... done uninstalling docu


# remove in this directory
distclean: clean
	-$(RM) Makefile
	-$(RM) fl_i18n/Makefile
	-$(RM) libXNVCtrl/Makefile
	-$(RM) default_profiles/base/Makefile
	-$(RM) default_profiles/printing/Makefile
	-$(RM) mkdepend config.h oyranos.pc oyranos.spec
	-$(RM) oyranos-icc.spec config.log oyranos_version.h oyranos-config
	-$(RM) config.sh
	(cd fl_i18n/po; $(RM) -R ar de eo fr hy ja ru uk zh_CN)
	-$(RM) -R doc/html

clean:
	-$(RM) \
	$(CLEAN_OBJECTS) \
	$(BUILDDIR)$(TARGET)-policy \
	$(BUILDDIR)$(TARGET)-monitor $(BUILDDIR)$(TARGET)-monitor-nvidia \
	$(BUILDDIR)test2 $(BUILDDIR)test $(BUILDDIR)tests/test_oyranos \
	$(BUILDDIR)$(EXAMPLES) \
	$(BUILDDIR)$(TARGET)-config-fltk; \
	for ling in $(LINGUAS); do \
	  test -f po/$${ling}.gmo \
        && $(RM) po/$${ling}.gmo; \
	done;
	for lib in $(LIBRARIES); do \
	   $(RM) $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         $(BUILDDIR)lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         $(BUILDDIR)lib$${lib}$(SO)$(LIBEXT) \
	         $(BUILDDIR)lib$${lib}.a; \
	done
	for lib in $(CMMS); do \
	   $(RM) $(BUILDDIR)lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         $(BUILDDIR)lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         $(BUILDDIR)lib$${lib}$(SO)$(LIBEXT) \
	         $(BUILDDIR)lib$${lib}.a; \
	done
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile clean)
	cd fl_i18n/ && $(MAKE) -f $(MAKEFILE_ARCH) clean
	echo ... $@ done

# configure if the file config is not available
config.log.h:	$(CONFIG_FILES) ./config.log
	./config.log

# try to resolve dependencies
depend:
	echo "setting up dependencies ..."
	echo "MAKEDEPEND_ISUP = 1" > mkdepend
	echo "#nicht editieren/dont edit - automatisch generiert" >> mkdepend
	-$(MAKEDEPEND) -I./ $(INCL_DEP) >> mkdepend


# Build commands and filename extensions...
.SUFFIXES:	.0 .1 .3 .c .cxx .h .fl .man .o .z


.c.o:
	echo Compiling $< ...
	$(CC) -I. $(CFLAGS) -c -o $(BUILDDIR)$@ $<

.cxx.o:
	echo Compiling $< ...
	$(CXX) -I. $(CXXFLAGS) $(FLTK_H) -c -o $(BUILDDIR)$@ $<

.cpp.o:	mkdepend
	echo Compiling $< ...
	$(CXX) -I. $(CXXFLAGS) -c -o $(BUILDDIR)$@ $<

.fl.cxx:
	echo Expanding $< ...
	fluid -c $<

.po:
	echo Generating $@ ...
	msgfmt $<


# smallest package covering the current directory
tgz:
	-test -d Entwickeln && $(RM) -r Entwickeln
	$(MAKE) DESTDIR=Entwickeln copy_files
	tar cf - Entwickeln/ \
	| gzip > $(TARGET)_$(MTIME).tgz
	-test -d ../Archiv && mv -v $(TARGET)_*.tgz ../Archiv
	-test -d Entwickeln && \
	test `pwd` != `(cd Entwickeln; pwd)` && \
	rm -R Entwickeln

# build the source package including the subdirectories
targz:
	test -d $(TARGET)-$(VERSION) && $(RM) -R $(TARGET)-$(VERSION) || echo -e "\c"
	$(MAKE) DESTDIR=$(TARGET)-$(VERSION) copy_files
	cd default_profiles; \
	for prof in $(DEFAULT_PROFILES); do \
	     test -d $${prof} && \
	         mkdir -p ../$(TARGET)-$(VERSION)/default_profiles/$${prof}; \
	         (cd $${prof}; echo bin in `pwd`; $(MAKE) DESTDIR=../../$(TARGET)-$(VERSION)/default_profiles/$${prof} copy_files; $(RM) ../../$(TARGET)-$(VERSION)/default_profiles/$${prof}/Makefile) || \
	         echo "$${prof} profile directory is not found - ignoring"; \
	done;
	tar cf - $(TARGET)-$(VERSION)/ \
	| gzip > $(TARGET)-$(MTIME).tgz
	test -d $(TARGET)-$(VERSION) && \
	test `pwd` != `(cd $(TARGET)-$(VERSION); pwd)` && \
	$(RM) -R $(TARGET)-$(VERSION)
	test -d ../Archiv && mv -v $(TARGET)-*.tgz ../Archiv || echo "no copy"

# basic file set
copy_files:
	mkdir $(DESTDIR)
	cd fl_i18n && \
	 $(MAKE) DESTDIR=../$(DESTDIR)/fl_i18n -f $(MAKEFILE_ARCH) copy_files
	-$(RM) $(DESTDIR)/fl_i18n/Makefile
	$(COPY) -R \
	$(ALL_FILES) \
	$(DESTDIR)
	$(COPY) -r settings $(DESTDIR)
	#$(COPY) -r cmms $(DESTDIR)
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile clean)
	$(COPY) -R $(LIB_XNVCTRL) $(DESTDIR)
	mkdir $(DESTDIR)/tests
	$(COPY) $(TEST_FILES) $(DESTDIR)/tests
	mkdir $(DESTDIR)/examples
	$(COPY) $(EXAMPLE_FILES) $(DESTDIR)/examples
	mkdir $(DESTDIR)/FL
	$(COPY) $(Flmm_FILES) $(DESTDIR)/FL
	mkdir $(DESTDIR)/po
	$(COPY) $(POT_FILE) $(DESTDIR)/po
	for ling in $(LINGUAS); do \
	  test -f po/$${ling}.po \
	  && $(COPY) po/$${ling}.po $(DESTDIR)/po/; \
	done;
	echo ... $@ done

help:
	echo "... all :        build the binaries"
	echo "... docu :       generate documentation; requires doxygen"
	echo "  non default build targets:"
	echo "... test :       do a test"
	echo "... test2 :      build a second test binary"
	echo "... check :      do a test build and run it"
	echo "... "
	echo "... install :    install the binaries, include files and data"
	echo "... install_bin: install only binaries"
	echo "... install-icc: install only profiles and targets"
	echo "... uninstall"
	echo "... clean :      remove binaries, object files and most processed data"
	echo "... distclean :  remove all files processed from configure scripts"
	echo "... rpm :        build RPM's"
	echo "... dist :       build a distribution tarball and place local"
	echo "... targz :      build a distribution tar ball"
	echo "... tgz :        build a development tar ball"
	echo "... copy_files : copy distribution files to a DESTDIR=xxx path"
	echo "... depend :     resolve dependencies"
	echo "  VARIABLES:"
	echo "... DESTDIR=\"/user/a/My Install Dir/\" install"
	echo "... BUILDDIR=../build_local"

# mkdepend
include mkdepend

#ifndef MAKEDEPEND_ISUP
mkdepend: depend
#endif

