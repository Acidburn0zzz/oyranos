
COLLECT = ar cru
RANLIB = ranlib
LNK = ln -s
POST = $(fltkconfig) --post
RPMARCH = `rpmbuild --showrc | awk '/^build arch/ {print $$4}'`
MSGCAT = msgcat
MSGFMT = msgfmt -c --statistics

docdir          = $(datadir)/doc/$(TARGET)
SRCDIR          = $(src_dir)
BUILDDIR        = $(build_dir)/
GENDIR          = API_generated/

OY_MODULE_NAME  =_cmm_module
LIBRARIES = \
	$(TARGET) \
	$(TARGET)_modules \
	$(TARGET)_object \
	$(TARGET)_core \
	$(LIB_FORMS_FLTK)
LIBSONAMEFULL = lib$(TARGET)$(SO).$(VERSION)$(LIBEXT)
LIBSONAME = lib$(TARGET)$(SO).$(VERSION_A)$(LIBEXT)
LIBSO = lib$(TARGET)$(SO)$(LIBEXT)
LIBNAME = lib$(TARGET).a
LIBSONAMECOREFULL = lib$(TARGET)_core$(SO).$(VERSION)$(LIBEXT)
LIBSONAMECORE = lib$(TARGET)_core$(SO).$(VERSION_A)$(LIBEXT)
LIBSOCORE = lib$(TARGET)_core$(SO)$(LIBEXT)
LIBNAME_CORE = lib$(TARGET)_core.a
LIBSONAMEOBJECTFULL = lib$(TARGET)_object$(SO).$(VERSION)$(LIBEXT)
LIBSONAMEOBJECT = lib$(TARGET)_object$(SO).$(VERSION_A)$(LIBEXT)
LIBSOOBJECT = lib$(TARGET)_object$(SO)$(LIBEXT)
LIBNAME_OBJECT = lib$(TARGET)_object.a
LIBSONAMEMODULESFULL = lib$(TARGET)_modules$(SO).$(VERSION)$(LIBEXT)
LIBSONAMEMODULES = lib$(TARGET)_modules$(SO).$(VERSION_A)$(LIBEXT)
LIBSOMODULES = lib$(TARGET)_modules$(SO)$(LIBEXT)
LIBNAME_MODULES = lib$(TARGET)_modules.a
#ifdef FLTK
LIB_FORMS_FLTK = oyforms_fltk
LIB_FORMS_FLTK_NAME = lib$(LIB_FORMS_FLTK).a
#endif
LIB_CMM_START = lib$(TARGET)
LIB_CMM_END = $(OY_MODULE_NAME)$(SO).$(VERSION)$(LIBEXT)

CMMS = \
	$(TARGET)_lcms$(OY_MODULE_NAME) \
	$(TARGET)_lcm2$(OY_MODULE_NAME) \
	$(TARGET)_lraw$(OY_MODULE_NAME) \
	$(TARGET)_oicc$(OY_MODULE_NAME) \
	$(TARGET)_oPNG$(OY_MODULE_NAME) \
	$(TARGET)_oyra$(OY_MODULE_NAME) \
	$(TARGET)_oydi$(OY_MODULE_NAME) \
	$(TARGET)_oyX1$(OY_MODULE_NAME) \
	$(TARGET)_qarz$(OY_MODULE_NAME) \
	$(TARGET)_CUPS$(OY_MODULE_NAME) \
	$(TARGET)_SANE$(OY_MODULE_NAME) \
	$(TARGET)_oyRE$(OY_MODULE_NAME)
META = \
	$(TARGET)_oyIM$(OY_MODULE_NAME)
LIB_CMM_oyIM = $(LIB_CMM_START)_oyIM$(LIB_CMM_END)
LIB_CMM_oicc = $(LIB_CMM_START)_oicc$(LIB_CMM_END)
LIB_CMM_oPNG = $(LIB_CMM_START)_oPNG$(LIB_CMM_END)
#ifdef X11
LIB_CMM_oyX1 = $(LIB_CMM_START)_oyX1$(LIB_CMM_END)
#endif
#ifdef APPLE
LIB_CMM_qarz = $(LIB_CMM_START)_qarz$(LIB_CMM_END)
#endif
#ifdef CUPS
LIB_CMM_CUPS = $(LIB_CMM_START)_CUPS$(LIB_CMM_END)
#endif
#ifdef SANE
LIB_CMM_SANE = $(LIB_CMM_START)_SANE$(LIB_CMM_END)
#endif
LIB_CMM_oydi = $(LIB_CMM_START)_oydi$(LIB_CMM_END)
#ifdef LCMS
LIB_CMM_lcms = $(LIB_CMM_START)_lcms$(LIB_CMM_END)
#endif
#ifdef LCMS2
LIB_CMM_lcm2 = $(LIB_CMM_START)_lcm2$(LIB_CMM_END)
#endif
#ifdef LRAW_LIBS
LIB_CMM_lraw = $(LIB_CMM_START)_lraw$(LIB_CMM_END)
#ifdef EXIV2_LIBS
LIB_CMM_oyRE = $(LIB_CMM_START)_oyRE$(LIB_CMM_END)
#endif
#endif
LIB_CMM_oyra = $(LIB_CMM_START)_oyra$(LIB_CMM_END)
LIBS_CMM = \
	$(LIB_CMM_oyIM) \
	$(LIB_CMM_oicc) \
	$(LIB_CMM_oPNG) \
	$(LIB_CMM_oydi) \
	$(LIB_CMM_CUPS) \
	$(LIB_CMM_oyRE) \
	$(LIB_CMM_SANE) \
	$(LIB_CMM_oyX1) \
	$(LIB_CMM_qarz) \
	$(LIB_CMM_oyra) \
	$(LIB_CMM_lcms) \
	$(LIB_CMM_lcm2) \
	$(LIB_CMM_lraw)


#ifndef XNVCtrl
LIB_XNVCTRL_STATIC = libXNVCtrl
LIB_XNVCTRL_NAME_STATIC = $(LIB_XNVCTRL_STATIC).a
#endif
#ifdef X11
LIB_XNVCTRL = $(LIB_XNVCTRL_STATIC)
LIB_XNVCTRL_NAME = $(LIB_XNVCTRL_NAME_STATIC)
#endif
LIBFL_I18N = fl_i18n/libfl_i18n.a
LIBLTDL=$(ltdl)
#ifdef ELEKTRA_VERSION
ELEKTRA_OBJ = \
	$(ELEKTRA_VERSION)/src/libelektra/libelektra.a
#endif

#ifdef YAJL_DIR
YAJL_OBJ = \
	$(YAJL_DIR)/libyajl.a
YAJL_SOURCES := $(shell cd $(SRCDIR) && ls $(YAJL_DIR)/*.c)
#endif

INCL= -I/usr/include -I$(includedir) -I/usr/X11R6/include -I$(SRCDIR) \
	-I$(SRCDIR)/$(GENDIR) \
	$(LCMS_H) $(LCMS2_H) $(PNG_H) $(ELEKTRA_H) $(X_H) $(OS_INCL) \
	$(LIBXML2_H) $(XCM_H) $(LRAW_H) $(YAJL_H)

LDLIBS = $(LDFLAGS) -L$(libdir) -L. \
	$(ELEKTRA_LIBS) $(YAJL_LIBS) $(LIBXML2_LIBS) $(c) $(I18N_LIB) $(LIBLTDL)
LDLIBSCORE = $(LDFLAGS) -L$(libdir) -L. \
	$(LIBXML2_LIBS) $(c) $(I18N_LIB) $(LIBLTDL)


MODULE_LDLIBS =	$(LIBSONAMEFULL) $(LIBSONAMEMODULESFULL) $(LIBSONAMEOBJECTFULL) $(LIBSONAMECOREFULL) $(intl) $(lc) 


CHEADERS = \
	$(TARGET).h \
	$(TARGET)_alpha.h \
	$(TARGET)_alpha_internal.h \
	$(TARGET)_check.h \
	$(TARGET)_colour.h \
	$(TARGET)_cmm.h \
	$(TARGET)_config.h \
	$(TARGET)_core.h \
	$(TARGET)_cs.h \
	$(TARGET)_debug.h \
	$(TARGET)_definitions.h \
	$(TARGET)_elektra.h \
	$(TARGET)_helper.h \
	$(TARGET)_helper_macros.h \
	$(TARGET)_i18n.h \
	$(TARGET)_icc.h \
	$(TARGET)_io.h \
	$(TARGET)_internal.h \
	$(TARGET)_monitor.h \
	$(TARGET)_monitor_internal.h \
	$(TARGET)_monitor_internal_x11.h \
	$(TARGET)_monitor_internal_cs.h \
	$(TARGET)_sentinel.h \
	$(TARGET)_string.h \
	$(TARGET)_texts.h \
	$(TARGET)_types.h \
	$(TARGET)_xml.h \
	icc34.h \
	md5.h \
	lookup3.h \
	dirent_custom.h \
	oforms/$(TARGET)_forms.h
#	fl_$(TARGET).h
CFILES_CORE = \
	$(TARGET)_core.c \
	$(TARGET)_helper.c \
	$(TARGET)_i18n.c \
	$(TARGET)_io_core.c \
	$(TARGET)_misc.c \
	$(TARGET)_sentinel_core.c \
	$(TARGET)_string.c \
	md5.c \
	lookup3.c
CFILES_OBJECT = \
	$(GENDIR)oyBlob_s_.c \
	$(GENDIR)oyBlob_s.c \
	$(GENDIR)oyPointer_s_.c \
	$(GENDIR)oyPointer_s.c \
	$(GENDIR)oyProfile_s_.c \
	$(GENDIR)oyProfile_s.c \
	$(GENDIR)oyProfiles_s_.c \
	$(GENDIR)oyProfiles_s.c \
	$(GENDIR)oyProfileTag_s.c \
	$(GENDIR)oyProfileTag_s_.c \
	$(GENDIR)oyHash_s_.c \
	$(GENDIR)oyHash_s.c \
	$(GENDIR)oyName_s_.c \
	$(GENDIR)oyName_s.c \
	$(GENDIR)oyObject_s_.c \
	$(GENDIR)oyObject_s.c \
	$(GENDIR)oyObserver_s_.c \
	$(GENDIR)oyObserver_s.c \
	$(GENDIR)oyOption_s_.c \
	$(GENDIR)oyOption_s.c \
	$(GENDIR)oyOptions_s_.c \
	$(GENDIR)oyOptions_s.c \
	$(GENDIR)oyStruct_s.c \
	$(GENDIR)oyStructList_s_.c \
	$(GENDIR)oyStructList_s.c \
	$(GENDIR)oyranos_object.c \
	$(GENDIR)oyranos_generic.c
CHEADERS_OBJECT_PUBLIC = \
	$(GENDIR)oyBlob_s.h \
	$(GENDIR)oyPointer_s.h \
	$(GENDIR)oyProfile_s.h \
	$(GENDIR)oyProfiles_s.h \
	$(GENDIR)oyProfileTag_s.h \
	$(GENDIR)oyHash_s.h \
	$(GENDIR)oyName_s.h \
	$(GENDIR)oyObject_s.h \
	$(GENDIR)oyObserver_s.h \
	$(GENDIR)oyOption_s.h \
	$(GENDIR)oyOptions_s.h \
	$(GENDIR)oyStruct_s.h \
	$(GENDIR)oyStructList_s.h \
	$(GENDIR)$(TARGET)_object.h \
	$(GENDIR)oyranos_generic.h
CHEADERS_OBJECT = \
	$(CHEADERS_OBJECT_PUBLIC) \
	$(GENDIR)oyBlob_s_.h \
	$(GENDIR)oyPointer_s_.h \
	$(GENDIR)oyProfile_s_.h \
	$(GENDIR)oyProfiles_s_.h \
	$(GENDIR)oyProfileTag_s_.h \
	$(GENDIR)oyHash_s_.h \
	$(GENDIR)oyName_s_.h \
	$(GENDIR)oyObject_s_.h \
	$(GENDIR)oyObserver_s_.h \
	$(GENDIR)oyOption_s_.h \
	$(GENDIR)oyOptions_s_.h \
	$(GENDIR)oyStructList_s_.h \
	$(GENDIR)$(TARGET)_generic_internal.h \
	$(GENDIR)$(TARGET)_module_internal.h \
	$(GENDIR)$(TARGET)_object_internal.h

CFILES_OBJECT_MODULES = \
	$(GENDIR)oyConfig_s_.c \
	$(GENDIR)oyConfig_s.c \
	$(GENDIR)oyConfigs_s_.c \
	$(GENDIR)oyConfigs_s.c \
	$(GENDIR)oyranos_devices.c \
	$(GENDIR)oyranos_devices_internal.c
CHEADERS_OBJECT_MODULES_PUBLIC = \
	$(GENDIR)oyConfig_s.h \
	$(GENDIR)oyConfigs_s.h \
	$(GENDIR)oyranos_devices.h
CHEADERS_OBJECT_MODULES = \
	$(GENDIR)oyConfig_s_.h \
	$(GENDIR)oyConfigs_s_.h \
	$(GENDIR)oyranos_devices_internal.c \
	$(CHEADERS_OBJECT_MODULES_PUBLIC)

CFILES = \
	$(TARGET).c \
	$(TARGET)_check.c \
	$(TARGET)_cmm.c \
	$(TARGET)_colour.c \
	$(TARGET)_elektra.c \
	$(TARGET)_icc.c \
	$(TARGET)_io.c \
	$(TARGET)_widgets.c \
	$(TARGET)_sentinel.c \
	$(TARGET)_texts.c \
	$(TARGET)_xml.c
CFILESC = \
	$(TARGET)_debug.c
CFILES_ALPHA = \
	$(TARGET)_alpha.c
CFILES_CS = \
	$(TARGET)_cs.c

CFILES_CMM_lcms = \
	modules/$(TARGET)_cmm_lcms.c
CFILES_CMM_lcm2 = \
	modules/$(TARGET)_cmm_lcm2.c
CPPFILES_CMM_lraw = \
	modules/$(TARGET)_cmm_lraw.cpp
CFILES_CMM_oydi = \
	modules/$(TARGET)_cmm_oydi.c
CFILES_CMM_oyX1 = \
	modules/devices/$(TARGET)_cmm_oyX1.c
CFILES_CMM_qarz = \
	modules/devices/$(TARGET)_cmm_qarz.c
CFILES_CMM_CUPS = \
	modules/devices/$(TARGET)_cmm_CUPS.c
CFILES_CMM_SANE = \
	modules/devices/$(TARGET)_cmm_SANE.c
CPPFILES_CMM_oyRE = \
	modules/devices/$(TARGET)_cmm_oyRE.cpp
CFILES_CMM_oyra = \
	modules/$(TARGET)_cmm_oyra.c \
	modules/$(TARGET)_cmm_oyra_image.c \
	modules/$(TARGET)_cmm_oyra_image_ppm.c
CFILES_CMM_oyIM = \
	modules/$(TARGET)_cmm_oyIM.c \
	modules/$(TARGET)_cmm_oyIM_meta_c.c \
	modules/$(TARGET)_cmm_oyIM_profile.c
CFILES_CMM_oicc = \
	modules/$(TARGET)_cmm_oicc.c
CFILES_CMM_oPNG = \
	modules/$(TARGET)_cmm_oPNG.c
CFILES_MODULES = \
	$(CFILES_CMM_lcms) $(CFILES_CMM_lcm2) $(CFILES_CMM_raw) \
	$(CFILES_CMM_oydi) $(CFILES_CMM_oyra) \
	$(CFILES_MODULES_DEVICES) $(CFILES_CMM_oyIM) \
	$(CFILES_CMM_oicc) $(CFILES_CMM_oPNG)
CPPFILES_MODULES = \
	$(CPPFILES_CMM_lraw)
CHEADERS_MODULES = \
	modules/$(TARGET)_cmm_oyIM.h \
	modules/$(TARGET)_cmm_oyra.h
CFILES_MODULES_DEVICES = \
	$(CFILES_CMM_oyX1) \
	$(CFILES_CMM_qarz) \
	$(CFILES_MONI) \
	$(CFILES_MONI_X11) \
	$(CFILES_MONI_CS) \
	$(CFILES_CMM_CUPS) \
	modules/devices/oyRE_help.c \
	modules/devices/helper.c \
	$(CFILES_CMM_SANE) \
	modules/devices/SANE_help.c \
	$(CPPFILES_CMM_oyRE)
CFILES_MONI = \
	modules/devices/$(TARGET)_monitor.c
CFILES_MONI_X11 = \
	modules/devices/$(TARGET)_monitor_x11.c
CFILES_MONI_CS = \
	modules/devices/$(TARGET)_monitor_cs.c
CFILES_MONI_NVIDIA = \
	$(TARGET)_monitor_nvidia.c
CFILES_GAMMA = \
	$(TARGET)_gamma.c

CFILES_TOOLS = \
	$(TARGET)_policy.c \
	$(TARGET)_profile.c \
	$(TARGET)_profiles.c
#ifdef FLTK
CXXFILES_FLTK = \
	$(TARGET)_config_fltk.cxx
#endif

CFILES_OFORMS = \
	oforms/$(TARGET)_forms_cmd_line.c \
	oforms/$(TARGET)_forms.c
CFILES_OFORMS_CLI = \
	oforms/$(TARGET)_xforms.c \
	oforms/$(TARGET)_xforms_modules.c
CHEADERS_OFORMS = \
	oforms/$(TARGET)_forms.h
#ifdef FLTK
HEADERS_OFORMS_FLTK = \
	oforms/$(TARGET)_widgets_fltk.h
CXXFILES_OFORMS_FLTK = \
	oforms/$(TARGET)_forms_fltk.cxx \
	oforms/$(TARGET)_widgets_fltk.cxx \
	oforms/$(TARGET)_xforms_fltk.cxx
#endif
OFORMS_FILES = \
	oforms/oyranos_xforms.makefile

CXXFILES_Flmm = \
	FL/Flmm_Tabs.cxx

CFILES_OYJL = \
	oyjl/oyjl_tree_parse.c

TEST_CPP = \
	tests/cups_test.cxx \
	tests/dE2000_test.cpp \
	tests/dl_test.cxx \
	tests/fltk_test.cxx \
	tests/gettext_test.cxx \
	tests/intptr_test.c \
	tests/lib_test.cxx \
	tests/library.c \
	tests/libraw_test.cxx \
	tests/openmp.c \
	tests/openmp_main.c \
	tests/sane_test.cxx \
	tests/test_oyranos.c \
	tests/tiff_test.cxx \
	tests/yajl.c
TEST_H = \
	tests/ciede2000testdata.h
CPPFILES =
CXXFILES =
TEST_FILES = $(TEST_CPP) $(TEST_H)

EXAMPLE_SOURCES = \
	examples/dummy_device/oyranos_cmm_dDev.c \
	examples/dummy_filter/oyranos_cmm_dFil.c \
	examples/image2pdf/image2pdf.c \
	examples/image_display/image_display.cpp \
	examples/libraw/oyranos_file.cpp \
	examples/image_display/oyranos_display_helper_classes_fltk.cpp \
	examples/image_display/oyranos_display_helpers.c \
	examples/image_display/oyranos_display_helpers.h \
	examples/image_display/Oy_Widget.h \
	examples/image_display/Oy_Fl_Window_Base.h \
	examples/image_display/Oy_Fl_Image_Widget.h \
	examples/image_display/Oy_Fl_Double_Window.h \
	examples/image_display/Oy_Fl_Group.h \
	examples/image_display/Oy_Fl_Image_Box.h \
	examples/image_display/Oy_Fl_Shader_Box.h \
	examples/xcmsevents/qcmsevents.cpp \
	examples/xcmsevents/qcmsevents.h \
	examples/oyranos_convert/oyranos_convert.c \
	examples/oyranos_profile_graph/oyranos_profile_graph.c \
	examples/oyranos_profile_graph/ciexyz64_1.h \
	examples/oymd5icc/oymd5icc.c

EXAMPLE_FILES = \
	$(EXAMPLE_SOURCES) \
	examples/README \
	examples/libraw/README \
	examples/makefile \
	examples/xcmsevents/plugin-compicc.svg \
	examples/xcmsevents/plugin-compicc_gray.svg \
	examples/xcmsevents/qcmsevents.qrc \
	examples/xcmsevents/qcmsevents-applet.desktop

MAN1 = \
	oyranos-config-fltk.1 \
	oyranos-monitor.1 \
	oyranos-monitor-daemon.1 \
	oyranos-monitor-nvidia.1 \
	oyranos-policy.1 \
	oyranos-profile.1 \
	oyranos-profile-graph.1 \
	oyranos-profiles.1 \
	oyranos-profile-install.1 \
	oyranos-xforms.1 \
	oyranos-xforms-fltk.1 \
	oyranos-xforms-modules.1 \
	qcmsevents.1
MAN3 = oyranos.3 oyranos-config.3
ICONS = \
	$(TARGET)_logo.png \
	$(TARGET)_logo.h \
	lcms_logo2.png
DOKU =  AUTHORS \
        ChangeLog \
        COPYING \
        README
DOC_TEMPLATES_LINK = \
	doxymentation \
	doxymentation_alpha \
	doxymentation_common \
	doxygen.css \
	doxygen.footer \
	doxygen.header
DOC_TEMPLATES = \
	Doxyfile \
	Doxyfile_alpha \
	$(DOC_TEMPLATES)

LINGUAS_SRC = $(LING:.po=.gmo)
POT_FILE = po/$(TARGET).pot
POT_SCRIPT = oyranos_xml_to_po.sh

BIN_SCRIPTS = \
	$(SRCDIR)/$(TARGET)-monitor-daemon \
	$(SRCDIR)/$(TARGET)-profile-install
SCRIPTS = 
# $(POT_SCRIPT)

#ifdef FLTK
FLTK_GUI = $(TARGET)-config-fltk

FLTK_FILES = \
	oyranos_config_fltk.fl \
	oyranos_config_fltk.h \
	oforms/$(TARGET)_widgets_fltk.h

Flmm_FILES = \
	FL/Flmm_Tabs.H \
	$(CXXFILES_Flmm) \
	FL/AUTHORS \
	FL/ANNOUNCEMENT \
	FL/CHANGES \
	FL/COPYING \
	FL/CREDITS \
	FL/README
#endif

OYJL_FILES = \
	oyjl/oyjl_tree.h \
	$(CFILES_OYJL) \
	oyjl/oyjl_tree_test.c \
	oyjl/makefile

TOP_SOURCES = $(CPPFILES) $(CXXFILES) $(CFILES_CORE) $(CFILES) $(CFILESC) \
		$(CFILES_MONI_NVIDIA) $(CFILES_GAMMA) \
		$(CFILES_TOOLS) $(CFILES_ALPHA) $(CFILES_CS) \
		$(CXXFILES_FLTK)
SOURCES =  \
		$(TOP_SOURCES) \
		$(CFILES_OBJECT) $(CFILES_OBJECT_MODULES) \
		$(CFILES_MODULES) $(CPPFILES_MODULES) \
		$(CFILES_MODULES_DEVICES)\
		$(CFILES_OFORMS) $(CFILES_OFORMS_CLI) $(CXXFILES_OFORMS_FLTK) \
		$(EXAMPLE_SOURCES)

#ifdef APPLE
OBJECTS_CS = $(CFILES_CS:.c=.o)
#endif


# we need these files to generate explicite targets for out of tree builds
COBJECTS = \
	$(CFILES_CORE:.c=.o) $(CFILES:.c=.o) $(CFILESC:.c=.o) \
	$(CFILES_OBJECT:.c=.o) \
	$(CFILES_OBJECT_MODULES:.c=.o) \
	$(CFILES_ALPHA:.c=.o) \
	$(CFILES_OFORMS:.c=.o) $(OBJECTS_CS) \
	$(MONI_X11_SPECIFIC_OBJECTS) \
	$(MONI_CS_SPECIFIC_OBJECTS) \
	$(MONI_OBJECTS) \
	$(CMM_lcms_OBJECTS) \
	$(CMM_oydi_OBJECTS) \
	$(CMM_oyX1_OBJECTS) \
	$(CMM_qarz_OBJECTS) \
	$(CMM_CUPS_OBJECTS) \
	$(CMM_SANE_OBJECTS) \
	$(CMM_oyra_OBJECTS) \
	$(CMM_oyIM_OBJECTS) \
	$(CMM_oicc_OBJECTS) \
	$(CMM_oPNG_OBJECTS) \
	$(TARGET)_gamma.o \
	$(TARGET)_policy.o \
	$(TARGET)_profile.o \
	$(TARGET)_profiles.o \
	$(YAJL_OBJECTS) \
	tests/test_oyranos.o test.o test_core.o test_object.o
#ifdef LRAW_LIBS
#CPP_lraw_OBJECTS = $(CMM_lraw_OBJECTS)
#endif
CPPOBJECTS =	test2.o \
	$(CMM_oyRE_OBJECTS) \
	$(CPP_lraw_OBJECTS)
CXXOBJECTS =	$(CXXFILES) $(FLTK_OFORMS_OBJECTS)

OBJECTS = $(CPPFILES:.cpp=.o) $(CXXFILES:.cxx=.o) $(CFILES:.c=.o) $(CFILES_ALPHA:.c=.o) $(CFILES_OFORMS:.c=.o) $(OBJECTS_CS) $(OYJL_OBJECTS)
OBJECTS_MODULES = $(CFILES_OBJECT_MODULES:.c=.o)
OBJECTS_OBJECT = $(CFILES_OBJECT:.c=.o)
OBJECTS_CORE = $(CFILES_CORE:.c=.o) $(CFILESC:.c=.o)
CMM_lcms_OBJECTS = $(CFILES_CMM_lcms:.c=.o)
CMM_lcm2_OBJECTS = $(CFILES_CMM_lcm2:.c=.o)
CMM_lraw_OBJECTS = $(CPPFILES_CMM_lraw:.cpp=.o)
CMM_oydi_OBJECTS = $(CFILES_CMM_oydi:.c=.o)
CMM_oyX1_OBJECTS = $(CFILES_CMM_oyX1:.c=.o)
CMM_qarz_OBJECTS = $(CFILES_CMM_qarz:.c=.o)
CMM_CUPS_OBJECTS = $(CFILES_CMM_CUPS:.c=.o)
CMM_SANE_OBJECTS = $(CFILES_CMM_SANE:.c=.o)
CMM_oyRE_OBJECTS = $(CPPFILES_CMM_oyRE:.cpp=.o)
CMM_oyra_OBJECTS = $(CFILES_CMM_oyra:.c=.o)
CMM_oyIM_OBJECTS = $(CFILES_CMM_oyIM:.c=.o)
CMM_oicc_OBJECTS = $(CFILES_CMM_oicc:.c=.o)
CMM_oPNG_OBJECTS = $(CFILES_CMM_oPNG:.c=.o)
MONI_X11_SPECIFIC_OBJECTS = $(CFILES_MONI_X11:.c=.o)
MONI_CS_SPECIFIC_OBJECTS = $(CFILES_MONI_CS:.c=.o)
MONI_X11_OBJECTS = $(MONI_X11_SPECIFIC_OBJECTS) $(CFILES_MONI:.c=.o)
MONI_CS_OBJECTS = $(MONI_CS_SPECIFIC_OBJECTS) $(CFILES_MONI:.c=.o)
MONI_OBJECTS = $(CFILES_MONI:.c=.o)
Flmm_OBJECTS = $(CXXFILES_Flmm:.cxx=.o)
FLTK_OBJECTS = $(CXXFILES_FLTK:.cxx=.o) $(Flmm_OBJECTS)
FLTK_OFORMS_OBJECTS = $(CXXFILES_OFORMS_FLTK:.cxx=.o)
OYJL_OBJECTS = $(CFILES_OYJL:.c=.o)
YAJL_OBJECTS = $(YAJL_SOURCES:.c=.o)

CLEAN_OBJECTS = $(OBJECTS) \
	$(OBJECTS_MODULES) \
	$(OBJECTS_OBJECT) \
	$(OBJECTS_CORE) \
	$(MONI_X11_OBJECTS) \
	$(MONI_OBJECTS) \
	$(MONI_CS_OBJECTS) \
	$(CMM_lcms_OBJECTS) \
	$(CMM_lcm2_OBJECTS) \
	$(CMM_lraw_OBJECTS) \
	$(CMM_oydi_OBJECTS) \
	$(CMM_oyX1_OBJECTS) \
	$(CMM_qarz_OBJECTS) \
	$(CMM_CUPS_OBJECTS) \
	$(CMM_SANE_OBJECTS) \
	$(CMM_oyRE_OBJECTS) \
	$(CMM_oyra_OBJECTS) \
	$(CMM_oyIM_OBJECTS) \
	$(CMM_oicc_OBJECTS) \
	$(CMM_oPNG_OBJECTS) \
	$(FLTK_OBJECTS) \
	$(FLTK_OFORMS_OBJECTS) \
	$(OYJL_OBJECTS) \
	$(TARGET)_gamma.o \
	$(TARGET)_policy.o \
	$(TARGET)_profile.o \
	$(TARGET)_profiles.o \
	test2.o test_core.o test_object.o tests/test_oyranos.o test.o

SUB_OBJECTS = \
	$(CMM_lcms_OBJECTS) \
	$(CMM_lcm2_OBJECTS) \
	$(CMM_lraw_OBJECTS) \
	$(CMM_oydi_OBJECTS) \
	$(CMM_oyX1_OBJECTS) \
	$(CMM_qarz_OBJECTS) \
	$(CMM_CUPS_OBJECTS) \
	$(CMM_SANE_OBJECTS) \
	$(CMM_oyRE_OBJECTS) \
	$(CMM_oyra_OBJECTS) \
	$(CMM_oyIM_OBJECTS) \
	$(CMM_oicc_OBJECTS) \
	$(CMM_oPNG_OBJECTS) \
	$(Flmm_OBJECTS) \
	$(OYJL_OBJECTS) \
	tests/test_oyranos.o

INCL_DEP = $(SOURCES) $(CXXFILES_Flmm) $(CFILES_OYJL) $(YAJL_SOURCES) \
	test.c test2.cpp test_core.c test_object.c tests/test_oyranos.c

.PHONY:	check_environment docu examples oforms \
	$(ELEKTRA_VERSION)

TEST  = test
TEST2 = test2

DEFAULT_PROFILES = base printing

CONFIG_FILES = \
	$(SRCDIR)/configure \
	$(SRCDIR)/configure_tests.sh \
	$(SRCDIR)/makefile.in \
	$(SRCDIR)/$(TARGET).pc.in \
	$(SRCDIR)/$(TARGET).spec.in \
	$(SRCDIR)/$(TARGET)_control.in \
	$(SRCDIR)/$(TARGET)-config.in \
	$(SRCDIR)/$(TARGET)-monitor-setup.desktop \
	$(SRCDIR)/$(TARGET)-profile-install.desktop \
	$(SRCDIR)/examples/makefile

ALL_FILES = \
	$(DOKU) \
	$(ICONS) \
	$(TOP_SOURCES) \
	$(CHEADERS) \
	$(SCRIPTS) \
	$(BIN_SCRIPTS) \
	$(MAN1) $(MAN3) \
	$(DOC_TEMPLATES) \
	$(FLTK_FILES) \
	dirent.c \
	test.c test2.cpp test_core.c test_object.c

# build all what is needed to run the libraries, helpers
all:	check_environment config.log.h mkdepend \
	$(LIBSONAMEFULL) \
	$(TARGET)-monitor $(X11) \
	$(LIBS_CMM) \
	$(TARGET)-policy $(TARGET)-profile $(TARGET)-profiles $(FLTK_GUI) \
	$(LINGUAS_SRC) \
	$(LIB_FORMS_FLTK_NAME)
	echo ... $@ done

check_environment:
	if [ "$(build_dir)" != "$(src_dir)" ] && [ -f "$(SRCDIR)/config.h" ]; then\
	  echo Found a "$(build_dir)/config.h", which will cause problems.; \
	  echo Please remove before continuing. Exit; \
	  exit 1; \
	fi

$(X11): $(TARGET)-monitor-nvidia

# get time stamp
MTIME   := $(shell date +%y%m%d.%H%M%S)

# this is a test
time:
	echo $(MTIME)

# build all objects and libraries, link the headers to $(TARGET)
$(LIBSONAMEFULL):	$(LIBSONAMEOBJECTFULL) $(LIBSONAMEMODULESFULL) $(LIBNAME) $(DEVEL_LIBS) $(ELEKTRA_VERSION) $(YAJL_OBJ)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_libdir)$(LIBSONAME) \
	-o $(LIBSONAMEFULL) \
	$(OBJECTS) \
	$(LIBSONAMECOREFULL) $(LIBSONAMEMODULESFULL) $(LIBSONAMEOBJECTFULL) \
	$(LDLIBS) $(m)
	$(RM)  $(LIBSONAME)
	$(LNK) $(LIBSONAMEFULL) $(LIBSONAME)
	$(RM)  $(LIBSO)
	$(LNK) $(LIBSONAMEFULL) $(LIBSO)

$(LIBSONAMEMODULESFULL):	$(LIBNAME_MODULES) $(LIBSONAMEOBJECTFULL) $(LIBSONAMECOREFULL) $(DEVEL_LIBS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_libdir)$(LIBSONAMEMODULES) \
	-o $(LIBSONAMEMODULESFULL) \
	$(OBJECTS_MODULES) \
	$(LIBSONAMEOBJECTFULL) $(LIBSONAMECOREFULL) $(LDLIBSCORE) \
	$(LIBXML2_LIBS) $(m)
	$(RM)  $(LIBSONAMEMODULES)
	$(LNK) $(LIBSONAMEMODULESFULL) $(LIBSONAMEMODULES)
	$(RM)  $(LIBSOMODULES)
	$(LNK) $(LIBSONAMEMODULESFULL) $(LIBSOMODULES)

$(LIBSONAMEOBJECTFULL):	$(LIBSONAMECOREFULL) $(LIBNAME_OBJECT) $(DEVEL_LIBS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_libdir)$(LIBSONAMEOBJECT) \
	-o $(LIBSONAMEOBJECTFULL) \
	$(OBJECTS_OBJECT) \
	$(LIBSONAMECOREFULL) $(LDLIBSCORE) $(LIBXML2_LIBS) $(m)
	$(RM)  $(LIBSONAMEOBJECT)
	$(LNK) $(LIBSONAMEOBJECTFULL) $(LIBSONAMEOBJECT)
	$(RM)  $(LIBSOOBJECT)
	$(LNK) $(LIBSONAMEOBJECTFULL) $(LIBSOOBJECT)

$(LIBSONAMECOREFULL):	$(LIBNAME_CORE) $(DEVEL_LIBS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_libdir)$(LIBSONAMECORE) \
	-o $(LIBSONAMECOREFULL) \
	$(OBJECTS_CORE) \
	$(LDLIBSCORE) $(m)
	$(RM)  $(LIBSONAMECORE)
	$(LNK) $(LIBSONAMECOREFULL) $(LIBSONAMECORE)
	$(RM)  $(LIBSOCORE)
	$(LNK) $(LIBSONAMECOREFULL) $(LIBSOCORE)

$(LIB_CMM_lcms): $(LIBSONAMEFULL) $(CMM_lcms_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_lcms_OBJECTS) $(LCMS_LIBS) $(MODULE_LDLIBS) $(OPENMP)
	$(RM)  lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(CMM_lcm2_OBJECTS):	$(SRCDIR)/$(CFILES_CMM_lcm2)
	$(CC) -I./ -I$(SRCDIR) -std=c99 $(CFLAGS) $(INCL) -c -o $*.o $(SRCDIR)/$*.c

$(LIB_CMM_lcm2): $(LIBSONAMEFULL) $(CMM_lcm2_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) -std=c99 $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_lcm2_OBJECTS) $(LCMS2_LIBS) $(MODULE_LDLIBS) $(OPENMP)
	$(RM)  lib$(TARGET)_lcm2$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lcm2$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_lcm2$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lcm2$(OY_MODULE_NAME)$(SO)$(LIBEXT)

modules/oyranos_cmm_lraw.o:	$(SRCDIR)/modules/oyranos_cmm_lraw.cpp
	echo Compiling modules/oyranos_cmm_lraw.o without "--pedantic" ...
	$(CXX) -I./ -I$(SRCDIR)/$(GENDIR) -I$(SRCDIR) $(LRAW_H) `echo $(CXXFLAGS) | sed s/--pedantic//g` -c -o $*.o $(SRCDIR)/$*.cpp

$(LIB_CMM_lraw): $(LIBSONAMEFULL) $(CMM_lraw_OBJECTS)
	echo Linking $@ ...
	$(CXX) -I./ $(CXXFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_lraw_OBJECTS) $(LRAW_LIBS) $(MODULE_LDLIBS)
	$(RM)  lib$(TARGET)_lraw$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lraw$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_lraw$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lraw$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oydi): $(LIBSONAMEFULL) $(CMM_oydi_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_oydi_OBJECTS) $(X11_LIBS) $(XCM_LIBS) $(Xfixes) $(MODULE_LDLIBS)
	$(RM)  lib$(TARGET)_oydi$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oydi$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oydi$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oydi$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oyX1): $(LIBSONAMEFULL) $(CMM_oyX1_OBJECTS) $(MONI_X11_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_oyX1_OBJECTS) $(MONI_X11_OBJECTS) $(X11_LIBS) $(MODULE_LDLIBS) $(m)
	$(RM)  lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_qarz): $(LIBSONAMEFULL) $(CMM_qarz_OBJECTS) $(MONI_CS_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_qarz_OBJECTS) $(MONI_CS_OBJECTS) $(XCM_LIBS) $(X11_LIBS) $(MODULE_LDLIBS) $(m)
	$(RM)  lib$(TARGET)_qarz$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_qarz$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_qarz$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_qarz$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_CUPS): $(LIBSONAMEFULL) $(CMM_CUPS_OBJECTS)
	echo Linking $@ ...
	-$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_CUPS_OBJECTS) $(MODULE_LDLIBS) $(cups)
	$(RM)  lib$(TARGET)_CUPS$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_CUPS$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_CUPS$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_CUPS$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_SANE): $(LIBSONAMEFULL) $(CMM_SANE_OBJECTS)
	echo Linking $@ ...
	-$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_SANE_OBJECTS) $(MODULE_LDLIBS) $(sane) $(LCMS_LIBS)
	$(RM)  lib$(TARGET)_SANE$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_SANE$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_SANE$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_SANE$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oyRE): $(LIBSONAMEFULL) $(CMM_oyRE_OBJECTS)
	echo Linking $@ ...
	-$(CXX) $(CXXFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_oyRE_OBJECTS) $(MODULE_LDLIBS) $(LRAW_LIBS) $(EXIV2_LIBS)
	$(RM)  lib$(TARGET)_oyRE$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyRE$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oyRE$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyRE$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oyra): $(LIBSONAMEFULL) $(CMM_oyra_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_oyra_OBJECTS) $(MODULE_LDLIBS)
	$(RM)  lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oyIM): $(LIBSONAMEFULL) $(CMM_oyIM_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_metadir)$@ \
	-o $@ \
	$(CMM_oyIM_OBJECTS) $(MODULE_LDLIBS) $(dl) $(LDLIBS)
	$(RM)  lib$(TARGET)_oyIM$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyIM$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oyIM$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyIM$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oicc): $(LIBSONAMEFULL) $(CMM_oicc_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_oicc_OBJECTS) $(MODULE_LDLIBS)
	$(RM)  lib$(TARGET)_oicc$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oicc$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oicc$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oicc$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oPNG): $(LIBSONAMEFULL) $(CMM_oPNG_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(dyld_cmmdir)$@ \
	-o $@ \
	$(CMM_oPNG_OBJECTS) $(MODULE_LDLIBS) $(PNG_LIBS)
	$(RM)  lib$(TARGET)_oPNG$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oPNG$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oPNG$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oPNG$(OY_MODULE_NAME)$(SO)$(LIBEXT)


$(LIB_XNVCTRL).a:
	echo Building $@ ...
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile)
	test -L $(LIB_XNVCTRL).a || $(LNK) $(LIB_XNVCTRL)/$(LIB_XNVCTRL).a .


# the twinview library
$(TARGET)-monitor-nvidia:	$(SRCDIR)/$(TARGET)_monitor_nvidia.c $(LIB_XNVCTRL_NAME) $(MONI_X11_OBJECTS) $(LIBSONAMEFULL)
	echo Linking $@ $(LIB_XNVCTRL_)1 $(XNVCtrl)2 $(LIB_XNVCTRL)3 $(LIB_XNVCTRL_NAME)4 ...
	-$(CC) -I./ $(CFLAGS) $(INCL) $(SRCDIR)/$(TARGET)_monitor_nvidia.c \
	-I$(SRCDIR)/libXNVCtrl \
	-o $(TARGET)-monitor-nvidia $(MONI_X11_OBJECTS) -L./ \
	$(LDLIBS) \
	-L./$(LIB_XNVCTRL) -lXNVCtrl $(MODULE_LDLIBS) \
	$(LINK_LIB_PATH) $(X11_LIBS) $(m)

oyjl/oyjl_tree_parse.o:	$(SRCDIR)/oyjl/oyjl_tree_parse.c
	echo Compiling $<
	mkdir -p oyjl/
	$(CC) -I./ -I./oyjl $(YAJL_VERSION) -I$(SRCDIR)/oyjl \
	  $(CFLAGS) $(INCL) $(YAJL_H) -o $@ -c $<

$(TARGET)_config_fltk.o:	$(SRCDIR)/$(TARGET)_config_fltk.cxx
	echo Compiling $*.cxx
	$(CXX) -I./ -I$(SRCDIR) $(CXXFLAGS) $(INCL) $(FLTK_H) -c $<
FL/Flmm_Tabs.o:	$(SRCDIR)/FL/Flmm_Tabs.cxx
	echo Compiling FL/Flmm_Tabs.cxx
	$(CXX) -I./ -I./FL -I$(SRCDIR)/FL $(CXXFLAGS) $(INCL) $(FLTK_H) -o $@ -c $<

# general configuration tool example
$(FLTK_GUI):	$(FLTK_OBJECTS) $(LIBFL_I18N) $(LIBSONAMEFULL)
	echo Linking $@ ...
	$(CXX) -I./ $(FLTK_H) -o $(FLTK_GUI) \
	$(FLTK_OBJECTS) \
	$(MODULE_LDLIBS) $(LINK_LIB_PATH) \
	$(LDLIBS) $(LIBFL_I18N) $(FLTK_LIBS) $(PNG_LIBS) $(I18N_LIB) $(pthread)
	$(REZ)

fltk-gui:	oyranos_config_fltk.o

$(LIB_FORMS_FLTK_NAME):	$(FLTK_OFORMS_OBJECTS)
	echo Linking $@ ...
	test -f $(LIB_FORMS_FLTK_NAME) && $(RM) $(LIB_FORMS_FLTK_NAME) || \
		echo ""
	$(COLLECT) $(LINK_FLAGS_STATIC) $(LIB_FORMS_FLTK_NAME) \
		$(FLTK_OFORMS_OBJECTS)
	$(RANLIB) $(LIB_FORMS_FLTK_NAME)

$(LIBNAME):	$(OBJECTS) $(YAJL_OBJ)
	echo Linking $@ ...
	test -f $(LIBNAME) && $(RM) $(LIBNAME) || echo ""
	$(COLLECT) $(LINK_FLAGS_STATIC) $(LIBNAME) \
		$(OBJECTS) $(YAJL_OBJECTS)
	$(RANLIB) $(LIBNAME)
$(LIBNAME_MODULES):	$(OBJECTS_MODULES)
	echo Linking $@ ...
	test -f $(LIBNAME_MODULES) && $(RM) $(LIBNAME_MODULES) || echo ""
	$(COLLECT) $(LINK_FLAGS_STATIC) $(LIBNAME_MODULES) \
		$(OBJECTS_MODULES)
	$(RANLIB) $(LIBNAME_MODULES)
$(LIBNAME_OBJECT):	$(OBJECTS_OBJECT)
	echo Linking $@ ...
	test -f $(LIBNAME_OBJECT) && $(RM) $(LIBNAME_OBJECT) || echo ""
	$(COLLECT) $(LINK_FLAGS_STATIC) $(LIBNAME_OBJECT) \
		$(OBJECTS_OBJECT)
	$(RANLIB) $(LIBNAME_OBJECT)
$(LIBNAME_CORE):	$(OBJECTS_CORE)
	echo Linking $@ ...
	test -f $(LIBNAME_CORE) && $(RM) $(LIBNAME_CORE) || echo ""
	$(COLLECT) $(LINK_FLAGS_STATIC) $(LIBNAME_CORE) \
		$(OBJECTS_CORE)
	$(RANLIB) $(LIBNAME_CORE)

$(ELEKTRA_VERSION):
	echo building DB ...
	cd $(ELEKTRA_VERSION); \
	test -f Makefile && make || (./configure --enable-static $(nodeps_config_opt) --prefix=$(prefix); make)

$(YAJL_OBJ):	$(YAJL_OBJECTS)
	echo building Yajl ...
	cd $(YAJL_DIR); \
	test -f Makefile && make || (echo no makefile found)

# the monitor profile tool
$(TARGET)-monitor:	$(LIBSONAMEFULL) $(TARGET)_gamma.o
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) -o $(TARGET)-monitor \
	$(TARGET)_gamma.o \
	$(MODULE_LDLIBS) $(LDLIBS) $(X11_LIBS) $(LINK_LIB_PATH)

$(TARGET)-policy:	$(LIBSONAMEFULL) $(TARGET)_policy.o
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) -o $(TARGET)-policy \
	$(TARGET)_policy.o \
	$(MODULE_LDLIBS) $(LDLIBS) $(LINK_LIB_PATH)

$(TARGET)-profile:	$(TARGET)_profile.o $(LIBSONAMEFULL)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) -o $@ \
	$< \
	$(MODULE_LDLIBS) $(LDLIBS) $(LINK_LIB_PATH)

$(TARGET)-profiles:	$(TARGET)_profiles.o $(LIBSONAMEFULL)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) -o $@ \
	$< \
	$(MODULE_LDLIBS) $(LDLIBS) $(LINK_LIB_PATH)

.PHONY: API_generated
generate:	API_generated

API_generated:	generator/oyAPIGenerator
	cd generator/; ./oyAPIGenerator $(SRCDIR)/templates:$(SRCDIR)/sources $(SRCDIR)/templates_weg:$(SRCDIR)/sources_weg #valgrind --num-callers=20

generator/oyAPIGenerator:
	cd generator; cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-g -Wall" -DGrantlee_DIR="$(SRCDIR)/generator/grantlee/lib/grantlee" $(SRCDIR)/generator; make || echo Did you run download_grantlee.sh in generator/ ?


test_core:	$(LIBSONAMECOREFULL) $(LIBNAME_CORE) test_core.o
	echo Linking dynamic $@ ...
	$(CXX) -I./ `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall \
	  -o test_core_dyn \
	  test_core.o -L./ $(LIBSONAMECOREFULL) $(LDLIBSCORE) \
	  $(LINK_LIB_PATH) -L$(libdir) $(intl)
	echo Linking static $@ ...
	$(CXX) -I./ `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -o $@ \
	  test_core.o -L./ $(LIBNAME_CORE) -L$(libdir) $(intl) $(dl)

test_object:	$(LIBSONAMEOBJECTFULL) $(LIBNAME_OBJECT) test_object.o
	echo Linking dynamic $@ ...
	$(CXX) -I./ `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall \
	  -o test_object_dyn \
	  test_object.o -L./ $(LIBSONAMEOBJECTFULL) $(LIBSONAMECOREFULL) \
	  $(LDLIBSCORE) $(LIBXML2_LIBS) $(LINK_LIB_PATH) -L$(libdir) $(intl)
	echo Linking static $@ ...
	$(CXX) -I./ `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -o $@ \
	  test_object.o -L./ $(LIBNAME_OBJECT) $(LIBSONAMECORE) \
	  $(LIBXML2_LIBS) -L$(libdir) $(intl) $(dl)


test2:	test2.o $(LIBSONAMEFULL)
	echo Linking dynamic $@ ...
	$(CXX) -I./ `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -o test2_dyn \
	test2.o -L./ `./oyranos-config --ldflags` -L$(libdir) $(intl)
#ifdef ELEKTRA_VERSION
	$(COPY) test2_dyn test2
#else
	echo Linking static $@ ...
	$(CXX) -I./ `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -o test2 \
	test2.o -L./ `./oyranos-config --ldstaticflags` -L$(libdir) $(intl) $(dl)
#endif

$(SRCDIR)/test2.c.c:
	test -f $(SRCDIR)/test2.c.c || $(LNK) $(SRCDIR)/test2.cpp $(SRCDIR)/test2.c.c

test2.c.o:	$(SRCDIR)/test2.c.c
	$(CC) -I./ -I$(SRCDIR) $(CFLAGS) $(INCL) -c -o $*.o $(SRCDIR)/$*.c
test2c:	test2.c.o
	$(CC) -I./ `echo $(CFLAGS) | sed s/-0.//g` -g -Wall -o test2c \
	test2.c.o -L./ `./oyranos-config --ldstaticflags`

check:	all tests/test_oyranos $(TEST2) examples oforms test_core test_object
	echo current git version is:
	n=0; for i in `cd $(SRCDIR); git rev-list master`; do if [ $${n} -eq 0 ]; then echo git id:$${i}; fi; n=1; done
	echo run tests/test_oyranos
	OY_MODULE_PATHS=. LD_LIBRARY_PATH=./:$(libdir):$${LD_LIBRARY_PATH} tests/test_oyranos

examples:	all
	cd examples && ($(MAKE) clean; PATH="$(PATH):$(bindir):.." LD_LIBRARY_PATH=./:$(libdir):$${LD_LIBRARY_PATH} PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(DESTDIR)$(libdir)/pkgconfig:.." INCLUDE="-I$(includedir) -I$(SRCDIR) -I../ -I$(SRCDIR)/$(GENDIR)" SRCDIR=$(SRCDIR)/examples/ CFLAGS="$(CFLAGS)" LIBS="-L$(libdir) -L../" intl="$(intl)" $(MAKE))

oforms:	all $(LIB_FORMS_FLTK_NAME)
	cd oforms && (PATH="$(PATH):$(bindir):.." LD_LIBRARY_PATH=./:$(libdir):$${LD_LIBRARY_PATH} PKG_CONFIG_PATH="$(PKG_CONFIG_PATH):$(DESTDIR)$(libdir)/pkgconfig:.." CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" INCLUDE="-I$(includedir) -I$(SRCDIR) -I../ -I$(SRCDIR)/$(GENDIR)" SRCDIR=$(SRCDIR)/oforms/ LDFLAGS="-L../ $(intl) $(LDFLAGS)" $(MAKE) -f oyranos_xforms.makefile)

test:	test.o
	$(CC) -I./ $(CFLAGS) -o test \
	test.o \
	$(MODULE_LDLIBS) $(LDLIBS) $(LINK_SRC_PATH)

tests/test_oyranos:	tests/test_oyranos.o
	$(RM) tests/test_oyranos.o
	$(MAKE) tests/test_oyranos.o
	echo Linking tests/test_oyranos
	$(CC) -I./ $(CFLAGS) -o tests/test_oyranos \
        tests/test_oyranos.o \
        $(MODULE_LDLIBS) $(LDLIBS) $(LINK_SRC_PATH)

$(LIBFL_I18N):	fl_i18n/Makefile
#ifdef FLTK
	cd fl_i18n/ && $(MAKE) -f $(MAKEFILE_ARCH)
#endif

$(LINGUAS_SRC):	$(SRCDIR)/$(POT_FILE)
	echo Linguas ... $(@:.gmo=)
	mkdir -p po/
	for ling in $(@:.gmo=); do \
	  lingua=`echo $${ling} | sed s%po/%%g | sed s%$(SRCDIR)/%%g`; \
	  echo "update po/$${lingua}.gmo ..."; \
	  test -f $(SRCDIR)/$${ling}.po \
        && ($(MSGFMT) -o po/$${lingua}.gmo $(SRCDIR)/$${ling}.po; \
            if [ ! -d po/$${lingua} ]; then \
              mkdir po/$${lingua}; \
            fi; \
            if [ ! -d po/$${lingua}/LC_MESSAGES ]; then \
              mkdir po/$${lingua}/LC_MESSAGES; \
            fi; \
            test -L po/$${lingua}/LC_MESSAGES/$(TARGET).mo \
              && $(RM) po/$${lingua}/LC_MESSAGES/$(TARGET).mo \
              || echo po/$${lingua}/LC_MESSAGES/$(TARGET).mo nicht gefunden; \
            $(LNK) ../../$${lingua}.gmo po/$${lingua}/LC_MESSAGES/$(TARGET).mo;) \
        || (echo $(SRCDIR)/$${ling}.po is not yet ready ... skipping) \
	done;

$(SRCDIR)/$(POT_FILE):
	echo Generating $(SRCDIR)/$(POT_FILE) ...
	mkdir -p $(SRCDIR)/po
	test `which xgettext` && (cd $(SRCDIR); \
	  xgettext --force-po $(XGETTEXT_OPTIONS) \
	   -d $(TARGET) \
	   -o $(SRCDIR)/$(POT_FILE) -c \
	   $(SOURCES) $(CHEADERS)) \
	|| echo -e "\c"
	-$(MSGCAT) $(SRCDIR)/po/*.pot -o $(SRCDIR)/po/oyranos.pot
	for ling in $(SRCDIR)/po/*.po; do \
	  lingua=`echo $${ling} | sed 's%$(SRCDIR)/po/%%g ; s%.po%%'`; \
	  test `which $(MSGMERGE)` && \
	         $(MSGMERGE) $(MSGMERG_OPTS) $(SRCDIR)/po/$${lingua}.po \
	         $(SRCDIR)/$(POT_FILE) || \
	    echo -e "\c"; \
	done;
	echo ... $(SRCDIR)/$(POT_FILE) done

doxygen.header:
	echo Linking doxygen files ...
	test -L doxygen.header && $(RM) $(DOC_TEMPLATES_LINK) || echo no doxygen.header link
	$(LNK) $(SRCDIR)/doxygen.header $(SRCDIR)/doxygen.footer $(SRCDIR)/doxygen.css $(SRCDIR)/doxymentation $(SRCDIR)/doxymentation_common $(SRCDIR)/doxymentation_alpha .

Doxyfile:	$(SRCDIR)/Doxyfile doxygen.header $(SRCDIR)/doxygen.header  $(SRCDIR)/doxygen.footer  $(SRCDIR)/doxygen.css  $(SRCDIR)/doxymentation  $(SRCDIR)/doxymentation_common  $(SRCDIR)/doxymentation_alpha
	echo Update doxygen files ...
	$(COPY) $(SRCDIR)/Doxyfile .
	echo "INPUT = $(SRCDIR)" >> Doxyfile
	$(COPY) $(SRCDIR)/Doxyfile_alpha .
	echo "INPUT = $(SRCDIR) $(SRCDIR)/API_generated" >> Doxyfile_alpha

docu:	Doxyfile
	echo Documentation ...
	test -n 'which doxygen' && ( \
		doxygen Doxyfile; $(COPY) $(SRCDIR)/$(TARGET)_logo.png doc/html/; \
		doxygen Doxyfile_alpha; $(COPY) $(SRCDIR)/$(TARGET)_logo.png doc_alpha/html/;) || echo "Will not create Documentation because doxygen is missing"
	echo ... Documentation done

# the copy part for this directory level
install_bin:	all oforms install_gui
	echo Installing binaries ...
	mkdir -p "$(DESTDIR)$(bindir)"
	$(INSTALL) -m 755 $(TARGET)-config     "$(DESTDIR)$(bindir)"
	$(INSTALL) -m 755 $(TARGET)-monitor    "$(DESTDIR)$(bindir)"
	$(INSTALL) -m 755 $(TARGET)-policy     "$(DESTDIR)$(bindir)"
	$(INSTALL) -m 755 $(TARGET)-profile    "$(DESTDIR)$(bindir)"
	$(INSTALL) -m 755 $(TARGET)-profiles   "$(DESTDIR)$(bindir)"
	$(INSTALL) -m 755 $(BIN_SCRIPTS)       "$(DESTDIR)$(bindir)"
	-$(INSTALL) -m 755 $(TARGET)-monitor-nvidia "$(DESTDIR)$(bindir)"
	$(INSTALL) -m 755 oforms/$(TARGET)-xforms "$(DESTDIR)$(bindir)"
	-$(INSTALL) -m 755 oforms/$(TARGET)-xforms-fltk "$(DESTDIR)$(bindir)"
	$(INSTALL) -m 755 oforms/$(TARGET)-xforms-modules "$(DESTDIR)$(bindir)"
	mkdir -p "$(DESTDIR)$(libdir)"
	mkdir -p "$(DESTDIR)$(libdir)/pkgconfig"
	mkdir -p "$(DESTDIR)$(metadir)"
	mkdir -p "$(DESTDIR)$(cmmdir)"
	$(INSTALL) -m 644 $(TARGET).pc "$(DESTDIR)$(libdir)/pkgconfig/"
	for lib in $(LIBRARIES); do \
	   test -f lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		($(INSTALL) -m 755 lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		"$(DESTDIR)$(libdir)" \
		&& echo Installed $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT) ); \
	   test -f lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		(test -L "$(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)" && $(RM) "$(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)"; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		"$(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)"; \
		test -L "$(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT)" && ( \
		$(RM) "$(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT)") ; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		"$(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT)"; \
		); \
	   if [ "$(STATIC)" = "" ]; then test -f lib$${lib}.a && \
		($(INSTALL) -m 644 lib$${lib}.a "$(DESTDIR)$(libdir)";\
		$(RANLIB) "$(DESTDIR)$(libdir)/lib$${lib}.a" \
		) || echo Installed $(DESTDIR)$(libdir)/lib$${lib}.a; \
           fi; \
	done
	for lib in $(META); do \
	   test -f lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		($(INSTALL) -m 755 lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		"$(DESTDIR)$(metadir)" \
		&& echo Installed $(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT) ); \
	   test -f NOT_lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		(test -L "$(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)" && $(RM) "$(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)"; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		"$(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)"; \
		test -L "$(DESTDIR)$(metadir)/lib$${lib}$(SO)$(LIBEXT)" && ( \
		$(RM) "$(DESTDIR)$(metadir)/lib$${lib}$(SO)$(LIBEXT)") ; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		"$(DESTDIR)$(metadir)/lib$${lib}$(SO)$(LIBEXT)"; \
		); \
	   test -f lib$${lib}.a && \
		($(INSTALL) -m 644 lib$${lib}.a "$(DESTDIR)$(metadir)";\
		$(RANLIB) "$(DESTDIR)$(metadir)/lib$${lib}.a" \
		) || echo ""; \
	done
	for lib in $(CMMS); do \
	   test -f lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		($(INSTALL) -m 755 lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		"$(DESTDIR)$(cmmdir)" \
		&& echo Installed $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT) ); \
	   test -f NOT_lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		(test -L "$(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)" \
		&& $(RM) "$(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)"; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		"$(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)"; \
		test -L "$(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT)" && ( \
		$(RM) "$(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT)") ; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		"$(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT)"; \
		); \
	   test -f lib$${lib}.a && \
		($(INSTALL) -m 644 lib$${lib}.a "$(DESTDIR)$(cmmdir)";\
		$(RANLIB) "$(DESTDIR)$(cmmdir)/lib$${lib}.a" \
		) || a=1; \
	done
	test -d "$(DESTDIR)$(includedir)/$(TARGET)/alpha/object" || mkdir -p "$(DESTDIR)$(includedir)/$(TARGET)/alpha/object"
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET).h" "$(DESTDIR)$(includedir)/$(TARGET)"
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)_types.h" "$(DESTDIR)$(includedir)/$(TARGET)"
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)_alpha.h" "$(DESTDIR)$(includedir)/$(TARGET)/alpha"
	(cd $(SRCDIR); $(INSTALL) -m 644 $(CHEADERS_OBJECT_PUBLIC) \
	  $(CHEADERS_OBJECT_MODULES_PUBLIC) \
	  "$(DESTDIR)$(includedir)/$(TARGET)/alpha/object")
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)_cmm.h" "$(DESTDIR)$(includedir)/$(TARGET)/alpha"
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)_config.h" "$(DESTDIR)$(includedir)/$(TARGET)"
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)_core.h" "$(DESTDIR)$(includedir)/$(TARGET)"
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)_definitions.h" "$(DESTDIR)$(includedir)/$(TARGET)"
	$(INSTALL) -m 644 "$(SRCDIR)/icc34.h" "$(DESTDIR)$(includedir)/$(TARGET)"
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)_colour.h" "$(DESTDIR)$(includedir)/$(TARGET)"
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)_icc.h" "$(DESTDIR)$(includedir)/$(TARGET)"
	$(INSTALL) -m 644 "$(TARGET)_version.h" "$(DESTDIR)$(includedir)/$(TARGET)"
	-mkdir -p "$(DESTDIR)/etc/xdg/autostart/"
	-$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)-monitor-setup.desktop" "$(DESTDIR)/etc/xdg/autostart/"
	mkdir -p "$(DESTDIR)$(desktopdir)"
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)-profile-install.desktop" "$(DESTDIR)$(desktopdir)"
	echo ... binary Installation finished

# install recursive
install:	install-main examples
#ifdef QT
	$(INSTALL) -m 755 examples/xcmsevents/qcmsevents "$(DESTDIR)$(bindir)"
	mkdir -p "$(DESTDIR)$(desktopdir)"
	$(INSTALL) -m 644 "$(SRCDIR)/examples/xcmsevents/qcmsevents-applet.desktop" "$(DESTDIR)$(desktopdir)"
#endif
	$(INSTALL) -m 755 examples/oyranos_profile_graph/oyranos-profile-graph "$(DESTDIR)$(bindir)"
	echo ... $@ done

install-main:	install_bin install_linguas install_docu
	mkdir -p $(DESTDIR)$(pixmapdir)
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)_logo.png" "$(DESTDIR)$(pixmapdir)/$(TARGET)_logo.png"
	$(INSTALL) -m 644 "$(SRCDIR)/lcms_logo2.png" "$(DESTDIR)$(pixmapdir)/lcms_logo2.png"
	$(INSTALL) -m 644 "$(SRCDIR)/examples/xcmsevents/plugin-compicc.svg" "$(DESTDIR)$(pixmapdir)/qcmsevents.svg"
	$(INSTALL) -m 644 "$(SRCDIR)/$(TARGET)_logo.png" "$(DESTDIR)$(pixmapdir)/qcmsevents.png"

# synonymes
doc:		docu
install_doc:	install_docu

install_docu: docu
	echo Installing policy settings files ...
	-mkdir -p "$(DESTDIR)$(syscolordir)/$(settingsdirname)"
	-for i in `ls $(SRCDIR)/settings/*.policy.xml`; do \
	     $(INSTALL) -m 644 "$${i}" "$(DESTDIR)$(syscolordir)/$(settingsdirname)";\
	done
	echo ... installing policy settings files done
	mkdir -p "$(DESTDIR)$(docdir)"
	cd $(SRCDIR) && \
	  $(INSTALL) -m 644 $(DOKU) "$(DESTDIR)$(docdir)"
	mkdir -p "$(DESTDIR)$(mandir)/man1"
	cd $(SRCDIR) && \
	  $(INSTALL) -m 644 $(MAN1) "$(DESTDIR)$(mandir)/man1"
	mkdir -p "$(DESTDIR)$(mandir)/man3"
	cd $(SRCDIR) && \
	  $(INSTALL) -m 644 $(MAN3) "$(DESTDIR)$(mandir)/man3"
	mkdir -p "$(DESTDIR)$(docdir)/html/alpha"
	-$(INSTALL) -m 644 doc/html/* "$(DESTDIR)$(docdir)/html"
	-$(INSTALL) -m 644 doc_alpha/html/* "$(DESTDIR)$(docdir)/html/alpha"
	cd $(SRCDIR) && \
	  test -n "$(SCRIPTS)" && $(INSTALL) $(SCRIPTS) "$(DESTDIR)$(docdir)" || \
	  echo ""
	

install_gui:	$(FLTK_GUI)
	echo Installing UI ...
	mkdir -p "$(DESTDIR)$(bindir)"
#ifdef FLTK
	$(INSTALL) -m 755 $(FLTK_GUI) "$(DESTDIR)$(bindir)"
	(cd "$(DESTDIR)$(bindir)/"; $(POST) "$(DESTDIR)$(bindir)/$(FLTK_GUI)")
#endif

install_linguas:
	echo Install linguas ...
	for ling in $(LINGUAS); do \
	  echo "Installing po/$${ling}.gmo ..."; \
	  test -f po/$${ling}.gmo \
		&& (mkdir -p "$(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES"; \
            $(INSTALL) -m 644 po/$${ling}.gmo "$(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo" ) \
		|| (echo $${ling}.gmo is not yet ready ... skipping); \
	done;

# build a source distribution package
dist: targz
	test -d ../Archiv && mv -v ../Archiv/$(TARGET)-$(MTIME).tgz $(TARGET)-$(VERSION).tar.gz || mv -v $(TARGET)-$(MTIME).tgz $(TARGET)-$(VERSION).tar.gz
	tar xzf $(TARGET)-$(VERSION).tar.gz
	tar cjf $(TARGET)-$(VERSION).tar.bz2 $(TARGET)-$(VERSION)/
	$(RM) -R $(TARGET)-$(VERSION)

dist-gzip:	dist

# build a binary rpm package
rpm:	dist
	$(SRCDIR)/configure --prefix=/usr --rpm-only # generate the spec file
	mkdir -p rpmdir/BUILD \
	rpmdir/SPECS \
	rpmdir/SOURCES \
	rpmdir/SRPMS \
	rpmdir/RPMS/$(RPMARCH)
	$(COPY) -f $(TARGET)-$(VERSION).tar.bz2 rpmdir/SOURCES
	rpmbuild --clean -ba $(build_dir)/$(TARGET).spec --define "_topdir $$PWD/rpmdir"
	@echo "============================================================"
	@echo "Finished - the packages are in rpmdir/RPMS and rpmdir/SRPMS!"

deb:	dist
	$(SRCDIR)/configure --prefix=/usr --rpm-only
	mkdir -p debian/deb/DEBIAN
	tar xvzf $(TARGET)-$(VERSION).tar.gz
	(cd $(TARGET)-$(VERSION); \
	./configure --prefix=/usr; \
	make "DESTDIR=$(build_dir)/debian/deb/DEBIAN" install;)
	$(COPY) $(TARGET)-$(VERSION)/$(TARGET)_control $(build_dir)/debian/deb/DEBIAN/control
	$(RM) -R $(TARGET)-$(VERSION)
	dpkg -b $(build_dir)/debian/deb debian/$(TARGET)_$(VERSION)-$(RELEASE)_$(deb_arch).deb
	$(RM) -R $(build_dir)/debian/deb
	echo ... $@ done

# remove everything previously installed
uninstall:	uninstall_bin uninstall_docu uninstall_linguas
	echo ... $@ done

uninstall_bin:
	echo Uninstalling binaries ...
	$(RM)   "$(DESTDIR)$(bindir)/$(TARGET)-monitor"
	$(RM)   "$(DESTDIR)$(bindir)/$(TARGET)-monitor-daemon"
	$(RM)   "$(DESTDIR)$(bindir)/$(TARGET)-config"
#ifdef FLTK_GUI
	$(RM)   "$(DESTDIR)$(bindir)/$(FLTK_GUI)"
#endif
	$(RM)   "$(DESTDIR)$(bindir)/$(TARGET)-policy"
	$(RM)   "$(DESTDIR)$(bindir)/$(TARGET)-profile"
	$(RM)   "$(DESTDIR)$(bindir)/$(TARGET)-profiles"
	$(RM)   "$(DESTDIR)$(bindir)/$(TARGET)-profile-install"
	-$(RM)   "$(DESTDIR)$(bindir)/$(TARGET)-monitor-nvidia"
	$(RM)   "$(DESTDIR)$(libdir)/pkgconfig/$(TARGET).pc"
	for lib in $(LIBRARIES); do \
	    $(RM) "$(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT)" \
	          "$(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)" \
	          "$(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT)" \
	          "$(DESTDIR)$(libdir)/lib$${lib}.a"; \
	done
	for lib in $(META); do \
	   $(RM) "$(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT)" \
	         "$(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)" \
	         "$(DESTDIR)$(metadir)/lib$${lib}$(SO)$(LIBEXT)" \
	         "$(DESTDIR)$(metadir)/lib$${lib}.a"; \
	done
	for lib in $(CMMS); do \
	   $(RM) "$(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT)" \
	         "$(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT)" \
	         "$(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT)" \
	         "$(DESTDIR)$(cmmdir)/lib$${lib}.a"; \
	done
	$(RM)   -R "$(DESTDIR)$(includedir)/$(TARGET)"
	echo ... done uninstalling binaries
	


uninstall_linguas:
	echo Uninstalling linguas ...
	for ling in $(LINGUAS); do \
	  $(RM) "$(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo"; \
	done;
	echo ... done uninstalling linguas

uninstall_docu:
	echo Uninstalling docu ...
	for i in `ls settings/*.policy.xml`; do \
	  ii=`echo $${i} | sed s%settings\/%%g`; \
	  $(RM)   "$(DESTDIR)$(syscolordir)/$(settingsdirname)/$${ii}"; \
	done;
	for file in $(DOKU); do \
	  $(RM) "$(DESTDIR)$(docdir)/$$file"; \
	done
	for file in $(SCRIPTS); do \
	  $(RM) "$(DESTDIR)$(docdir)/$$file"; \
	done
	-$(RM) -R 2$(DESTDIR)$(docdir)/html"
	for file in $(MAN1); do \
	  $(RM) "$(DESTDIR)$(mandir)/man1/$$file"; \
	done
	for file in $(MAN3); do \
	  $(RM) "$(DESTDIR)$(mandir)/man3/$$file"; \
	done
	echo ... done uninstalling docu


# remove in this directory
distclean: clean clean-generator
	-$(RM) Makefile
	-$(RM) fl_i18n/Makefile
#ifdef LIB_XNVCTRL
	-$(RM) libXNVCtrl/Makefile \
		libXNVCtrl/NVCtrl.o libXNVCtrl.a
#endif
	-$(RM) mkdepend cobjects config.h oyranos.pc oyranos.spec
	-$(RM) config.log oyranos_version.h oyranos-config
	-$(RM) config.log.h config.tmp.sh testset.txt
	(cd fl_i18n/po; $(RM) -R ar de eo fr hy ja ru uk zh_CN)
	-$(RM) -R doc/html

clean-generator:
	-cd generator && $(MAKE) clean

clean:
	-$(RM) \
	$(CLEAN_OBJECTS) libXNVCtrl.a \
	$(TARGET)-policy \
	$(TARGET)-profile \
	$(TARGET)-profiles \
	$(TARGET)-monitor $(TARGET)-monitor-nvidia \
	test2 test_core test_object test tests/test_oyranos \
	$(FLTK_GUI) \
	oforms/$(TARGET)-xforms oforms/$(TARGET)-xforms-fltk \
	oforms/$(TARGET)-xforms-modules;
	for ling in $(LINGUAS); do \
	  test -f po/$${ling}.gmo \
        && $(RM) po/$${ling}.gmo || echo ""; \
	done;
	for lib in $(LIBRARIES); do \
	   $(RM) lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         lib$${lib}$(SO)$(LIBEXT) \
	         lib$${lib}.a; \
	done
	for lib in $(CMMS) $(META); do \
	   $(RM) lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         lib$${lib}$(SO)$(LIBEXT) \
	         lib$${lib}.a; \
	done
#ifdef LIB_XNVCTRL
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile clean)
#endif
	-$(RM) libXNVCtrl/libXNVCtrl.a
	-cd fl_i18n/ && $(MAKE) -f $(MAKEFILE_ARCH) clean
	-cd examples && $(MAKE) clean
	echo ... $@ done

# configure if the file config is not available
config.log.h:	$(CONFIG_FILES) ./config.log
	./config.log
	test -f error.tmp && ($(RM) error.tmp; exit 1)

# try to resolve dependencies
depend:	cdepend
	echo "setting up dependencies ..."
	echo "MAKEDEPEND_ISUP = 1" > mkdepend
	echo "#nicht editieren/dont edit - automatisch generiert von makefile.in" >> mkdepend
	-(for file in $(INCL_DEP); do \
	    incl_src="$${incl_src} $(SRCDIR)/$${file}"; done; \
	  $(MAKEDEPEND) -I./ -I$(SRCDIR) $(INCL) $${incl_src} >> mkdepend)
	-for file in $(SUB_OBJECTS); do \
	   obj=`echo $${file} | sed 's%modules/%% ; s%devices/%% ; s%FL/%% ; s%tests/%% ; s%oforms/%% ; s%oyjl/%% ; s%yajl/%%'`; \
	   cat mkdepend | sed s%$${obj}%$${file}% > mkdepend.tmp; \
	   mv mkdepend.tmp mkdepend; \
         done

cdepend:
	echo preparing dependency compilation ...
	echo "COBJECTS_ISUP = 1" > cobjects
	echo "#nicht editieren/dont edit - automatisch generiert von makefile.in" >> cobjects
	echo "" >> cobjects
	for i in $(COBJECTS); do \
	  echo "$${i}:	\$$(SRCDIR)/$${i}" | sed s/\.o\$$/.c/ >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CC) -I./ -I$$(SRCDIR) $$(CFLAGS) $$(INCL) -c -o $$*.o $$(SRCDIR)/$$*.c' >> cobjects; \
	  echo "" >> cobjects; \
	done
	for i in $(CPPOBJECTS); do \
	  echo "$${i}:	\$$(SRCDIR)/$${i}" | sed s/\.o\$$/.cpp/ >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CXX) -I./ -I$$(SRCDIR) $$(CXXFLAGS) $$(INCL) -c -o $$*.o $$(SRCDIR)/$$*.cpp' >> cobjects; \
	  echo "" >> cobjects; \
	done
	for i in $(CXXOBJECTS); do \
	  echo "$${i}:	\$$(SRCDIR)/$${i}" | sed s/\.o\$$/.cxx/ >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CXX) -I./ -I$$(SRCDIR) $$(CXXFLAGS) $$(INCL) $$(FLTK_H) -c -o $$*.o $$(SRCDIR)/$$*.cxx' >> cobjects; \
	  echo "" >> cobjects; \
	done


# Build commands and filename extensions...
.SUFFIXES:	.c .cxx .h .fl .o .po


.c.o:
	echo Compiling $(SRCDIR)/$< ...
	$(CC) -I. $(CFLAGS) $(INCL) -c -o $@ $(SRCDIR)/$<

.cxx.o:
	echo Compiling $(SRCDIR)/$< ...
	$(CXX) -I. $(CXXFLAGS) $(INCL) $(FLTK_H) -c -o $@ $(SRCDIR)/$<

.cpp.o:	mkdepend
	echo Compiling $(SRCDIR)/$< ...
	$(CXX) -I. $(CXXFLAGS) $(INCL) -c -o $@ $(SRCDIR)/$<

.fl.cxx:
	echo Expanding $< ...
	fluid -c $<
	-$(MOVE) `echo $*.cxx $*.h | sed s%$(SRCDIR)/%%g` $(SRCDIR)

.po:
	echo Generating $@ ...
	msgfmt $<


# smallest package covering the current directory
tgz:
	-test -d Entwickeln && $(RM) -r Entwickeln
	$(MAKE) "DESTDIR=Entwickeln" copy_files
	tar cf - Entwickeln/ \
	| gzip > $(TARGET)_$(MTIME).tgz
	-test -d ../Archiv && mv -v $(TARGET)_*.tgz ../Archiv
	-test -d Entwickeln && \
	test `pwd` != `(cd Entwickeln; pwd)` && \
	rm -R Entwickeln

# build the source package including the subdirectories
targz:
	test -d $(TARGET)-$(VERSION) && $(RM) -R $(TARGET)-$(VERSION) || echo -e "\c"
	$(MAKE) "DESTDIR=$(build_dir)/$(TARGET)-$(VERSION)" copy_files
	tar cf - $(TARGET)-$(VERSION)/ \
	| gzip > $(build_dir)/$(TARGET)-$(MTIME).tgz
	test -d $(build_dir)/$(TARGET)-$(VERSION) && \
	test `pwd` != `(cd $(build_dir)/$(TARGET)-$(VERSION); pwd)` && \
	$(RM) -R $(build_dir)/$(TARGET)-$(VERSION)
	test -d ../Archiv && mv -v $(TARGET)-*.tgz ../Archiv || echo "no copy"

# basic file set
copy_files:
	mkdir "$(DESTDIR)"
	cd fl_i18n && \
	  $(MAKE) "DESTDIR=$(DESTDIR)/fl_i18n" -f $(MAKEFILE_ARCH) copy_files
	-$(RM) "$(DESTDIR)/fl_i18n/Makefile"
	cd "$(SRCDIR)" && \
	  $(COPY) -R $(ALL_FILES) "$(DESTDIR)"
	$(COPY) $(CONFIG_FILES) "$(DESTDIR)"
	cd "$(SRCDIR)" && \
	  $(COPY) -R settings "$(DESTDIR)"
	#$(COPY) -r cmms "$(DESTDIR)"
#ifdef LIB_XNVCTRL
	-(cd libXNVCtrl && $(MAKE) -f Makefile clean)
	cd "$(SRCDIR)"
#endif
	mkdir "$(DESTDIR)/$(GENDIR)"
	cd "$(SRCDIR)" && \
	  $(COPY) $(CFILES_OBJECT) $(CHEADERS_OBJECT) \
	  $(CFILES_OBJECT_MODULES) $(CHEADERS_OBJECT_MODULES) \
	  "$(DESTDIR)/$(GENDIR)"
	mkdir "$(DESTDIR)/libXNVCtrl"
	$(COPY) -R $(SRCDIR)/libXNVCtrl "$(DESTDIR)"
	mkdir "$(DESTDIR)/modules"
	cd $(SRCDIR) && \
	  $(COPY) $(CFILES_MODULES) $(CPPFILES_MODULES) $(CHEADERS_MODULES) \
	  "$(DESTDIR)/modules/"
	mkdir "$(DESTDIR)/modules/devices"
	cd "$(SRCDIR)" && \
	  $(COPY) $(CFILES_MODULES_DEVICES) "$(DESTDIR)/modules/devices"
	mkdir "$(DESTDIR)/oforms"
	cd $(SRCDIR) && \
	  $(COPY) $(CFILES_OFORMS) $(CXXFILES_OFORMS_FLTK) $(CFILES_OFORMS_CLI)\
	  $(HEADERS_OFORMS_FLTK) $(CHEADERS_OFORMS) $(OFORMS_FILES) \
	  "$(DESTDIR)/oforms/"
	mkdir "$(DESTDIR)/tests"
	cd "$(SRCDIR)" && \
	  $(COPY) $(TEST_FILES) "$(DESTDIR)/tests"
	mkdir "$(DESTDIR)/examples"
	for exmpl in $(EXAMPLE_FILES); do \
	  mkdir -p "$(DESTDIR)/$${exmpl}"; rmdir "$(DESTDIR)/$${exmpl}"; \
	  cd "$(SRCDIR)" && \
	    $(COPY) -R $${exmpl} "$(DESTDIR)/$${exmpl}"; \
	done;
	mkdir $(DESTDIR)/FL
	cd "$(SRCDIR)" && \
	  $(COPY) $(Flmm_FILES) "$(DESTDIR)/FL"
	cd yajl && \
	  $(MAKE) "DESTDIR=$(DESTDIR)/yajl" -f $(MAKEFILE_ARCH) copy_files
	mkdir $(DESTDIR)/oyjl
	cd "$(SRCDIR)" && \
	  $(COPY) $(OYJL_FILES) "$(DESTDIR)/oyjl"
	mkdir "$(DESTDIR)/po"
	cd "$(SRCDIR)" && \
	  $(COPY) $(POT_FILE) "$(DESTDIR)/po"
	for ling in $(LINGUAS); do \
	  test -f "$(SRCDIR)/po/$${ling}.po" \
	  && $(COPY) "$(SRCDIR)/po/$${ling}.po" "$(DESTDIR)/po/"; \
	done;
	if [ -n "$(ELEKTRA_VERSION)" ] && \
	   [ -d "$(SRCDIR)/$(ELEKTRA_VERSION)" ] && \
	   [ -d $(build_dir)/$(ELEKTRA_VERSION) ]; then \
          cd $(build_dir)/$(ELEKTRA_VERSION); \
	  make dist-gzip; \
	  cd "$(DESTDIR)"; \
	  test -f $(build_dir)/$(ELEKTRA_VERSION)/$(ELEKTRA_VERSION).tar.gz && \
	    tar xzf $(build_dir)/$(ELEKTRA_VERSION)/$(ELEKTRA_VERSION).tar.gz; \
	else \
	  test -d "$(SRCDIR)/elektra-0.7.1/" && ( \
	    cp -avr "$(SRCDIR)/elektra-0.7.1/" "$(DESTDIR)" ) || \
	    echo "no elektra"; \
	fi
	echo ... $@ done

help:
	echo "... all :        build the binaries"
	echo "... docu :       generate documentation; requires doxygen"
	echo "  non default build targets:"
	echo "... test :       do a test"
	echo "... test2 :      build a second test binary"
	echo "... check :      do a test build and run it"
	echo "... examples :   try building the example directory"
	echo "... oforms :     try building the oforms directory"
	echo "... "
	echo "... install :    install the binaries, include files and data"
	echo "... install_bin: install only binaries"
	echo "... uninstall"
	echo "... clean :      remove binaries, object files and most processed data"
	echo "... distclean :  remove all files processed from configure scripts"
	echo "... rpm :        build RPM's"
	echo "... dist :       build a distribution tarball and place local"
	echo "... targz :      build a distribution tar ball"
	echo "... tgz :        build a development tar ball"
	echo "... copy_files : copy distribution files to a DESTDIR=xxx path"
	echo "... depend :     resolve dependencies"
	echo "  VARIABLES:"
	echo "... DESTDIR=\"/user/a/My Install Dir/\" install"
	echo "... BUILDDIR=../build_local"

# dependencies
include mkdepend
include cobjects

#ifndef MAKEDEPEND_ISUP
mkdepend: depend
#endif
#ifndef COBJECTS_ISUP
cobjects: cdepend
#endif

