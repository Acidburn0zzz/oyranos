
COLLECT = ar cru
RANLIB = ranlib
LNK = ln -s
POST = $(fltkconfig) --post
RPMARCH = `rpmbuild --showrc | awk '/^build arch/ {print $$4}'`
MSGCAT = msgcat
MSGFMT = msgfmt -c --statistics

docdir          = $(datadir)/doc/$(TARGET)
SRCDIR          = $(src_dir)
BUILDDIR        = $(build_dir)/

OY_MODULE_NAME  =_cmm_module
LIBRARIES = $(TARGET)
LIBSONAMEFULL = lib$(TARGET)$(SO).$(VERSION)$(LIBEXT)
LIBSONAME = lib$(TARGET)$(SO).$(VERSION_A)$(LIBEXT)
LIBSO = lib$(TARGET)$(SO)$(LIBEXT)
LIBNAME = lib$(TARGET).a
LIB_CMM_START = lib$(TARGET)
LIB_CMM_END = $(OY_MODULE_NAME)$(SO).$(VERSION)$(LIBEXT)

CMMS = \
	$(TARGET)_lcms$(OY_MODULE_NAME) \
	$(TARGET)_lraw$(OY_MODULE_NAME) \
	$(TARGET)_oyra$(OY_MODULE_NAME) \
	$(TARGET)_oydi$(OY_MODULE_NAME) \
	$(TARGET)_oyX1$(OY_MODULE_NAME) \
	$(TARGET)_CUPS$(OY_MODULE_NAME)
META = \
	$(TARGET)_oyIM$(OY_MODULE_NAME)
LIB_CMM_oyIM = $(LIB_CMM_START)_oyIM$(LIB_CMM_END)
LIB_CMM_oyX1 = $(LIB_CMM_START)_oyX1$(LIB_CMM_END)
LIB_CMM_CUPS = $(LIB_CMM_START)_CUPS$(LIB_CMM_END)
LIB_CMM_oydi = $(LIB_CMM_START)_oydi$(LIB_CMM_END)
LIB_CMM_lcms = $(LIB_CMM_START)_lcms$(LIB_CMM_END)
ifdef LRAW_LIBS
LIB_CMM_lraw = $(LIB_CMM_START)_lraw$(LIB_CMM_END)
endif
LIB_CMM_oyra = $(LIB_CMM_START)_oyra$(LIB_CMM_END)
LIBS_CMM = \
	$(LIB_CMM_oyIM) \
	$(LIB_CMM_oydi) \
	$(LIB_CMM_CUPS) \
	$(LIB_CMM_oyX1) \
	$(LIB_CMM_oyra) \
	$(LIB_CMM_lcms) \
	$(LIB_CMM_lraw)


#ifdef $(X11)
LIB_XNVCTRL = libXNVCtrl
LIB_XNVCTRL_NAME = $(LIB_XNVCTRL).a
#endif
LIBFL_I18N = fl_i18n/libfl_i18n.a


INCL= -I/usr/include -I$(includedir) -I/usr/X11R6/include -I$(SRCDIR) \
	$(LCMS_H) $(PNG_H) $(ELEKTRA_H) $(X_H) $(OS_INCL) $(LIBXML2_H)

LDLIBS = $(LDFLAGS) -L$(libdir) -L. \
	$(ELEKTRA_LIBS) $(LIBXML2_LIBS) -lc $(I18N_LIB)

MODULE_LDLIBS =	-l$(TARGET) $(lc) 


CHEADERS = \
	$(TARGET).h \
	$(TARGET)_alpha.h \
	$(TARGET)_alpha_internal.h \
	$(TARGET)_check.h \
	$(TARGET)_cmm.h \
	$(TARGET)_cmms.h \
	$(TARGET)_config.h \
	$(TARGET)_debug.h \
	$(TARGET)_definitions.h \
	$(TARGET)_elektra.h \
	$(TARGET)_helper.h \
	$(TARGET)_i18n.h \
	$(TARGET)_icc.h \
	$(TARGET)_io.h \
	$(TARGET)_internal.h \
	$(TARGET)_monitor.h \
	$(TARGET)_monitor_internal.h \
	$(TARGET)_sentinel.h \
	$(TARGET)_texts.h \
	$(TARGET)_xml.h \
	icc34.h \
	md5.h \
	lookup3.h
#	fl_$(TARGET).h
CFILES = \
	$(TARGET).c \
	$(TARGET)_check.c \
	$(TARGET)_cmm.c \
	$(TARGET)_cmms.c \
	$(TARGET)_elektra.c \
	$(TARGET)_helper.c \
	$(TARGET)_i18n.c \
	$(TARGET)_icc.c \
	$(TARGET)_io.c \
	$(TARGET)_misc.c \
	$(TARGET)_sentinel.c \
	$(TARGET)_texts.c \
	$(TARGET)_widgets.c \
	$(TARGET)_xml.c \
	md5.c \
	lookup3.c
CFILESC = \
	$(TARGET)_debug.c
CFILES_ALPHA = \
	$(TARGET)_alpha.c

CFILES_CMM_lcms = \
	modules/$(TARGET)_cmm_lcms.c
CPPFILES_CMM_lraw = \
	modules/$(TARGET)_cmm_lraw.cpp
CFILES_CMM_oydi = \
	modules/$(TARGET)_cmm_oydi.c
CFILES_CMM_oyX1 = \
	modules/devices/$(TARGET)_cmm_oyX1.c
CFILES_CMM_CUPS = \
	modules/devices/$(TARGET)_cmm_CUPS.c
CFILES_CMM_oyra = \
	modules/$(TARGET)_cmm_oyra.c \
	modules/$(TARGET)_cmm_oyra_image.c \
	modules/$(TARGET)_cmm_oyra_image_ppm.c
CFILES_CMM_oyIM = \
	modules/$(TARGET)_cmm_oyIM.c \
	modules/$(TARGET)_cmm_oyIM_icc.c \
	modules/$(TARGET)_cmm_oyIM_profile.c
CFILES_MODULES = \
	$(CFILES_CMM_lcms) $(CFILES_CMM_raw) \
	$(CFILES_CMM_oydi) $(CFILES_CMM_oyra) \
	$(CFILES_CMM_CUPS) $(CFILES_CMM_oyIM)
CPPFILES_MODULES = \
	$(CPPFILES_CMM_lraw)
CHEADERS_MODULES = \
	modules/$(TARGET)_cmm_oyIM.h \
	modules/$(TARGET)_cmm_oyra.h
CFILES_MODULES_DEVICES = \
	$(CFILES_CMM_oyX1) \
	$(CFILES_CMM_CUPS)

CFILES_MONI = \
	$(TARGET)_monitor.c
CFILES_MONI_NVIDIA = \
	$(TARGET)_monitor_nvidia.c
CFILES_GAMMA = \
	$(TARGET)_gamma.c
CFILES_POLICY = \
	$(TARGET)_policy.c \

CXXFILES_FLTK = \
	$(TARGET)_config_fltk.cxx
CXXFILES_Flmm = \
	FL/Flmm_Tabs.cxx

TEST_CPP = \
	tests/dl_test.cxx \
	tests/fltk_test.cxx \
	tests/dE2000_test.cpp \
	tests/gettext_test.cxx \
	tests/intptr_test.c \
	tests/lib_test.cxx \
	tests/library.c \
	tests/test_oyranos.c \
	tests/tiff_test.cxx
TEST_H = \
	tests/ciede2000testdata.h
CPPFILES =
CXXFILES =
TEST_FILES = $(TEST_CPP) $(TEST_H)
EXAMPLE_FILES = \
	examples/colour_desktop/colour_desktop.c \
	examples/dummy_device/oyranos_cmm_dDev.c \
	examples/image2pdf/image2pdf.c \
	examples/image_display/image_display.cpp \
	examples/xcmsevents/xcmsevents.c \
	examples/README \
	examples/makefile

MAN1 = oyranos-config-fltk.1 oyranos-monitor.1 oyranos-policy.1
MAN3 = oyranos.3 oyranos-config.3
ICONS = \
	$(TARGET)_logo.png \
	$(TARGET)_logo.h \
	lcms_logo2.png
DOKU =  AUTHORS \
        ChangeLog \
        COPYING \
        README
MIME_TYPES = \
	x-colour-cgats.xml \
	x-colour-icc.xml
DOC_TEMPLATES = \
	Doxyfile \
	doxymentation \
	doxygen.css \
	doxygen.footer \
	doxygen.header

LINGUAS_SRC = $(LING:.po=.gmo)
POT_FILE = po/$(TARGET).pot
POT_SCRIPT = oyranos_xml_to_po.sh

SCRIPTS = $(POT_SCRIPT)

FLTK_GUI = $(TARGET)-config-fltk

FLTK_FILES = \
	oyranos_config_fltk.fl \
	oyranos_config_fltk.h \

Flmm_FILES = \
	FL/Flmm_Tabs.H \
	$(CXXFILES_Flmm) \
	FL/AUTHORS \
	FL/ANNOUNCEMENT \
	FL/CHANGES \
	FL/COPYING \
	FL/CREDITS \
	FL/README

TOP_SOURCES = $(CPPFILES) $(CXXFILES) $(CFILES) $(CFILESC) \
		$(CFILES_MONI) $(CFILES_MONI_NVIDIA) $(CFILES_GAMMA) \
		$(CFILES_POLICY) $(CFILES_ALPHA) \
		$(CXXFILES_FLTK)
SOURCES =  \
		$(TOP_SOURCES) \
		$(CFILES_MODULES) $(CPPFILES_MODULES) $(CFILES_MODULES_DEVICES)

# we need these files to generate explicite targets for out of tree builds
COBJECTS = \
	$(CFILES:.c=.o) $(CFILESC:.c=.o) $(CFILES_ALPHA:.c=.o) \
	$(MONI_OBJECTS) \
	$(CMM_lcms_OBJECTS) \
	$(CMM_oydi_OBJECTS) \
	$(CMM_oyX1_OBJECTS) \
	$(CMM_CUPS_OBJECTS) \
	$(CMM_oyra_OBJECTS) \
	$(CMM_oyIM_OBJECTS) \
	$(TARGET)_gamma.o \
	$(TARGET)_policy.o \
	tests/test_oyranos.o test.o
CPPOBJECTS =	test2.o
#	$(CMM_lraw_OBJECTS)
CXXOBJECTS =	$(CXXFILES) $(CXXFILES_FLTK)

OBJECTS = $(CPPFILES:.cpp=.o) $(CXXFILES:.cxx=.o) $(CFILES:.c=.o) $(CFILESC:.c=.o) $(CFILES_ALPHA:.c=.o)
CMM_lcms_OBJECTS = $(CFILES_CMM_lcms:.c=.o)
CMM_lraw_OBJECTS = $(CPPFILES_CMM_lraw:.cpp=.o)
CMM_oydi_OBJECTS = $(CFILES_CMM_oydi:.c=.o)
CMM_oyX1_OBJECTS = $(CFILES_CMM_oyX1:.c=.o)
CMM_CUPS_OBJECTS = $(CFILES_CMM_CUPS:.c=.o)
CMM_oyra_OBJECTS = $(CFILES_CMM_oyra:.c=.o)
CMM_oyIM_OBJECTS = $(CFILES_CMM_oyIM:.c=.o)
MONI_OBJECTS = $(CPPFILES_MONI:.cpp=.o) $(CXXFILESMONI:.cxx=.o) $(CFILES_MONI:.c=.o)
Flmm_OBJECTS = $(CXXFILES_Flmm:.cxx=.o)
FLTK_OBJECTS = $(CXXFILES_FLTK:.cxx=.o) $(Flmm_OBJECTS)

CLEAN_OBJECTS = $(OBJECTS) \
	$(MONI_OBJECTS) \
	$(CMM_lcms_OBJECTS) \
	$(CMM_lraw_OBJECTS) \
	$(CMM_oydi_OBJECTS) \
	$(CMM_oyX1_OBJECTS) \
	$(CMM_CUPS_OBJECTS) \
	$(CMM_oyra_OBJECTS) \
	$(CMM_oyIM_OBJECTS) \
	$(FLTK_OBJECTS) \
	$(TARGET)_gamma.o \
	$(TARGET)_policy.o \
	test2.o tests/test_oyranos.o test.o

SUB_OBJECTS = \
	$(CMM_lcms_OBJECTS) \
	$(CMM_lraw_OBJECTS) \
	$(CMM_oydi_OBJECTS) \
	$(CMM_oyX1_OBJECTS) \
	$(CMM_CUPS_OBJECTS) \
	$(CMM_oyra_OBJECTS) \
	$(CMM_oyIM_OBJECTS) \
	$(Flmm_OBJECTS) \
	tests/test_oyranos.o

INCL_DEP = $(SOURCES) $(CXXFILES_Flmm) \
	test.c test2.cpp tests/test_oyranos.c

.PHONY:	docu examples

TEST  = test
TEST2 = test2

DEFAULT_PROFILES = base printing

CONFIG_FILES = \
	$(SRCDIR)/configure \
	$(SRCDIR)/configure_tests.sh \
	$(SRCDIR)/makefile.in \
	$(SRCDIR)/$(TARGET).pc.in \
	$(SRCDIR)/$(TARGET).spec.in \
	$(SRCDIR)/$(TARGET)-icc.spec.in \
	$(SRCDIR)/$(TARGET)-config.in

ALL_FILES = \
	$(DOKU) \
	$(ICONS) \
	$(MIME_TYPES) \
	$(TOP_SOURCES) \
	$(CHEADERS) \
	$(SCRIPTS) \
	$(MAN1) $(MAN3) \
	$(DOC_TEMPLATES) \
	$(FLTK_FILES) \
	test.c test2.cpp


# build all what is needed to run the libraries, helpers
all:	config.log.h mkdepend \
	$(LIBSONAMEFULL) \
	$(TARGET)-monitor $(X11) \
	$(LIBS_CMM) \
	$(TARGET)-policy $(FLTK_GUI) \
	$(LINGUAS_SRC)
	test -d default_profiles && \
	( cd default_profiles; \
	for prof in $(DEFAULT_PROFILES); do \
	     test -d $${prof} && \
	         echo "$${prof} profiles will be included" || \
	         echo "$${prof} profile directory is not found - ignoring"; \
	done; ) || echo "default_profiles directory is not found - ignoring"
	echo ... $@ done

$(X11): $(TARGET)-monitor-nvidia

# get time stamp
MTIME   := $(shell date +%y%m%d.%H%M%S)

# this is a test
time:
	echo $(MTIME)

# build all objects and libraries, link the headers to $(TARGET)
$(LIBSONAMEFULL):	$(OBJECTS) $(LIBNAME) $(DEVEL_LIBS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(libdir)/$@ \
	-o $(LIBSONAMEFULL) \
	$(OBJECTS) \
	-L$(libdir) $(LDLIBS) $(m)
	$(RM)  $(LIBSONAME)
	$(LNK) $(LIBSONAMEFULL) $(LIBSONAME)
	$(RM)  $(LIBSO)
	$(LNK) $(LIBSONAMEFULL) $(LIBSO)

$(LIB_CMM_lcms): $(CMM_lcms_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(cmmdir)/$@ \
	-o $@ \
	$(CMM_lcms_OBJECTS) $(LCMS_LIBS) $(MODULE_LDLIBS)
	$(RM)  lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lcms$(OY_MODULE_NAME)$(SO)$(LIBEXT)

modules/oyranos_cmm_lraw.o:	$(SRCDIR)/modules/oyranos_cmm_lraw.cpp
	echo Compiling modules/oyranos_cmm_lraw.o without "--pedantic" ...
	$(CXX) -I./ -I$(SRCDIR) `echo $(CXXFLAGS) | sed s/--pedantic//g` -c -o $*.o $(SRCDIR)/$*.cpp

$(LIB_CMM_lraw): $(CMM_lraw_OBJECTS)
	echo Linking $@ ...
	$(CXX) -I./ $(CXXFLAGS) $(LINK_FLAGS_DYNAMIC)$(cmmdir)/$@ \
	-o $@ \
	$(CMM_lraw_OBJECTS) $(LRAW_LIBS) $(MODULE_LDLIBS)
	$(RM)  lib$(TARGET)_lraw$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lraw$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_lraw$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_lraw$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oydi): $(CMM_oydi_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(cmmdir)/$@ \
	-o $@ \
	$(CMM_oydi_OBJECTS) $(X11_LIBS) $(Xcolor) $(Xfixes) $(MODULE_LDLIBS)
	$(RM)  lib$(TARGET)_oydi$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oydi$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oydi$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oydi$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oyX1): $(CMM_oyX1_OBJECTS) $(MONI_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(cmmdir)/$@ \
	-o $@ \
	$(CMM_oyX1_OBJECTS) $(MONI_OBJECTS) $(X11_LIBS) $(MODULE_LDLIBS)
	$(RM)  lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyX1$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_CUPS): $(CMM_CUPS_OBJECTS)
	echo Linking $@ ...
	-$(CC) $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(cmmdir)/$@ \
	-o $@ \
	$(CMM_CUPS_OBJECTS) $(MODULE_LDLIBS) -lcups
	$(RM)  lib$(TARGET)_CUPS$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_CUPS$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_CUPS$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_CUPS$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oyra): $(CMM_oyra_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(cmmdir)/$@ \
	-o $@ \
	$(CMM_oyra_OBJECTS) $(MODULE_LDLIBS)
	$(RM)  lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyra$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_CMM_oyIM): $(CMM_oyIM_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) $(LINK_FLAGS_DYNAMIC)$(metadir)/$@ \
	-o $@ \
	$(CMM_oyIM_OBJECTS) $(MODULE_LDLIBS)
	$(RM)  lib$(TARGET)_oyIM$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyIM$(OY_MODULE_NAME)$(SO).$(VERSION_A)$(LIBEXT)
	$(RM)  lib$(TARGET)_oyIM$(OY_MODULE_NAME)$(SO)$(LIBEXT)
	$(LNK) $@ lib$(TARGET)_oyIM$(OY_MODULE_NAME)$(SO)$(LIBEXT)

$(LIB_XNVCTRL).a:
	echo Building $@ ...
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile)
	test -L $(LIB_XNVCTRL).a || $(LNK) $(LIB_XNVCTRL)/$(LIB_XNVCTRL).a .

# the twinview library
$(TARGET)-monitor-nvidia:	$(SRCDIR)/$(TARGET)_monitor_nvidia.c $(LIB_XNVCTRL).a $(MONI_OBJECTS)
	echo Linking $@ ...
	-$(CC) -I./ $(CFLAGS) $(INCL) $(SRCDIR)/$(TARGET)_monitor_nvidia.c \
	-I$(SRCDIR)/$(LIB_XNVCTRL) \
	-o $(TARGET)-monitor-nvidia $(MONI_OBJECTS) -L./ \
	$(LDLIBS) $(X11_LIBS) \
	-L./$(LIB_XNVCTRL) -lXNVCtrl $(LIBSONAMEFULL) \
	$(LINK_LIB_PATH)

$(TARGET)_config_fltk.o:	$(SRCDIR)/$(TARGET)_config_fltk.cxx
	echo Compiling $*.cxx
	$(CXX) -I./ -I$(SRCDIR) $(CXXFLAGS) $(FLTK_H) -c $<
FL/Flmm_Tabs.o:	$(SRCDIR)/FL/Flmm_Tabs.cxx
	echo Compiling FL/Flmm_Tabs.cxx
	$(CXX) -I./ -I./FL -I$(SRCDIR)/FL $(CXXFLAGS) $(FLTK_H) -o $@ -c $<

# general configuration tool example
$(TARGET)-config-fltk:	$(FLTK_OBJECTS) $(LIBFL_I18N)
	echo Linking $@ ...
	$(CXX) -I./ $(CXXFLAGS) -o $(TARGET)-config-fltk \
	$(FLTK_OBJECTS) \
	$(LIBSONAMEFULL) $(LINK_LIB_PATH) \
	$(LDLIBS) $(FLTK_LIBS) $(PNG_LIBS) $(I18N_LIB) $(LIBFL_I18N)
	$(REZ)

fltk-gui:	oyranos_config_fltk.o

$(LIBNAME):	$(OBJECTS)
	echo Linking $@ ...
	test -f $(LIBNAME) && $(RM) $(LIBNAME) || echo ""
	$(COLLECT) $(LINK_FLAGS_STATIC) $(LIBNAME) \
		$(OBJECTS)
	$(RANLIB) $(LIBNAME)

# the monitor profile tool
$(TARGET)-monitor:	$(LIBSONAMEFULL) $(TARGET)_gamma.o
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) -o $(TARGET)-monitor \
	$(TARGET)_gamma.o \
	$(LDLIBS) $(LIBSONAMEFULL) $(LINK_LIB_PATH)

$(TARGET)-policy:	$(LIBSONAMEFULL) $(TARGET)_policy.o
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS) -o $(TARGET)-policy \
	$(TARGET)_policy.o \
	$(LIBSONAMEFULL) $(LDLIBS) $(LINK_LIB_PATH)


test2:	test2.o $(LIBSONAMEFULL)
	echo Linking dynamic $@ ...
	$(CXX) -I./ `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -o test2_dyn \
	test2.o -L./ `./oyranos-config --ldflags` $(LCMS_LIBS)
	echo Linking static $@ ...
	$(CXX) -I./ `echo $(CXXFLAGS) | sed s/-0.//g` -g -Wall -o test2 \
	test2.o -L./ `./oyranos-config --ldstaticflags` $(LCMS_LIBS)

$(SRCDIR)/test2.c.c:
	test -f $(SRCDIR)/test2.c.c || ln -s $(SRCDIR)/test2.cpp $(SRCDIR)/test2.c.c

test2.c.o:	$(SRCDIR)/test2.c.c
	$(CC) -I./ -I$(SRCDIR) $(CFLAGS) -c -o $*.o $(SRCDIR)/$*.c
test2c:	test2.c.o
	$(CC) -I./ `echo $(CFLAGS) | sed s/-0.//g` -g -Wall -o test2c \
	test2.c.o -L./ `./oyranos-config --ldstaticflags` $(LCMS_LIBS)

check:	all install_bin install-icc tests/test_oyranos $(TEST2) examples
	echo current git version is:
	n=0; for i in `cd $(SRCDIR); git rev-list master`; do if [ $${n} -eq 0 ]; then echo git id:$${i}; fi; n=1; done
	echo run tests/test_oyranos
	LD_LIBRARY_PATH=./:$(libdir):$${LD_LIBRARY_PATH} tests/test_oyranos

examples:
	cd examples && ($(MAKE) clean; INCLUDE=-I$(includedir) SRCDIR=$(SRCDIR)/examples/ $(MAKE))

test:	test.o
	$(CC) -I./ $(CFLAGS) -o test \
	test.o \
	$(LIBSONAMEFULL) $(LDLIBS) $(LINK_SRC_PATH)

tests/test_oyranos:	tests/test_oyranos.o
	$(RM) tests/test_oyranos.o
	$(MAKE) tests/test_oyranos.o
	echo Linking tests/test_oyranos
	$(CC) -I./ $(CFLAGS) -o tests/test_oyranos \
        tests/test_oyranos.o \
        $(LIBSONAMEFULL) $(LDLIBS) $(LINK_SRC_PATH)

$(LIBFL_I18N):	fl_i18n/Makefile
	cd fl_i18n/ && $(MAKE) -f $(MAKEFILE_ARCH)

$(LINGUAS_SRC):	$(SRCDIR)/$(POT_FILE)
	echo Linguas ... $(@:.gmo=)
	mkdir -p po/
	for ling in $(@:.gmo=); do \
	  lingua=`echo $${ling} | sed s%po/%%g | sed s%$(SRCDIR)/%%g`; \
	  echo "update po/$${lingua}.gmo ..."; \
	  test -f $(SRCDIR)/$${ling}.po \
        && ($(MSGFMT) -o po/$${lingua}.gmo $(SRCDIR)/$${ling}.po; \
            if [ ! -d po/$${lingua} ]; then \
              mkdir po/$${lingua}; \
            fi; \
            if [ ! -d po/$${lingua}/LC_MESSAGES ]; then \
              mkdir po/$${lingua}/LC_MESSAGES; \
            fi; \
            test -L po/$${lingua}/LC_MESSAGES/$(TARGET).mo \
              && $(RM) po/$${lingua}/LC_MESSAGES/$(TARGET).mo \
              || echo po/$${lingua}/LC_MESSAGES/$(TARGET).mo nicht gefunden; \
            ln -s ../../$${lingua}.gmo po/$${lingua}/LC_MESSAGES/$(TARGET).mo;) \
        || (echo $(SRCDIR)/$${ling}.po is not yet ready ... skipping) \
	done;

$(SRCDIR)/$(POT_FILE):
	echo Generating $(SRCDIR)/$(POT_FILE) ...
	mkdir -p $(SRCDIR)/po
	test `which xgettext` && (cd $(SRCDIR); \
	  xgettext --force-po $(XGETTEXT_OPTIONS) \
	   -d $(TARGET) \
	   -o $(SRCDIR)/$(POT_FILE) -c \
	   $(SOURCES) $(CHEADERS)) \
	|| echo -e "\c"
	-$(MSGCAT) $(SRCDIR)/po/*.pot -o $(SRCDIR)/po/oyranos.pot
	for ling in $(SRCDIR)/po/*.po; do \
	  lingua=`echo $${ling} | sed 's%$(SRCDIR)/po/%%g ; s%.po%%'`; \
	  test `which $(MSGMERGE)` && \
	         $(MSGMERGE) $(MSGMERG_OPTS) $(SRCDIR)/po/$${lingua}.po \
	         $(SRCDIR)/$(POT_FILE) || \
	    echo -e "\c"; \
	done;
	echo ... $(SRCDIR)/$(POT_FILE) done


docu:
	echo Documentation ...
	test -f Doxyfile || ($(COPY) $(SRCDIR)/Doxyfile . && \
	                     echo "INPUT = $(SRCDIR)" >> Doxyfile && \
			     ln -s $(SRCDIR)/doxygen.header $(SRCDIR)/doxygen.footer $(SRCDIR)/doxygen.css $(SRCDIR)/doxymentation .)
	test -n 'which doxygen' && (doxygen Doxyfile; $(COPY) $(SRCDIR)/$(TARGET)_logo.png doc/html/) || echo "Will not create Documentation because doxygen is missing"
	test -d doc_intern/html/ && $(COPY) $(SRCDIR)/$(TARGET)_logo.png doc_intern/html/ ||\
	 echo ""
	echo ... Documentation done

# the copy part for this directory level
install_bin:	all uninstall_bin install_gui
	echo Installing binaries ...
	mkdir -p $(DESTDIR)$(bindir)
	$(INSTALL) -m 755 $(TARGET)-config     $(DESTDIR)$(bindir)
	-$(INSTALL) -m 755 $(TARGET)-monitor    $(DESTDIR)$(bindir)
	-$(INSTALL) -m 755 $(TARGET)-policy     $(DESTDIR)$(bindir)
	-$(INSTALL) -m 755 $(TARGET)-monitor-nvidia $(DESTDIR)$(bindir)
	mkdir -p $(DESTDIR)$(libdir)
	mkdir -p $(DESTDIR)$(libdir)/pkgconfig
	mkdir -p $(DESTDIR)$(metadir)
	mkdir -p $(DESTDIR)$(cmmdir)
	$(INSTALL) -m 644 $(TARGET).pc $(DESTDIR)$(libdir)/pkgconfig/
	for lib in $(LIBRARIES); do \
	   test -f lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		($(INSTALL) -m 755 lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(libdir) \
		); \
	   test -f lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		(test -L $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) && $(RM) $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		test -L $(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT) && ( \
		$(RM) $(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT)) ; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT); \
		); \
	   if [ "$(STATIC)" = "" ]; then test -f lib$${lib}.a && \
		($(INSTALL) -m 644 lib$${lib}.a $(DESTDIR)$(libdir);\
		$(RANLIB) $(DESTDIR)$(libdir)/lib$${lib}.a \
		) || echo ""; \
           fi; \
	done
	for lib in $(META); do \
	   test -f lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		($(INSTALL) -m 755 lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(metadir) \
		); \
	   test -f NOT_lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		(test -L $(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) && $(RM) $(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		test -L $(DESTDIR)$(metadir)/lib$${lib}$(SO)$(LIBEXT) && ( \
		$(RM) $(DESTDIR)$(metadir)/lib$${lib}$(SO)$(LIBEXT)) ; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(metadir)/lib$${lib}$(SO)$(LIBEXT); \
		); \
	   test -f lib$${lib}.a && \
		($(INSTALL) -m 644 lib$${lib}.a $(DESTDIR)$(metadir);\
		$(RANLIB) $(DESTDIR)$(metadir)/lib$${lib}.a \
		) || echo ""; \
	done
	for lib in $(CMMS); do \
	   test -f lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		($(INSTALL) -m 755 lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(cmmdir) \
		); \
	   test -f NOT_lib$${lib}$(SO).$(VERSION)$(LIBEXT) && \
		(test -L $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) && $(RM) $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT); \
		test -L $(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT) && ( \
		$(RM) $(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT)) ; \
		$(LNK)  lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
		$(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT); \
		); \
	   test -f lib$${lib}.a && \
		($(INSTALL) -m 644 lib$${lib}.a $(DESTDIR)$(cmmdir);\
		$(RANLIB) $(DESTDIR)$(cmmdir)/lib$${lib}.a \
		) || echo ""; \
	done
	test -d $(DESTDIR)$(includedir)/$(TARGET) || mkdir -p $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(SRCDIR)/$(TARGET).h $(DESTDIR)$(includedir)/$(TARGET)
	-$(INSTALL) -m 644 $(SRCDIR)/$(TARGET)_alpha.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(SRCDIR)/$(TARGET)_cmm.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(SRCDIR)/$(TARGET)_config.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(SRCDIR)/$(TARGET)_definitions.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(SRCDIR)/icc34.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(SRCDIR)/$(TARGET)_icc.h $(DESTDIR)$(includedir)/$(TARGET)
	$(INSTALL) -m 644 $(TARGET)_version.h $(DESTDIR)$(includedir)/$(TARGET)
	echo ... binary Installation finished

# install recursive
install:	uninstall install-main install-icc
	echo ... $@ done

install-main:	install_bin install_mime install_linguas install_docu

install-icc:	install_profiles

install_mime:
	echo installing mime types into $(DESTDIR)$(datadir)/mime/packages ...
	mkdir -p $(DESTDIR)$(datadir)/mime/packages/
	for mime in $(MIME_TYPES); do \
	  $(INSTALL) -m 644 $(SRCDIR)/$${mime} \
	    $(DESTDIR)$(datadir)/mime/packages/$${mime}; \
	done
	echo adding icons to $(DESTDIR)$(pixmapdir) ...
	mkdir -p $(DESTDIR)$(pixmapdir)
	$(INSTALL) -m 644 $(SRCDIR)/$(TARGET)_logo.png $(DESTDIR)$(pixmapdir)/$(TARGET)_logo.png
	$(INSTALL) -m 644 $(SRCDIR)/lcms_logo2.png $(DESTDIR)$(pixmapdir)/lcms_logo2.png
	echo ... done installing mime types

# synonymes
doc:		docu
install_doc:	install_docu

install_docu: docu
	echo Installing policy settings files ...
	-mkdir -p $(DESTDIR)$(syscolordir)/$(settingsdirname)
	-$(INSTALL) -m 644 $(SRCDIR)/settings/*.policy.xml $(DESTDIR)$(syscolordir)/$(settingsdirname)
	mkdir -p $(DESTDIR)$(docdir)
	cd $(SRCDIR) && \
	  $(INSTALL) -m 644 $(DOKU) $(DESTDIR)$(docdir)
	mkdir -p $(DESTDIR)$(mandir)/man1
	cd $(SRCDIR) && \
	  $(INSTALL) -m 644 $(MAN1) $(DESTDIR)$(mandir)/man1
	mkdir -p $(DESTDIR)$(mandir)/man3
	cd $(SRCDIR) && \
	  $(INSTALL) -m 644 $(MAN3) $(DESTDIR)$(mandir)/man3
	mkdir -p $(DESTDIR)$(docdir)/html
	-$(INSTALL) -m 644 doc/html/* $(DESTDIR)$(docdir)/html
	cd $(SRCDIR) && \
	  $(INSTALL) $(SCRIPTS) $(DESTDIR)$(docdir)
	

install_gui:	$(TARGET)-config-fltk
	echo Installing UI ...
	mkdir -p $(DESTDIR)$(bindir)
	$(INSTALL) -m 755 $(TARGET)-config-fltk $(DESTDIR)$(bindir)
	(cd $(DESTDIR)$(bindir)/; $(POST) $(DESTDIR)$(bindir)/$(TARGET)-config-fltk)

install_profiles:
	test -d default_profiles && \
	( cd default_profiles; \
	for prof in $(DEFAULT_PROFILES); do \
	     test -d $${prof} && \
	         (cd $${prof}; $(MAKE) DESTDIR="$(DESTDIR)" SYSCOLORDIR=$(syscolordir) ICCDIRNAME=$(iccdirname) install) || \
	         echo "$${prof} profile directory is not found - ignoring"; \
	done; ) || echo "default_profiles directory is not found - ignoring"

install_linguas:
	echo Install linguas ...
	for ling in $(LINGUAS); do \
	  echo "Installing po/$${ling}.gmo ..."; \
	  test -f po/$${ling}.gmo \
		&& (mkdir -p $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES; \
            $(INSTALL) -m 644 po/$${ling}.gmo $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo ) \
		|| (echo $${ling}.gmo is not yet ready ... skipping); \
	done;

# build a source distribution package
dist: targz
	test -d ../Archiv && mv -v ../Archiv/$(TARGET)-$(MTIME).tgz $(TARGET)-$(VERSION).tar.gz || mv -v $(TARGET)-$(MTIME).tgz $(TARGET)-$(VERSION).tar.gz

dist-gzip:	dist

# build a binary rpm package
rpm:	dist
	$(SRCDIR)/configure --prefix=/usr --rpm-only # generate the spec file
	mkdir -p rpmdir/BUILD \
	rpmdir/SPECS \
	rpmdir/SOURCES \
	rpmdir/SRPMS \
	rpmdir/RPMS/$(RPMARCH)
	cp -f $(TARGET)-$(VERSION).tar.gz rpmdir/SOURCES
	rpmbuild --clean -ba $(build_dir)/$(TARGET).spec --define "_topdir $$PWD/rpmdir"
	rpmbuild --clean -ba $(build_dir)/$(TARGET)-icc.spec --define "_topdir $$PWD/rpmdir"
	@echo "============================================================"
	@echo "Finished - the packages are in rpmdir/RPMS and rpmdir/SRPMS!"

# remove everything previously installed
uninstall:	uninstall_bin uninstall_docu uninstall-icc uninstall_linguas
	echo ... $@ done

uninstall_bin:
	echo Uninstalling binaries ...
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-monitor
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-config
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-config-fltk
	$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-policy
	-$(RM)   $(DESTDIR)$(bindir)/$(TARGET)-monitor-nvidia
	$(RM)   $(DESTDIR)$(libdir)/pkgconfig/$(TARGET).pc
	for lib in $(LIBRARIES); do \
	    $(RM) $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	          $(DESTDIR)$(libdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	          $(DESTDIR)$(libdir)/lib$${lib}$(SO)$(LIBEXT) \
	          $(DESTDIR)$(libdir)/lib$${lib}.a; \
	done
	for lib in $(META); do \
	   $(RM) $(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         $(DESTDIR)$(metadir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         $(DESTDIR)$(metadir)/lib$${lib}$(SO)$(LIBEXT) \
	         $(DESTDIR)$(metadir)/lib$${lib}.a; \
	done
	for lib in $(CMMS); do \
	   $(RM) $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         $(DESTDIR)$(cmmdir)/lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         $(DESTDIR)$(cmmdir)/lib$${lib}$(SO)$(LIBEXT) \
	         $(DESTDIR)$(cmmdir)/lib$${lib}.a; \
	done
	$(RM)   -R $(DESTDIR)$(includedir)/$(TARGET)
	echo ... done uninstalling binaries
	
uninstall_profiles:
	echo Uninstalling profiles ...
	test -d default_profiles && \
	(  cd default_profiles; \
	   for prof in $(DEFAULT_PROFILES); do \
	     test -d $${prof} && \
	         (cd $${prof}; $(MAKE)  DESTDIR="$(DESTDIR)" SYSCOLORDIR=$(syscolordir) ICCDIRNAME=$(iccdirname) uninstall) || \
	         echo "$${prof} profile directory is not found - ignoring"; \
	   done; \
        ) || echo "no profile directory found"
	echo ... done uninstalling profiles

uninstall-icc:	uninstall_mime uninstall_profiles

uninstall_mime:
	echo uninstalling mime types from $(DESTDIR)$(datadir)/mime/packages ...
	for mime in $(MIME_TYPES); do \
	  $(RM) $(DESTDIR)$(datadir)/mime/packages/$${mime}; \
	done
	echo removing icons from $(DESTDIR)$(pixmapdir) ...
	$(RM) $(DESTDIR)$(pixmapdir)/$(TARGET)_logo.png
	$(RM) $(DESTDIR)$(pixmapdir)/lcms_logo2.png
	echo ... done uninstalling mime types

uninstall_linguas:
	echo Uninstalling linguas ...
	for ling in $(LINGUAS); do \
	  $(RM) $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo; \
	done;
	echo ... done uninstalling linguas

uninstall_docu:
	echo Uninstalling docu ...
	for i in settings/*.policy.xml; do \
	  ii=`echo $${i} | sed s%settings\/%%g`; \
	  $(RM)   $(DESTDIR)$(syscolordir)/$(settingsdirname)/$${ii}; \
	done;
	for file in $(DOKU); do \
	  $(RM) $(DESTDIR)$(docdir)/$$file; \
	done
	for file in $(SCRIPTS); do \
	  $(RM) $(DESTDIR)$(docdir)/$$file; \
	done
	-$(RM) -R $(DESTDIR)$(docdir)/html
	for file in $(MAN1); do \
	  $(RM) $(DESTDIR)$(mandir)/man1/$$file; \
	done
	for file in $(MAN3); do \
	  $(RM) $(DESTDIR)$(mandir)/man3/$$file; \
	done
	echo ... done uninstalling docu


# remove in this directory
distclean: clean
	-$(RM) Makefile
	-$(RM) fl_i18n/Makefile
	-$(RM) libXNVCtrl/Makefile libXNVCtrl/libXNVCtrl.a \
		libXNVCtrl/NVCtrl.o libXNVCtrl.a
	-$(RM) default_profiles/base/Makefile
	-$(RM) default_profiles/printing/Makefile
	-$(RM) mkdepend cobjects config.h oyranos.pc oyranos.spec
	-$(RM) oyranos-icc.spec config.log oyranos_version.h oyranos-config
	-$(RM) config.log.h config.tmp.sh testset.txt
	(cd fl_i18n/po; $(RM) -R ar de eo fr hy ja ru uk zh_CN)
	-$(RM) -R doc/html

clean:
	-$(RM) \
	$(CLEAN_OBJECTS) \
	$(TARGET)-policy \
	$(TARGET)-monitor $(TARGET)-monitor-nvidia \
	test2 test tests/test_oyranos \
	$(TARGET)-config-fltk; \
	for ling in $(LINGUAS); do \
	  test -f po/$${ling}.gmo \
        && $(RM) po/$${ling}.gmo; \
	done;
	for lib in $(LIBRARIES); do \
	   $(RM) lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         lib$${lib}$(SO)$(LIBEXT) \
	         lib$${lib}.a; \
	done
	for lib in $(CMMS) $(META); do \
	   $(RM) lib$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         lib$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         lib$${lib}$(SO)$(LIBEXT) \
	         lib$${lib}.a; \
	done
ifdef $(LIB_XNVCTRL)
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile clean)
endif
	-cd fl_i18n/ && $(MAKE) -f $(MAKEFILE_ARCH) clean
	-cd examples && $(MAKE) clean
	echo ... $@ done

# configure if the file config is not available
config.log.h:	$(CONFIG_FILES) ./config.log
	./config.log

# try to resolve dependencies
depend:	cdepend
	echo "setting up dependencies ..."
	echo "MAKEDEPEND_ISUP = 1" > mkdepend
	echo "#nicht editieren/dont edit - automatisch generiert von makefile.in" >> mkdepend
	-(for file in $(INCL_DEP); do \
	    incl_src="$${incl_src} $(SRCDIR)/$${file}"; done; \
	  $(MAKEDEPEND) -I./ -I$(SRCDIR) $(INCL) $${incl_src} >> mkdepend)
	-for file in $(SUB_OBJECTS); do \
	   obj=`echo $${file} | sed 's%modules/%% ; s%devices/%% ; s%FL/%% ; s%tests/%%'`; \
	   cat mkdepend | sed s%$${obj}%$${file}% > mkdepend.tmp; \
	   mv mkdepend.tmp mkdepend; \
         done

cdepend:
	echo preparing dependency compilation ...
	echo "COBJECTS_ISUP = 1" > cobjects
	echo "#nicht editieren/dont edit - automatisch generiert von makefile.in" >> cobjects
	echo "" >> cobjects
	for i in $(COBJECTS); do \
	  echo "$${i}:	\$$(SRCDIR)/$${i}" | sed s/\.o\$$/.c/ >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CC) -I./ -I$$(SRCDIR) $$(CFLAGS) -c -o $$*.o $$(SRCDIR)/$$*.c' >> cobjects; \
	  echo "" >> cobjects; \
	done
	for i in $(CPPOBJECTS); do \
	  echo "$${i}:	\$$(SRCDIR)/$${i}" | sed s/\.o\$$/.cpp/ >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CXX) -I./ -I$$(SRCDIR) $$(CXXFLAGS) -c -o $$*.o $$(SRCDIR)/$$*.cpp' >> cobjects; \
	  echo "" >> cobjects; \
	done


# Build commands and filename extensions...
.SUFFIXES:	.c .cxx .h .fl .o .po


.c.o:
	echo Compiling $(SRCDIR)/$< ...
	$(CC) -I. $(CFLAGS) -c -o $@ $(SRCDIR)/$<

.cxx.o:
	echo Compiling $(SRCDIR)/$< ...
	$(CXX) -I. $(CXXFLAGS) $(FLTK_H) -c -o $@ $(SRCDIR)/$<

.cpp.o:	mkdepend
	echo Compiling $(SRCDIR)/$< ...
	$(CXX) -I. $(CXXFLAGS) -c -o $@ $(SRCDIR)/$<

.fl.cxx:
	echo Expanding $(SRCDIR)/$< ...
	fluid -c $(SRCDIR)/$<

.po:
	echo Generating $@ ...
	msgfmt $<


# smallest package covering the current directory
tgz:
	-test -d Entwickeln && $(RM) -r Entwickeln
	$(MAKE) DESTDIR=Entwickeln copy_files
	tar cf - Entwickeln/ \
	| gzip > $(TARGET)_$(MTIME).tgz
	-test -d ../Archiv && mv -v $(TARGET)_*.tgz ../Archiv
	-test -d Entwickeln && \
	test `pwd` != `(cd Entwickeln; pwd)` && \
	rm -R Entwickeln

# build the source package including the subdirectories
targz:
	test -d $(TARGET)-$(VERSION) && $(RM) -R $(TARGET)-$(VERSION) || echo -e "\c"
	$(MAKE) DESTDIR=$(build_dir)/$(TARGET)-$(VERSION) copy_files
	cd default_profiles; \
	for prof in $(DEFAULT_PROFILES); do \
	     test -d $${prof} && \
	         mkdir -p ../$(TARGET)-$(VERSION)/default_profiles/$${prof}; \
	         (cd $${prof}; echo bin in `pwd`; $(MAKE) DESTDIR=$(build_dir)/$(TARGET)-$(VERSION)/default_profiles/$${prof} copy_files; $(RM) $(build_dir)/$(TARGET)-$(VERSION)/default_profiles/$${prof}/Makefile) || \
	         echo "$${prof} profile directory is not found - ignoring"; \
	done;
	tar cf - $(TARGET)-$(VERSION)/ \
	| gzip > $(build_dir)/$(TARGET)-$(MTIME).tgz
	test -d $(build_dir)/$(TARGET)-$(VERSION) && \
	test `pwd` != `(cd $(build_dir)/$(TARGET)-$(VERSION); pwd)` && \
	$(RM) -R $(build_dir)/$(TARGET)-$(VERSION)
	test -d ../Archiv && mv -v $(TARGET)-*.tgz ../Archiv || echo "no copy"

# basic file set
copy_files:
	mkdir $(DESTDIR)
	cd fl_i18n && \
	  $(MAKE) DESTDIR=$(DESTDIR)/fl_i18n -f $(MAKEFILE_ARCH) copy_files
	-$(RM) $(DESTDIR)/fl_i18n/Makefile
	cd $(SRCDIR) && \
	  $(COPY) -R $(ALL_FILES) $(DESTDIR)
	$(COPY) $(CONFIG_FILES) $(DESTDIR)
	cd $(SRCDIR) && \
	  $(COPY) -R settings $(DESTDIR)
	#$(COPY) -r cmms $(DESTDIR)
	-(cd $(LIB_XNVCTRL) && $(MAKE) -f Makefile clean)
	cd $(SRCDIR) && \
	  $(COPY) -R $(LIB_XNVCTRL) $(DESTDIR)
	mkdir $(DESTDIR)/modules
	cd $(SRCDIR) && \
	  $(COPY) $(CFILES_MODULES) $(CPPFILES_MODULES) $(CHEADERS_MODULES) \
	  $(DESTDIR)/modules/
	mkdir $(DESTDIR)/modules/devices
	cd $(SRCDIR) && \
	  $(COPY) $(CFILES_MODULES_DEVICES) $(DESTDIR)/modules/devices
	mkdir $(DESTDIR)/tests
	cd $(SRCDIR) && \
	  $(COPY) $(TEST_FILES) $(DESTDIR)/tests
	mkdir $(DESTDIR)/examples
	for exmpl in $(EXAMPLE_FILES); do \
	  mkdir -p $(DESTDIR)/$${exmpl}; rmdir $(DESTDIR)/$${exmpl}; \
	  cd $(SRCDIR) && \
	    $(COPY) -R $${exmpl} $(DESTDIR)/$${exmpl}; \
	done;
	mkdir $(DESTDIR)/FL
	cd $(SRCDIR) && \
	  $(COPY) $(Flmm_FILES) $(DESTDIR)/FL
	mkdir $(DESTDIR)/po
	cd $(SRCDIR) && \
	  $(COPY) $(POT_FILE) $(DESTDIR)/po
	for ling in $(LINGUAS); do \
	  test -f $(SRCDIR)/po/$${ling}.po \
	  && $(COPY) $(SRCDIR)/po/$${ling}.po $(DESTDIR)/po/; \
	done;
	echo ... $@ done

help:
	echo "... all :        build the binaries"
	echo "... docu :       generate documentation; requires doxygen"
	echo "  non default build targets:"
	echo "... test :       do a test"
	echo "... test2 :      build a second test binary"
	echo "... check :      do a test build and run it"
	echo "... examples :   try building the example directory"
	echo "... "
	echo "... install :    install the binaries, include files and data"
	echo "... install_bin: install only binaries"
	echo "... install-icc: install only profiles and targets"
	echo "... uninstall"
	echo "... clean :      remove binaries, object files and most processed data"
	echo "... distclean :  remove all files processed from configure scripts"
	echo "... rpm :        build RPM's"
	echo "... dist :       build a distribution tarball and place local"
	echo "... targz :      build a distribution tar ball"
	echo "... tgz :        build a development tar ball"
	echo "... copy_files : copy distribution files to a DESTDIR=xxx path"
	echo "... depend :     resolve dependencies"
	echo "  VARIABLES:"
	echo "... DESTDIR=\"/user/a/My Install Dir/\" install"
	echo "... BUILDDIR=../build_local"

# dependencies
include mkdepend
include cobjects

#ifndef MAKEDEPEND_ISUP
mkdepend: depend
#endif
#ifndef COBJECTS_ISUP
cobjects: cdepend
#endif

