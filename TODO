NOW:
- Update Class_s_.h to class.members_h
- Remove oyName_s and oyObserver_s from object system, they do not inherit from
  oyStruct_s and they use lowercase functions and no oyObject_s in constructors
  as all classes in objects_generic.
- Compare generated oyOptions_Xxxx() with hand written from git [up to oyXXX_MoveIn() is OK]
- We need a way to clear the templates/ dir from auto-generated templates
- Compile API_generated
- BUG: oyAPIGenerator crashes when allClassesInfo.at( c )->setContent( parents[allClassesInfo.at( c )->listOf()] );
  passes the name of a class that does not yet exist.
- BUG: "@brief\\s+([^\\n\\r\\f]+)\\n" seems to catch 2 spaces at beginning
+ Code Generator should export:
  - class.public_functions -> oyClass.h fully automatic creation
    regexp: "\n\s*([a-zA-Z0-9_\s\*]+)\(\s*([a-zA-Z0-9_\s\*]+)"
  - class.private_members
  - class.private_methods
  - class.parentName [OK]
- Fix templates/Base_s.c:67,72 (!?)

LATER:
3 Move the grantlee template creation code to a new class.
1 Create new template scheme for full public structures and adopt oyObject,
  oyName and oyObserver to it (classes in objects_generic). See [2]
2 Put the specifics (strings,etc) of an implementation to a new
  class and use it eg to export the generated source file names
  through ClassInfo.
  And then fix templates/CMakeLists.txt to use class.file_(public|private)_(c|h)
  and also oyTest.template.cc oyTest.template.h. Also see [1]
4 Create a visualisation of a file template hierarchy and put it in
  the files doxygen header, like Struct_s.template.h -> Base_s.h -> Option_s.template.h
5 Consider Putting all sources/* in the template files.
- BUG Dynamic QObject properties are not used by grantlee(!?)
- How to remove the ending \n in sources/* files?
- templates/Class* files are identical for both opaque pointer and hidden
  struct implementations. Do something about that?
- Find a way to not put the include guards on the auto generated source
  if the included file is empty. Is this even desirable?
- Add oyranos version ... to grantlee
+ Internal classes:
  - Marked with @internal
  - Do not export public methods with OYEXPORT
  - Do not #include oyClass_s.h in oyObjects.h
+ Function signatures:
  - Public header: OYAPI <return type> OYEXPORT <signature>
  - Private header: static <return type> <signature>
  - Public c file: <return type> OYEXPORT <signature>
  - Private c file: <return type> <signature>
- When there are changes in the source file, propagate them in the
  template and rerun the renderer.
- Save the filestamps of all files and abort when both source and
  template have been updated.

MUCH LATER:
 + Possibility to add more steps after code generation.
  - Code beautifier
  - Comment formatter

FAQ
Q. Should oyClass_XXX_() private functions be member of oyClass_s_ ?
A. ********************************

Q. Should all oyClass_XXX() public functions have a private
   oyClass_XXX_() - where the public does only checking? Like:
int oyClass_XXX( oyClass_s * class )
{
  oyClass_s_ *s = class;
  if(s)
    oyCheckType__m( oyOBJECT_CLASS_S, return 0 );

  return oyClass_XXX_( s );
}
A. **Too*many*function*names?*******************************

Q. Should all constructors initialise with `0' the pointer class members?
A. *********************************************************

Q. Should Struct be removed from oyStruct_LockCreateFunc_,
   or added to oyLockRelease_f, ...?
A. *************************************

Q. Will oyName_xxxxxxxMembers() be public or private?
A. ***************************************
Q. Will oyName_xxxxxxxMembers() be removed and replaced by
   just extending the blocks inside the template?
A. ***************************************

Q. Will oyName_s use @extends oyStruct_s
A. ***************************************

Q. Should '/* Include {' guards be kept inside or outside blocks?
A. ****************************************************************

Q. Will oyObject_s still be a: typedef struct oyObject_s_* oyObject_s;
or follow the rest classes?
A. For now, yes. It is just a refactored version of oyranos git.
   ********* Try to make it a "opaque pointer" class **********

Q. Will the members of oyObject_s be the same for both private and
   public structures? [If/When oyObject_s changes to new implementation]
A. ********** No, public members will be the same as all oyStruct_s ***

Q. What about parent constructor/destructors?
A. *****************************************************************

Q. Add a public oyXXX_ReleaseMembers()? It's free!
A. Probably not a good idea... *************************************

Q. Why make auto-generated templates read-only?
A. So to warn that any changes will be overwritten at next generator
   invocation. Use the [notemplates] tag in <class>.dox to prevent
   automatic template creation for that class.

Q. See if oyStruct_s can be removed from the templates, since
it does not seem to have any need to be auto-generated?
A. No, because that way, Base_s.[ch] can share its code
and also other template variables can be used by oyStruct_s.

Q. How to create a variable in Grantlee templates?
A. Use 'with' keyword

Q. Are generated oy<class>_s.template.[ch] template files editable?
A. (a) If the [notemplates] tag exists in the <class>.dox file
definition, then the template files are editable and the
code-generator will not touch them.
   (b) If not, they are always re-generated and any edit of
the template file is lost.
