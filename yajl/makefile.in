COLLECT = ar cru
RANLIB = ranlib
LNK = ln -s

TARGET=yajl
VERSION=1.0.12

SRCDIR = $(src_dir)

BINTARGET = $(TARGET)

API_FILES = \
	yajl/$(TARGET)_common.h \
	yajl/$(TARGET)_gen.h \
	yajl/$(TARGET)_parse.h \
	yajl/$(TARGET)_version.h
HEADERS = \
	$(TARGET)_alloc.h \
	$(TARGET)_buf.h \
	$(TARGET)_bytestack.h \
	$(TARGET)_encode.h \
	$(TARGET)_lex.h \
	$(TARGET)_parser.h
COMMON_CFILES = \
	$(TARGET).c \
	$(TARGET)_alloc.c \
	$(TARGET)_buf.c \
	$(TARGET)_encode.c \
	$(TARGET)_gen.c \
	$(TARGET)_lex.c \
	$(TARGET)_parser.c \
	$(TARGET)_version.c

LIBNAME = lib$(TARGET).a

CXXFLAGS_= $(CXXFLAGS)
CFLAGS_  = $(CFLAGS)

LDLIBS_ = -L./ $(LDFLAGS) \
	-L/lib \
	$(DBG_LIBS) $(dl) $(m) $(c)

C_HEADERS = \
	$(HEADERS)

CFILES = \
	$(COMMON_CFILES)
CPPFILES = \
	$(COMMON_CPPFILES) \
	$(TOOLKIT_FILES)
CXXFILES = \
	$(COMMON_CXXFILES)
TEST_CPP =
TEST_H = 

ALL_SOURCEFILES = \
	$(COMMON_CFILES) \
	$(COMMON_CPPFILES) \
	$(FLTK_CPPFILES) \
	$(TARGET_CFILES) \
	$(CXXFILES) \
	$(TEST_CPP)

ALL_HEADERFILES = \
	$(C_HEADERS) \
	$(TEST_H)

DOKU = \
	TODO \
	README \
	ChangeLog \
	COPYING

SOURCES = $(ALL_SOURCEFILES) $(ALL_HEADERFILES)
OBJECTS = $(CFILES:.c=.o) $(CPPFILES:.cpp=.o) $(CXXFILES:.cxx=.o)
TARGET_OBJECTS = $(TARGET_CFILES:.c=.o)


ALL_FILES =	$(SOURCES) \
	makefile.in \
	$(DOKU)

# get time stamp
C := $(shell date +%C)
MTIME   := $(shell date +%Y%m%e.%H%M%S | sed s/$C//)


all:	$(LIBNAME)
	
BASE =  
	

$(LIBNAME):	$(OBJECTS)
	echo Link $@ ...
	$(COLLECT) $(LIBNAME) $(OBJECTS)
	$(RANLIB) $(LIBNAME)

strip: $(BINTARGET)
	echo strip $(BINTARGET)
	strip $(BINTARGET)

static_static:	$(OBJECTS)
	$(CXX) $(OPTS) -o $(BINTARGET) \
	$(OBJECTS) \
	$(LDLIBS_) -static  $(dl) $(m) $(c) \
	-L/opt/local/lib
	$(REZ)



clean:
	echo clean $(TARGET) ...
	-$(RM) $(OBJECTS) $(TARGET_OBJECTS) $(BINTARGET) \
	$(LIBNAME)
	echo ... $@ done


# Build commands and filename extensions...
.SUFFIXES:	.0 .1 .3 .c .cxx .h .fl .man .o .z $(EXEEXT)

.c.o:
	echo Compiling $< ...
	$(CC) $(CFLAGS_) -c $(SRCDIR)/$<

.cxx.o:
	echo Compiling $< ...
	$(CXX) $(CXXFLAGS_) -c $(SRCDIR)/$<

.cpp.o:
	echo Compiling $< ...
	$(CXX) $(CXXFLAGS_) -c $(SRCDIR)/$<

.fl.cxx:
	echo Expanding $< ...
	fluid -c $<

.po:
	echo Generating $@ ...
	msgfmt $<

tgz:
	make DESTDIR=Entwickeln copy_files
	tar cf - Entwickeln/ \
	| gzip > $(TARGET)_$(MTIME).tgz
	test -d Entwickeln && \
	test `pwd` != `(cd Entwickeln; pwd)` && \
	$(RM) -R Entwickeln
	test -d ../../Archiv && mv -v $(TARGET)_*.tgz ../../Archiv

targz:
	make DESTDIR=$(TARGET)_$(VERSION) copy_files
	tar cf - $(TARGET)_$(VERSION)/ \
	| gzip > $(TARGET)_$(MTIME).tgz
	test -d $(TARGET)_$(VERSION) && \
	test `pwd` != `(cd $(TARGET)_$(VERSION); pwd)` && \
	$(RM) -R $(TARGET)_$(VERSION) 
	test -d ../../Archiv && mv -v $(TARGET)_*.tgz ../../Archiv || echo no copy

copy_files:
	echo Copy all $(TARGET) files ...
	mkdir $(DESTDIR)
	cd $(SRCDIR) && \
	  $(COPY) -R \
	  $(ALL_FILES) \
	  $(DESTDIR)
	mkdir $(DESTDIR)/yajl
	cd $(SRCDIR) && \
	  $(COPY) -R \
	  $(API_FILES) \
	  $(DESTDIR)/yajl


dist: $(BASE) targz
	test -f && $(COPY) ../../Archiv/$(TARGET)_$(MTIME).tgz $(TARGET)_$(VERSION).tar.gz || $(COPY) $(TARGET)_$(MTIME).tgz $(TARGET)_$(VERSION).tar.gz

$(TARGET).spec:
	./configure


.PHONY: install uninstall


